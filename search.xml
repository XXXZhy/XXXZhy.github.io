<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Google Drive无限容量目录索引网盘</title>
    <url>/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-效果"><a href="#1-效果" class="headerlink" title="1 效果"></a>1 效果</h1><p><a href="https://oss.zhy-goindex.workers.dev/" target="_blank" rel="noopener">https://oss.zhy-goindex.workers.dev/</a></p>
<img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/1.png" class="">

<a id="more"></a>

<h1 id="2-申请edu邮箱"><a href="#2-申请edu邮箱" class="headerlink" title="2 申请edu邮箱"></a>2 申请edu邮箱</h1><ul>
<li><a href="https://saodaye.com/1099.html" target="_blank" rel="noopener">超详细免费申请无限容量的谷歌云盘Google Drive 详细图文教程</a></li>
<li><a href="https://oss.achirou.workers.dev/0:/创建edu邮箱.docx" target="_blank" rel="noopener">下载：创建edu邮箱.docx</a></li>
<li>一般谷歌账号会有15GB，如果购买存储空间的土豪无视。</li>
<li><font color="red">数据无价，最好不要在edu邮箱的Google Drive里放重要的东西。</font></li>
</ul>
<p>得到邮箱后，直接可以邮箱登录Google Drive：<a href="https://drive.google.com" target="_blank" rel="noopener">https://drive.google.com</a></p>
<p>不能访问谷歌的，浏览器安装<a href="https://oss.zhy-goindex.workers.dev/0:/%E7%A0%B4%E8%A7%A3%E5%BA%94%E7%94%A8/%E8%B0%B7%E6%AD%8C%E6%8F%92%E4%BB%B6/%E8%B0%B7%E6%AD%8C%E4%B8%8A%E7%BD%91%E5%8A%A9%E6%89%8BGhelper.rar" target="_blank" rel="noopener">下载：Ghelper</a></p>
<img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/22.png" class="">

<h1 id="3-目录索引网盘"><a href="#3-目录索引网盘" class="headerlink" title="3 目录索引网盘"></a>3 目录索引网盘</h1><p>开源项目：</p>
<ul>
<li><a href="https://github.com/Aicirou/goindex-theme-acrou" target="_blank" rel="noopener">GoIndex-theme-acrou</a>，GoIndex原作者已删库，本文章用这个！</li>
<li><a href="https://github.com/maple3142/GDIndex" target="_blank" rel="noopener">GDIndex</a>，（这里不讲，原理相同，看自己喜欢哪一个）</li>
</ul>
<h2 id="3-1-CloudFlare账号"><a href="#3-1-CloudFlare账号" class="headerlink" title="3.1 CloudFlare账号"></a>3.1 CloudFlare账号</h2><ol>
<li>进入CF官网，<a href="https://dash.cloudflare.com/" target="_blank" rel="noopener">CloudFlare</a>，并创建CF账号</li>
<li>进入《账户主页》</li>
</ol>
<img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/3.png" class="">

<h2 id="3-2-创建Workers"><a href="#3-2-创建Workers" class="headerlink" title="3.2 创建Workers"></a>3.2 创建Workers</h2><img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/4.png" class="">

<p>新账号会创建<strong>子域</strong>，创建后不可修改，取好听点，用终身的- -!</p>
<blockquote>
<p><a href="https://oss.zhy-goindex.workers.dev/" target="_blank" rel="noopener">https://oss.zhy-goindex.workers.dev/</a> 本站网盘中<strong>zhy-goindex</strong>就是子域，<strong>oss</strong>是Wokers应用名。</p>
</blockquote>
<img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/5.png" class="">

<p>点击继续</p>
<img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/6.png" class="">

<p>随后验证邮箱，进入自己邮箱，点击邮件中的链接。</p>
<p>验证成功后再次创建Wokers</p>
<img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/4.png" class="">

<p>点击创建Worker</p>
<img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/7.png" class="">

<p>显示工作区</p>
<img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/8.png" class="">

<h2 id="3-3-获取idnex-js代码"><a href="#3-3-获取idnex-js代码" class="headerlink" title="3.3 获取idnex.js代码"></a>3.3 获取idnex.js代码</h2><p><a href="https://oss.achirou.workers.dev/0:/go2index/index.js?a=view" target="_blank" rel="noopener">点此：获取index.js</a></p>
<p>将链接中的代码全部复制在左侧Script中，在点击右边Preview，会出先预览效果</p>
<img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/9.png" class="">

<h2 id="3-4-获取Token码"><a href="#3-4-获取Token码" class="headerlink" title="3.4 获取Token码"></a>3.4 获取Token码</h2><p><a href="https://gdindex-code-builder.glitch.me/" target="_blank" rel="noopener">点此：进入DGIndex的代码生成器</a>，原GoIndex的代码生成器404了</p>
<img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/10.png" class="">

<p>点击【Click me】按钮，登录谷歌，并复制Token码</p>
<img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/11.png" class="">

<p>将Token码填入【Authorization Code】，随后点击【GetCode】按钮</p>
<img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/12.png" class="">

<p>复制【refresh_token】将其填入CF中的对应位置，并填写【client_id】和【client_secret】。</p>
<img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/13.png" class="">

<h2 id="3-5-填写目录id"><a href="#3-5-填写目录id" class="headerlink" title="3.5 填写目录id"></a>3.5 填写目录id</h2><img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/24.png" class="">

<p>每一个{    } 就是一个目录，不需要可以删，需要更多可以加。</p>
<p>【团队盘id获取】</p>
<img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/15.png" class="">

<p>【子文件夹id获取】</p>
<img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/16.png" class="">

<h2 id="3-6-加入README-md"><a href="#3-6-加入README-md" class="headerlink" title="3.6 加入README.md"></a>3.6 加入README.md</h2><p>写一个README，里面加上声明，放入对应盘或者子文件夹内，就会显示在页面的最下方。</p>
<img src="/2020/05/09/Google%20Drive%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95%E7%BD%91%E7%9B%98/17.png" class="">]]></content>
      <categories>
        <category>软件推荐</category>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>Google Drive</tag>
      </tags>
  </entry>
  <entry>
    <title>付费文档</title>
    <url>/2020/04/28/%E4%BB%98%E8%B4%B9%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="13bf966c0dbe3c635937ab32dffc415aba5874bb92f05144c3e44964e705a39d"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>个人博客</category>
        <category>加密文件</category>
      </categories>
      <tags>
        <tag>Hexo插件</tag>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>emoji符号大全</title>
    <url>/2020/05/19/emoji%E7%AC%A6%E5%8F%B7%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://emojipedia.org/" target="_blank" rel="noopener">emoji官网</a></p>
<p>以下非图片，皆可复制。</p>
<p>🌹🍀🍎💰📱🌙🍁🍂🍃🌷💎🔪🔫🏀⚽⚡👄👍🔥</p>
<p>😀😁😂😃😄😅😆😉😊😋😎😍😘😗😙😚😇😐😑😶😏😣😥😮😯😪😫😴😌😛😜😝😒😓😔😕😲😷😖😞😟😤😢😭😦😧😨😬😰😱😳😵😡😠</p>
<p>👦👧👨👩👴👵👶👱👮👲👳👷👸💂🎅👰👼💆💇🙍🙎🙅🙆💁🙋🙇🙌🙏👤👥🚶🏃👯💃👫👬👭💏💑👪</p>
<p>💪👈👉☝👆👇✌✋👌👍👎✊👊👋👏👐✍</p>
<p>👣👀👂👃👅👄💋👓👔👕👖👗👘👙👚👛👜👝🎒💼👞👟👠👡👢👑👒🎩🎓💄💅💍🌂</p>
<p>📱📲📶📳📴☎📞📟📠</p>
<p>♻🏧🚮🚰♿🚹🚺🚻🚼🚾⚠🚸⛔🚫🚳🚭🚯🚱🚷🔞💈</p>
<p>🙈🙉🙊🐵🐒🐶🐕🐩🐺🐱😺😸😹😻😼😽🙀😿😾🐈🐯🐅🐆🐴🐎🐮🐂🐃🐄🐷🐖🐗🐽🐏🐑🐐🐪🐫🐘🐭🐁🐀🐹🐰🐇🐻🐨🐼🐾🐔🐓🐣🐤🐥🐦🐧🐸🐊🐢🐍🐲🐉🐳🐋🐬🐟🐠🐡🐙🐚🐌🐛🐜🐝🐞🦋</p>
<a id="more"></a>

<p>💐🌸💮🌹🌺🌻🌼🌷🌱🌲🌳🌴🌵🌾🌿🍀🍁🍂🍃</p>
<p>🌍🌎🌏🌐🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜☀🌝🌞⭐🌟🌠☁⛅☔⚡❄🔥💧🌊</p>
<p>🍇🍈🍉🍊🍋🍌🍍🍎🍏🍐🍑🍒🍓🍅🍆🌽🍄🌰🍞🍖🍗🍔🍟🍕🍳🍲🍱🍘🍙🍚🍛🍜🍝🍠🍢🍣🍤🍥🍡🍦🍧🍨🍩🍪🎂🍰🍫🍬🍭🍮🍯🍼☕🍵🍶🍷🍸🍹🍺🍻🍴</p>
<p>🎪🎭🎨🎰🚣🛀🎫🏆⚽⚾🏀🏈🏉🎾🎱🎳⛳🎣🎽🎿🏂🏄🏇🏊🚴🚵🎯🎮🎲🎷🎸🎺🎻🎬</p>
<p>😈👿👹👺💀☠👻👽👾💣</p>
<p>🌋🗻🏠🏡🏢🏣🏤🏥🏦🏨🏩🏪🏫🏬🏭🏯🏰💒🗼🗽⛪⛲🌁🌃🌆🌇🌉🌌🎠🎡🎢🚂🚃🚄🚅🚆🚇🚈🚉🚊🚝🚞🚋🚌🚍🚎🚏🚐🚑🚒🚓🚔🚕🚖🚗🚘🚚🚛🚜🚲⛽🚨🚥🚦🚧⚓⛵🚤🚢✈💺🚁🚟🚠🚡🚀🎑🗿🛂🛃🛄🛅</p>
<p>💌💎🔪💈🚪🚽🚿🛁⌛⏳⌚⏰🎈🎉🎊🎎🎏🎐🎀🎁📯📻📱📲☎📞📟📠🔋🔌💻💽💾💿📀🎥📺📷📹📼🔍🔎🔬🔭📡💡🔦🏮📔📕📖📗📘📙📚📓📃📜📄📰📑🔖💰💴💵💶💷💸💳✉📧📨📩📤📥📦📫📪📬📭📮✏✒📝📁📂📅📆📇📈📉📊📋📌📍📎📏📐✂🔒🔓🔏🔐🔑🔨🔫🔧🔩🔗💉💊🚬🔮🚩🏳️‍🌈🎌💦💨</p>
<p>♠♥♦♣🀄🎴🔇🔈🔉🔊📢📣💤💢💬💭♨🌀🔔🔕✡✝🔯📛🔰🔱⭕✅☑✔✖❌❎➕➖➗➰➿〽✳✴❇‼⁉❓❔❕❗©®™🎦🔅🔆💯🔠🔡🔢🔣🔤🅰🆎🅱🆑🆒🆓ℹ🆔Ⓜ🆕🆖🅾🆗🅿🆘🆙🆚🈁🈂🈷🈶🈯🉐🈹🈚🈲🉑🈸🈴🈳㊗㊙🈺🈵▪▫◻◼◽◾⬛⬜🔶🔷🔸🔹🔺🔻💠🔲🔳⚪⚫🔴🔵</p>
<p>🐁🐂🐅🐇🐉🐍🐎🐐🐒🐓🐕🐖</p>
<p>♈♉♊♋♌♍♎♏♐♑♒♓⛎</p>
<p>🕛🕧🕐🕜🕑🕝🕒🕞🕓🕟🕔🕠🕕🕡🕖🕢🕗🕣🕘🕤🕙🕥🕚🕦⌛⏳⌚⏰⏱⏲🕰</p>
<p>💘❤💓💔💕💖💗💙💚💛💜💝💞💟❣</p>
<p>💐🌸💮🌹🌺🌻🌼🌷🌱🌿🍀</p>
<p>🌿🍀🍁🍂🍃</p>
<p>🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜🌝</p>
<p>🍇🍈🍉🍊🍋🍌🍍🍎🍏🍐🍑🍒🍓</p>
<p>💴💵💶💷💰💸💳</p>
<p>🚂🚃🚄🚅🚆🚇🚈🚉🚊🚝🚞🚋🚌🚍🚎🚏🚐🚑🚒🚓🚔🚕🚖🚗🚘🚚🚛🚜🚲⛽🚨🚥🚦🚧⚓⛵🚣🚤🚢✈💺🚁🚟🚠🚡🚀</p>
<p>🏠🏡🏢🏣🏤🏥🏦🏨🏩🏪🏫🏬🏭🏯🏰💒🗼🗽⛪🌆🌇🌉</p>
<p>📱📲☎📞📟📠🔋🔌💻💽💾💿📀🎥📺📷📹📼🔍🔎🔬🔭📡📔📕📖📗📘📙📚📓📃📜📄📰📑🔖💳✉📧📨📩📤📥📦📫📪📬📭📮✏✒📝📁📂📅📆📇📈📉📊📋📌📍📎📏📐✂🔒🔓🔏🔐🔑</p>
<p>⬆↗➡↘⬇↙⬅↖↕↔↩↪⤴⤵🔃🔄🔙🔚🔛🔜🔝</p>
]]></content>
      <categories>
        <category>常用操作</category>
      </categories>
      <tags>
        <tag>表情</tag>
      </tags>
  </entry>
  <entry>
    <title>UML（案例：作业批改系统）</title>
    <url>/2020/05/16/UML%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%9C%E4%B8%9A%E6%89%B9%E6%94%B9%E7%B3%BB%E7%BB%9F%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-作业批改系统需求："><a href="#1-作业批改系统需求：" class="headerlink" title="1 作业批改系统需求："></a>1 作业批改系统需求：</h1><p>（1）教师用户登录后可以创建一门课程，设置作业，设置作业截止时间。<br>（2）教师用可以创建一门课程，添加学生选课信息。<br>（3）教师可以批改学生的作业，导出学生的成绩。统计本门课程的总成绩。<br>（4）学生用户登录后，可以对自己的课程下的作业进行提交。<br>（5）管理员设置教师、学生用户信息。</p>
<a id="more"></a>

<h1 id="2-用例图"><a href="#2-用例图" class="headerlink" title="2 用例图"></a>2 用例图</h1><img src="/2020/05/16/UML%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%9C%E4%B8%9A%E6%89%B9%E6%94%B9%E7%B3%BB%E7%BB%9F%EF%BC%89/%E7%94%A8%E4%BE%8B%E5%9B%BE.png" class="">

<h1 id="3-类图"><a href="#3-类图" class="headerlink" title="3 类图"></a>3 类图</h1><img src="/2020/05/16/UML%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%9C%E4%B8%9A%E6%89%B9%E6%94%B9%E7%B3%BB%E7%BB%9F%EF%BC%89/%E7%B1%BB%E5%9B%BE.jpg" class="">

<h1 id="4-顺序图"><a href="#4-顺序图" class="headerlink" title="4 顺序图"></a>4 顺序图</h1><img src="/2020/05/16/UML%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%9C%E4%B8%9A%E6%89%B9%E6%94%B9%E7%B3%BB%E7%BB%9F%EF%BC%89/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E5%88%9B%E5%BB%BA%E8%AF%BE%E7%A8%8B.png" class="">

<img src="/2020/05/16/UML%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%9C%E4%B8%9A%E6%89%B9%E6%94%B9%E7%B3%BB%E7%BB%9F%EF%BC%89/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E5%AF%BC%E5%87%BA%E6%88%90%E7%BB%A9.png" class="">

<img src="/2020/05/16/UML%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%9C%E4%B8%9A%E6%89%B9%E6%94%B9%E7%B3%BB%E7%BB%9F%EF%BC%89/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E6%89%B9%E6%94%B9%E4%BD%9C%E4%B8%9A.png" class="">

<img src="/2020/05/16/UML%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%9C%E4%B8%9A%E6%89%B9%E6%94%B9%E7%B3%BB%E7%BB%9F%EF%BC%89/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A.png" class="">

<h1 id="5-协作图"><a href="#5-协作图" class="headerlink" title="5 协作图"></a>5 协作图</h1><img src="/2020/05/16/UML%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%9C%E4%B8%9A%E6%89%B9%E6%94%B9%E7%B3%BB%E7%BB%9F%EF%BC%89/%E5%8D%8F%E4%BD%9C%E5%9B%BE_%E5%88%9B%E5%BB%BA%E8%AF%BE%E7%A8%8B.png" class="">

<img src="/2020/05/16/UML%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%9C%E4%B8%9A%E6%89%B9%E6%94%B9%E7%B3%BB%E7%BB%9F%EF%BC%89/%E5%8D%8F%E4%BD%9C%E5%9B%BE_%E5%AF%BC%E5%87%BA%E6%88%90%E7%BB%A9.png" class="">

<img src="/2020/05/16/UML%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%9C%E4%B8%9A%E6%89%B9%E6%94%B9%E7%B3%BB%E7%BB%9F%EF%BC%89/%E5%8D%8F%E4%BD%9C%E5%9B%BE_%E6%89%B9%E6%94%B9%E4%BD%9C%E4%B8%9A.png" class="">

<img src="/2020/05/16/UML%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%9C%E4%B8%9A%E6%89%B9%E6%94%B9%E7%B3%BB%E7%BB%9F%EF%BC%89/%E5%8D%8F%E4%BD%9C%E5%9B%BE_%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A.png" class="">

<h1 id="6-状态图"><a href="#6-状态图" class="headerlink" title="6 状态图"></a>6 状态图</h1><img src="/2020/05/16/UML%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%9C%E4%B8%9A%E6%89%B9%E6%94%B9%E7%B3%BB%E7%BB%9F%EF%BC%89/%E7%8A%B6%E6%80%81%E5%9B%BE.png" class="">

<h1 id="7-活动图"><a href="#7-活动图" class="headerlink" title="7 活动图"></a>7 活动图</h1><img src="/2020/05/16/UML%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%9C%E4%B8%9A%E6%89%B9%E6%94%B9%E7%B3%BB%E7%BB%9F%EF%BC%89/%E6%B4%BB%E5%8A%A8%E5%9B%BE1.jpg" class="">

<img src="/2020/05/16/UML%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%9C%E4%B8%9A%E6%89%B9%E6%94%B9%E7%B3%BB%E7%BB%9F%EF%BC%89/%E6%B4%BB%E5%8A%A8%E5%9B%BE2.jpg" class="">

<h1 id="8-组件图"><a href="#8-组件图" class="headerlink" title="8 组件图"></a>8 组件图</h1><img src="/2020/05/16/UML%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%9C%E4%B8%9A%E6%89%B9%E6%94%B9%E7%B3%BB%E7%BB%9F%EF%BC%89/%E7%BB%84%E4%BB%B6%E5%9B%BE.png" class="">

<h1 id="9-部署图"><a href="#9-部署图" class="headerlink" title="9 部署图"></a>9 部署图</h1><img src="/2020/05/16/UML%EF%BC%88%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%9C%E4%B8%9A%E6%89%B9%E6%94%B9%E7%B3%BB%E7%BB%9F%EF%BC%89/%E9%83%A8%E7%BD%B2%E5%9B%BE.png" class="">]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>软件项目管理（第十章：IT项目风险管理）</title>
    <url>/2020/05/15/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E9%A3%8E%E9%99%A9%E7%AE%A1%E7%90%86%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/05/15/软件项目管理（第十章：IT项目风险管理）/#1">10.1 项目风险管理概述</a></p>
<p><a href="/2020/05/15/软件项目管理（第十章：IT项目风险管理）/#2">10.2 风险管理规划</a></p>
<p><a href="/2020/05/15/软件项目管理（第十章：IT项目风险管理）/#3">10.3 IT项目风险识别</a></p>
<p><a href="/2020/05/15/软件项目管理（第十章：IT项目风险管理）/#4">10.4 项目风险定性与定量分析</a></p>
<p><a href="/2020/05/15/软件项目管理（第十章：IT项目风险管理）/#5">10.5 项目风险应对规划</a></p>
<p><a href="/2020/05/15/软件项目管理（第十章：IT项目风险管理）/#6">10.6 项目风险监控</a></p>
</blockquote>
<h1 id="10-1-项目风险管理概述"><a href="#10-1-项目风险管理概述" class="headerlink" title="10.1 项目风险管理概述"></a><span id="1">10.1 项目风险管理概述</span></h1><h2 id="10-1-1-风险概述"><a href="#10-1-1-风险概述" class="headerlink" title="10.1.1 风险概述"></a>10.1.1 风险概述</h2><h3 id="1-风险概率"><a href="#1-风险概率" class="headerlink" title="1 风险概率"></a>1 风险概率</h3><p>风险是指在一定条件下和一定时期内可能发生的各种结果的变化程度。</p>
<h3 id="2-风险特点"><a href="#2-风险特点" class="headerlink" title="2 风险特点"></a>2 风险特点</h3><ul>
<li>风险存在的<strong>客观性</strong>和<strong>普遍性</strong>。</li>
<li><strong>某一具体风险发生的偶然性和大量风险发生的必然性</strong>。</li>
<li>风险的<strong>可变性</strong>。</li>
<li>风险的<strong>多样性</strong>和<strong>多层次性</strong>。</li>
</ul>
<a id="more"></a>

<h3 id="3-风险分类"><a href="#3-风险分类" class="headerlink" title="3 风险分类"></a>3 风险分类</h3><ul>
<li><strong>技术风险</strong>是指由于与项目研制相关的<strong>技术因素的变化</strong>而给项目建设带来的风险，包括潜在的设计、实现、接口、验证和维护、规格说明的二义性、技术的不确定性、“老” 技术与“新”技术等方面的问题。</li>
<li><strong>费用风险</strong>是指由于项目任务要求不明确，或受技术和进度等因素的影响而可能给<strong>项目费用带来超支</strong>的可能性。</li>
<li><strong>进度风险</strong>是指由于种种不确定性因素的存在而导致<strong>项目完工期拖延</strong>的风险。该风险主要取决于技术因素、计划合理性、资源充分性、项目人员经验等几个方面。</li>
<li><strong>管理风险是</strong>指由于项目建设的管理职能与管理对象（如管理组织、领导素质、管理计划）等因素的状况及其可能的变化，给项目建设带来的风险。</li>
<li><strong>社会环境风险</strong>是指由于国际、国内的政治、经济技术的波动（如政策变化等），或者由于自然界产生的灾害(如地震、洪水等)而可能给项目带来的风险。</li>
<li><strong>商业风险</strong>是指开发了一个没有人真正需要的产品或系统（市场风险）;或开发的产品不符合公司的整体商业策略(策略风险);或构成了一个销售部不知道如何去出售的产品(销售风险)等。</li>
</ul>
<p><em>从预测的角度将风险分为以下3类:</em></p>
<ul>
<li><p><strong>已知风险</strong>:是通过仔细评估项目计划、开发项目的经济和.技术环境以及其他可靠的信息来源之后可以发现的那些风险。例如，不现实的交付时间;没有需求或软件范围文档;恶劣的开发环境等。</p>
</li>
<li><p><strong>可预测的风险</strong>:是指能够从过去项目的经验中推测出来的风险。例如，人员变动;与客户之间无法沟通等。</p>
</li>
<li><p><strong>不可预测的风险</strong>:是指可能，但很难事先识别出来的风险</p>
</li>
</ul>
<h3 id="4-IT项目的风险"><a href="#4-IT项目的风险" class="headerlink" title="4 IT项目的风险"></a>4 IT项目的风险</h3><p>IT项目的风险主要表现在以下几个方面：<br>（1）用户需求不一致、变化大。<br>（2）技术变革。<br>（3）系统部署风险。<br>（4）流程重组风险。<br>（5）组织与人力资源变动。<br>（6）开发方式风险。</p>
<h3 id="5-风险成本"><a href="#5-风险成本" class="headerlink" title="5 风险成本"></a>5 风险成本</h3><p>风险的有形成本包括风险发生时造成的直接损失和间接损失。</p>
<p>风险的无形成本是指由于风险所具有的不确定性而使项目在风险发生前和发生后所付出的代价。</p>
<h2 id="10-1-2-项目风险管理概述"><a href="#10-1-2-项目风险管理概述" class="headerlink" title="10.1.2 项目风险管理概述"></a>10.1.2 项目风险管理概述</h2><h3 id="1-项目风险管理理论"><a href="#1-项目风险管理理论" class="headerlink" title="1 项目风险管理理论"></a>1 项目风险管理理论</h3><p>项目风险管理理论可以分成两种：</p>
<ul>
<li>一种是<strong>针对无预警信息项目风险的管理方法和理论</strong>，由于这种风险很难提前识别和跟踪，所以难以进行事前控制，而只能在风险发生时采取类似“救火”式的方法去控制或消减这类项目风险的后果。所以无预警信息项目风险的管理控制主要有两种方法，其- -是消减项目风险后果的方法，其二是项目风险转移的方法(即通过外包等方式转移风险的方法)。</li>
<li>另一种理论和方法是<strong>针对有预警信息的项目风险</strong>，对于这类风险人们可以通过收集预警信息去识别和预测它，所以可以通过跟踪其发生和发展变化而采取各种措施控制这类项目风险。</li>
</ul>
<p>风险管理的力度可以分为4个层次：</p>
<ul>
<li>危机管理：是在风险已经造成麻烦后才着手处理它们。</li>
<li>风险缓解：事先制订好风险发生后的补救措施，但不制订任何的防范措施。</li>
<li>着力预防：将风险识别与风险防范作为项目的一部分加以规划和执行。</li>
<li>消灭根源：识别和消灭可能产生风险的根源。</li>
</ul>
<h3 id="2-项目风险管理的方法"><a href="#2-项目风险管理的方法" class="headerlink" title="2 项目风险管理的方法"></a>2 项目风险管理的方法</h3><p>（1）项目风险潜在阶段的管理方法。<br>（2）项目风险发生阶段的管理方法。<br>（3）项目风险后果阶段的管理方法。</p>
<h3 id="3-风险管理的策略"><a href="#3-风险管理的策略" class="headerlink" title="3 风险管理的策略"></a>3 风险管理的策略</h3><p>风险管理策略应满足以下要求：</p>
<ul>
<li>在项目开发中<strong>规划风险管理</strong>，尽量避免风险；</li>
<li>指定<strong>风险管理者</strong>，监控风险因素；</li>
<li>建立<strong>风险清单及风险管理计划</strong>；</li>
<li>建立<strong>风险反馈渠道</strong>。</li>
</ul>
<h3 id="4-项目风险管理过程"><a href="#4-项目风险管理过程" class="headerlink" title="4 项目风险管理过程"></a>4 项目风险管理过程</h3><img src="/2020/05/15/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E9%A3%8E%E9%99%A9%E7%AE%A1%E7%90%86%EF%BC%89/1.png" class="">

<h3 id="5-风险评价准则"><a href="#5-风险评价准则" class="headerlink" title="5 风险评价准则"></a>5 风险评价准则</h3><p>（1）风险回避准则。<br>（2）风险权衡准则。<br>（3）风险处理成本最小原则。<br>（4）风险成本/效益比准则。<br>（5）社会费用最小准则。</p>
<h2 id="10-1-3-项目风险管理的作用"><a href="#10-1-3-项目风险管理的作用" class="headerlink" title="10.1.3 项目风险管理的作用"></a>10.1.3 项目风险管理的作用</h2><ul>
<li>有效的风险管理可以提高项目的成功率。</li>
<li>提前对风险制定对策，就可以在风险发生时迅速做出反应，避免忙中出错造成更大损失。</li>
<li>风险管理可以增加团队的健壮性。</li>
<li>有效的风险管理可以帮助项目经理抓住工作重点，将主要精力集中于重大风险，将工作方式从被动救火转变为主动防范。</li>
</ul>
<h1 id="10-2-风险管理规划"><a href="#10-2-风险管理规划" class="headerlink" title="10.2 风险管理规划"></a><span id="2">10.2 风险管理规划</span></h1><h2 id="10-2-1-风险管理规划的内容和依据"><a href="#10-2-1-风险管理规划的内容和依据" class="headerlink" title="10.2.1 风险管理规划的内容和依据"></a>10.2.1 风险管理规划的内容和依据</h2><h3 id="1-风险管理规划的内容"><a href="#1-风险管理规划的内容" class="headerlink" title="1 风险管理规划的内容"></a>1 风险管理规划的内容</h3><p>（1）选择确定风险管理的方法。<br>        1）风险管理表格。<br>        2）风险数据库模式。<br>（2）确定风险管理的组织和人员。<br>（3）明确时间周期。<br>（4）定义风险类型级别及说明。<br>（5）确定基准。<br>（6）规定汇报形式。<br>（7）进行跟踪。</p>
<h3 id="2-风险管理规划的依据"><a href="#2-风险管理规划的依据" class="headerlink" title="2 风险管理规划的依据"></a>2 风险管理规划的依据</h3><ul>
<li>项目规划中包含或涉及的有关内容。</li>
<li>项目组织及个人所经历和积累的风险管理经验及实践。</li>
<li>决策者、责任方及授权情况。</li>
<li>项目利益相关者对项目风险的敏感程度及可承受能力。</li>
<li>可获取的数据及管理系统情况。</li>
<li>风险管理模板。</li>
</ul>
<h2 id="10-2-2-风险管理规划的程序"><a href="#10-2-2-风险管理规划的程序" class="headerlink" title="10.2.2 风险管理规划的程序"></a>10.2.2 风险管理规划的程序</h2><h3 id="1-为严重风险确定风险设想"><a href="#1-为严重风险确定风险设想" class="headerlink" title="1 为严重风险确定风险设想"></a>1 为严重风险确定风险设想</h3><ul>
<li>假设风险已经发生，考虑如何应对；</li>
<li>假设风险将要发生，说明风险设想；</li>
<li>列出风险发生之前的事件和情况。</li>
</ul>
<h3 id="2-制订风险应对备用方案"><a href="#2-制订风险应对备用方案" class="headerlink" title="2 制订风险应对备用方案"></a>2 制订风险应对备用方案</h3><h3 id="3-选择风险应对途径"><a href="#3-选择风险应对途径" class="headerlink" title="3 选择风险应对途径"></a>3 选择风险应对途径</h3><h3 id="4-制订风险管理计划"><a href="#4-制订风险管理计划" class="headerlink" title="4 制订风险管理计划"></a>4 制订风险管理计划</h3><h3 id="5-建立风险管理模板"><a href="#5-建立风险管理模板" class="headerlink" title="5 建立风险管理模板"></a>5 建立风险管理模板</h3><h3 id="6-确定风险数据库模式"><a href="#6-确定风险数据库模式" class="headerlink" title="6 确定风险数据库模式"></a>6 确定风险数据库模式</h3><h2 id="10-2-3-风险管理规划的成果"><a href="#10-2-3-风险管理规划的成果" class="headerlink" title="10.2.3 风险管理规划的成果"></a>10.2.3 风险管理规划的成果</h2><p>风险管理规划的成果是形成一套风险管理计划文件，其中最重要的是风险形势估计、风险管理计划和风险规避计划。</p>
<h3 id="风险管理计划表"><a href="#风险管理计划表" class="headerlink" title="风险管理计划表"></a>风险管理计划表</h3><table>
<thead>
<tr>
<th>风险因素</th>
<th>类别</th>
<th>概率</th>
<th>影响</th>
<th>RMMM</th>
<th>负责人</th>
<th>发生阶段</th>
</tr>
</thead>
<tbody><tr>
<td>开发的产品不再符合公司的整体商业策略</td>
<td>BU</td>
<td>5%</td>
<td>5</td>
<td>监控</td>
<td>高级经理</td>
<td>全程</td>
</tr>
<tr>
<td>人力需求估计过低</td>
<td>TE</td>
<td>50%</td>
<td>4</td>
<td>监控</td>
<td>项目经理</td>
<td>详细设计与编码</td>
</tr>
<tr>
<td>没有得到预算或人力上的保证</td>
<td>BU</td>
<td>50%</td>
<td>4</td>
<td>监控</td>
<td>项目经理</td>
<td>全程</td>
</tr>
<tr>
<td>与BOSS开发组之间无法协调</td>
<td>DE</td>
<td>20%</td>
<td>4</td>
<td>缓解</td>
<td>高级经理</td>
<td>设计阶段</td>
</tr>
<tr>
<td>复用程度低于计划</td>
<td>PS</td>
<td>65%</td>
<td>3</td>
<td>风险</td>
<td>软件经理</td>
<td>编码阶段</td>
</tr>
<tr>
<td>规模估算可能和实际差别很大</td>
<td>PS</td>
<td>60%</td>
<td>3</td>
<td>监控</td>
<td>项目经理</td>
<td>设计编码</td>
</tr>
<tr>
<td>缺少对工具的培训</td>
<td>DE</td>
<td>50%</td>
<td>3</td>
<td>缓解</td>
<td>项目经理</td>
<td>编码阶段</td>
</tr>
<tr>
<td>测试和编码的具体监控难以落实</td>
<td>PU</td>
<td>40%</td>
<td>3</td>
<td>监控</td>
<td>项目经理</td>
<td>编码测试</td>
</tr>
<tr>
<td>四层结构新技术的尝试可能导致技术力量不够</td>
<td>ST</td>
<td>30%</td>
<td>3</td>
<td>缓解</td>
<td>软件经理</td>
<td>设计编码</td>
</tr>
<tr>
<td>参与人员的流动</td>
<td>TE</td>
<td>30%</td>
<td>3</td>
<td>缓解</td>
<td>项目经理</td>
<td>全程</td>
</tr>
<tr>
<td>数据仓库新技术的尝试不能保证成功</td>
<td>ST</td>
<td>20%</td>
<td>3</td>
<td>缓解</td>
<td>软件经理</td>
<td>分析设计</td>
</tr>
<tr>
<td>OO分析和设计新技术的尝试可能与传统的过程冲突</td>
<td>ST</td>
<td>20%</td>
<td>3</td>
<td>缓解</td>
<td>项目经理</td>
<td>分析设计</td>
</tr>
<tr>
<td>交付期限将被紧缩</td>
<td>BU</td>
<td>10%</td>
<td>3</td>
<td>监控</td>
<td>项目经理</td>
<td>全程</td>
</tr>
<tr>
<td>开发人员工作的短时中断</td>
<td>PU</td>
<td>90%</td>
<td>2</td>
<td>计划</td>
<td>项目经理</td>
<td>全程</td>
</tr>
<tr>
<td>与客户之间无法沟通</td>
<td>CU</td>
<td>90%</td>
<td>2</td>
<td>缓解</td>
<td>项目经理</td>
<td>需求\分析</td>
</tr>
<tr>
<td>产品创建和使用的数据库很大</td>
<td>PS</td>
<td>80%</td>
<td>2</td>
<td>监控</td>
<td>软件经理</td>
<td>测试交付</td>
</tr>
<tr>
<td>用户需求发生较大的改变</td>
<td>PS</td>
<td>65%</td>
<td>2</td>
<td>计划</td>
<td>项目经理</td>
<td>分析之后</td>
</tr>
<tr>
<td>测试工具欠缺不能保证测试的效率</td>
<td>DE</td>
<td>50%</td>
<td>2</td>
<td>缓解</td>
<td>软件经理</td>
<td>测试交付</td>
</tr>
<tr>
<td>交付期限不能保证产品的完整性</td>
<td>BU</td>
<td>50%</td>
<td>2</td>
<td>监控</td>
<td>项目经理</td>
<td>设计编码</td>
</tr>
<tr>
<td>技术达不到预期的效果</td>
<td>ST</td>
<td>50%</td>
<td>2</td>
<td>监控</td>
<td>软件经理</td>
<td>设计</td>
</tr>
<tr>
<td>开发人员不能严格遵守过程规范</td>
<td>PU</td>
<td>50%</td>
<td>2</td>
<td>监控</td>
<td>项目经理</td>
<td>全程</td>
</tr>
<tr>
<td>合作者或合作关系的重大变化</td>
<td>DE</td>
<td>40%</td>
<td>2</td>
<td>缓解</td>
<td>高级经理</td>
<td>全程</td>
</tr>
<tr>
<td>参与人员缺乏经验</td>
<td>TE</td>
<td>40%</td>
<td>2</td>
<td>缓解</td>
<td>软件经理</td>
<td>全程</td>
</tr>
<tr>
<td>最终用户可能抵制该系统</td>
<td>BU</td>
<td>10%</td>
<td>1</td>
<td>缓解</td>
<td>项目经理</td>
<td>交付维护</td>
</tr>
</tbody></table>
<h3 id="风险清单"><a href="#风险清单" class="headerlink" title="风险清单"></a>风险清单</h3><table>
<thead>
<tr>
<th>本周</th>
<th>上周</th>
<th>上榜周数</th>
<th>风险</th>
<th>风险解决进度</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>5</td>
<td>拖泥带水的需求</td>
<td>l利用快速原型工具创建界面原型来收集高质量需求规格<br/>  l需求规格纳入明确的变更控制，里程碑完成的工作产品有助于稳定需求。</td>
</tr>
<tr>
<td>2</td>
<td>5</td>
<td>5</td>
<td>不切实际的需求或开发人员华而不实的毛病</td>
<td>l软件范围描述中应当具体说明软件中不包括哪些东西<br/>  l检查项目清单来检查“额外的设计和功能”</td>
</tr>
<tr>
<td>3</td>
<td>2</td>
<td>4</td>
<td>发行软件质量太低</td>
<td>l确定采用规范的开发过程<br/>  l对需求、设计和程序进行技术检查<br/>  l测试规划确认所有功能都涵盖在系统测试中<br/>  l有独立的测试员进行系统测试</td>
</tr>
<tr>
<td>4</td>
<td>7</td>
<td>5</td>
<td>不可能实现的时间表</td>
<td>l避免完成需求规格前已决定了日程安排<br/>  l在最省事的上游时期进行寻找和更正问题的检讨<br/>  l在项目进行中要不断校正时间表<br/>  l积极追踪项目进度，确保进度延迟及早发现<br/>  l当整个项目花费的时间比预期要久时，阶段完成的做法可以让部分功能先被完成</td>
</tr>
<tr>
<td>5</td>
<td>4</td>
<td>2</td>
<td>不稳定的工具延误时间</td>
<td>l只在项目中使用一两项新工具，其余都沿用前面已经熟悉的工具</td>
</tr>
<tr>
<td>6</td>
<td>-</td>
<td>1</td>
<td>人员流动率高</td>
<td>l把开发人员的目标统一到项目目标上<br/>  l确定阶段性工作完成，明确期望目标<br/>  l定期重新估计，修订计划，避免大量加班<br/>  l提供好的工作环境<br/>  l项目经理应该主动为开发人员提供工作和生活上的帮助</td>
</tr>
<tr>
<td>7</td>
<td>3</td>
<td>5</td>
<td>开发人员与客户间的摩擦</td>
<td>l使用者界面雏形让开发人员和客户在细节看法上达成一致<br/>  l用阶段性完成的方式让客户看到渐进的项目进度</td>
</tr>
<tr>
<td>8</td>
<td>6</td>
<td>5</td>
<td>不良的工作环境</td>
<td>l在完成使用者界面雏形后。项目组进行封闭式开发<br/>  l需要增加来更换工作处所的经费</td>
</tr>
</tbody></table>
<h1 id="10-3-IT项目风险识别"><a href="#10-3-IT项目风险识别" class="headerlink" title="10.3 IT项目风险识别"></a><span id="3">10.3 IT项目风险识别</span></h1><h2 id="10-3-1-风险识别过程"><a href="#10-3-1-风险识别过程" class="headerlink" title="10.3.1 风险识别过程"></a>10.3.1 风险识别过程</h2><ol>
<li>识别并确定项目有哪些潜在的风险</li>
<li>识别引起这些风险的主要影响因素</li>
<li>识别项目风险可能引起的后果</li>
</ol>
<h2 id="10-3-2-风险识别方法"><a href="#10-3-2-风险识别方法" class="headerlink" title="10.3.2 风险识别方法"></a>10.3.2 风险识别方法</h2><h3 id="1-风险条目检查表"><a href="#1-风险条目检查表" class="headerlink" title="1 风险条目检查表"></a>1 风险条目检查表</h3><p>（1）产品规模风险。</p>
<p>与软件规模相关的常见风险因素有:</p>
<ul>
<li><p>估算产品的规模的方法(LOC或代码行，FP或功能点，程序或文件的数目)。</p>
</li>
<li><p>对于估算出的产品规模估算的信任度如何?</p>
</li>
<li><p>产品规模与以前产品规模平均值的偏差是多少?</p>
</li>
<li><p>产品的用户数有多少?</p>
</li>
<li><p>产品创建或使用的数据库大小如何?</p>
</li>
<li><p>复用的软件有多少?</p>
</li>
<li><p>产品的需求改变多少?</p>
</li>
</ul>
<p>（2）需求风险。</p>
<p>（3）商业影响风险检查表。</p>
<p>（4）相关性风险。</p>
<p>（5）管理风险。</p>
<p>（6）技术风险。</p>
<p>（7）开发环境风险。</p>
<p>（8）人员数目及经验风险。</p>
<h3 id="2-头脑风暴法"><a href="#2-头脑风暴法" class="headerlink" title="2 头脑风暴法"></a>2 头脑风暴法</h3><ol>
<li>个人头脑风暴法。</li>
<li>直接头脑风暴法。是专家们之间通过思想信息交流，进而进行创造性思维产生思维共振和组合，形成更高级的思想信息。这种方法是通过专家会议的形式进行的，因为也称为专家会议法。<ol>
<li>组织专家会议遵循的规则。</li>
<li>直接头脑风暴法的组织。</li>
</ol>
</li>
<li>反向头脑风暴法。</li>
</ol>
<h3 id="3-情景分析法"><a href="#3-情景分析法" class="headerlink" title="3 情景分析法"></a>3 情景分析法</h3><h3 id="4-其他方法"><a href="#4-其他方法" class="headerlink" title="4 其他方法"></a>4 其他方法</h3><h2 id="10-3-3-风险识别的结果"><a href="#10-3-3-风险识别的结果" class="headerlink" title="10.3.3 风险识别的结果"></a>10.3.3 风险识别的结果</h2><h3 id="1-已识别出的项目风险"><a href="#1-已识别出的项目风险" class="headerlink" title="1 已识别出的项目风险"></a>1 已识别出的项目风险</h3><p> （1）由一个因素产生的风险事件发生的可能性。<br> （2）可能的结果范围。<br> （3）预期发生的时间。<br> （4）一个风险因素所产生的风险事件的发生频率。</p>
<h3 id="2-可能潜在的项目风险"><a href="#2-可能潜在的项目风险" class="headerlink" title="2 可能潜在的项目风险"></a>2 可能潜在的项目风险</h3><h3 id="3-项目风险的征兆"><a href="#3-项目风险的征兆" class="headerlink" title="3 项目风险的征兆"></a>3 项目风险的征兆</h3><h3 id="4-对项目管理其他方面的要求"><a href="#4-对项目管理其他方面的要求" class="headerlink" title="4 对项目管理其他方面的要求"></a>4 对项目管理其他方面的要求</h3><p>（1）根据风险点列出风险识别表。<br>（2）根据风险事件对风险进行分类。<br>（3）根据风险将要发生的症状，描述风险触发点。<br>（4）根据风险识别阶段的结果，提出对各个相关阶段工作的改进要求。</p>
<h1 id="10-4-项目风险定性与定量分析"><a href="#10-4-项目风险定性与定量分析" class="headerlink" title="10.4 项目风险定性与定量分析"></a><span id="4">10.4 项目风险定性与定量分析</span></h1><h2 id="10-4-1-风险评估基础"><a href="#10-4-1-风险评估基础" class="headerlink" title="10.4.1 风险评估基础"></a>10.4.1 风险评估基础</h2><h3 id="1-项目风险可能性的度量"><a href="#1-项目风险可能性的度量" class="headerlink" title="1 项目风险可能性的度量"></a>1 项目风险可能性的度量</h3><p>低风险是指可以辨识并可以监控其对项目目标影响的风险。</p>
<p>中等风险是指可以被辨识的，对系统的技术性能、费用或进度将产生较大影响的风险。</p>
<p>高风险是指发生的可能性很高，其后果将对项目有极大影响的风险。</p>
<h3 id="2-项目风险后果的度量"><a href="#2-项目风险后果的度量" class="headerlink" title="2 项目风险后果的度量"></a>2 项目风险后果的度量</h3><table>
<thead>
<tr>
<th><strong>准</strong>  <strong>则</strong></th>
<th><strong>成</strong>  <strong>本</strong></th>
<th><strong>进  度 示 例</strong></th>
<th><strong>技  术 目 标</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>低</strong></td>
<td><strong>低于1%</strong></td>
<td><strong>比原计划落后1周</strong></td>
<td><strong>对性能稍有影响</strong></td>
</tr>
<tr>
<td><strong>中等</strong></td>
<td><strong>低于5%</strong></td>
<td><strong>比原计划落后2周</strong></td>
<td><strong>对性能有一定的影响</strong></td>
</tr>
<tr>
<td><strong>高</strong></td>
<td><strong>低于10%</strong></td>
<td><strong>比原计划落后1个月</strong></td>
<td><strong>对性能有严重影响</strong></td>
</tr>
<tr>
<td><strong>关键的</strong></td>
<td><strong>10%或更多</strong></td>
<td><strong>比原计划落后1个月以上</strong></td>
<td><strong>无法完成任务</strong></td>
</tr>
</tbody></table>
<h3 id="3-项目风险影响范围的度量"><a href="#3-项目风险影响范围的度量" class="headerlink" title="3 项目风险影响范围的度量"></a>3 项目风险影响范围的度量</h3><h3 id="4-项目风险发生时间的度量"><a href="#4-项目风险发生时间的度量" class="headerlink" title="4 项目风险发生时间的度量"></a>4 项目风险发生时间的度量</h3><h2 id="10-4-2-定性风险分析"><a href="#10-4-2-定性风险分析" class="headerlink" title="10.4.2 定性风险分析"></a>10.4.2 定性风险分析</h2><h3 id="1-IT项目风险分析的目的"><a href="#1-IT项目风险分析的目的" class="headerlink" title="1 IT项目风险分析的目的"></a>1 IT项目风险分析的目的</h3><p>（1）确认项目风险的来源。<br>（2）确认项目风险的性质。<br>（3）估计项目风险的影响程度。<br>（4）为项目风险的定量分析提供条件。</p>
<h3 id="2-定性风险分析的方法"><a href="#2-定性风险分析的方法" class="headerlink" title="2 定性风险分析的方法"></a>2 定性风险分析的方法</h3><p>（1）风险概率与影响评估<br>（2）概率和影响矩阵。<br>（3）十大风险事件项跟踪。<br>（4）风险数据质量分析。<br>（5）风险分类。<br>（6）风险紧迫性评估。</p>
<h3 id="3-定性更新风险登记册"><a href="#3-定性更新风险登记册" class="headerlink" title="3 定性更新风险登记册"></a>3 定性更新风险登记册</h3><p>（1）按照轻重缓急排序的项目风险清单。<br>（2）按照类别分类的风险。<br>（3）需要近期采取应对措施的风险清单。<br>（4）需要进一步分析和应对的风险清单。<br>（5）低优先级风险观察清单。<br>（6）风险趋势。</p>
<h2 id="10-4-4-定量风险分析"><a href="#10-4-4-定量风险分析" class="headerlink" title="10.4.4 定量风险分析"></a>10.4.4 定量风险分析</h2><h3 id="1-定量风险分析的目的"><a href="#1-定量风险分析的目的" class="headerlink" title="1 定量风险分析的目的"></a>1 定量风险分析的目的</h3><p>（1）对项目目标以及实现项目目标的概率进行评估并量化。<br>（2）通过量化各项风险对项目总体风险的影响，确定需要特别重视的风险。<br>（3）在考虑项目风险的情况下，确定可以实现的和实际的成本、进度和范围目标。<br>（4）在某些条件或结果不确定时，确定最佳的项目风险管理决策。</p>
<h3 id="2-定量风险分析方法"><a href="#2-定量风险分析方法" class="headerlink" title="2 定量风险分析方法"></a>2 定量风险分析方法</h3><p>（1）敏感性分析。<br>（2）概率分析。<br>（3）决策树分析。<br>（4）项目工作分解结构。<br>（5）常识、经验和判断。</p>
<h2 id="10-4-5-项目风险评估"><a href="#10-4-5-项目风险评估" class="headerlink" title="10.4.5 项目风险评估"></a>10.4.5 项目风险评估</h2><h3 id="1-风险分类"><a href="#1-风险分类" class="headerlink" title="1 风险分类"></a>1 风险分类</h3><h3 id="2-风险分析"><a href="#2-风险分析" class="headerlink" title="2 风险分析"></a>2 风险分析</h3><p>（1）项目风险原因的分析与确定。<br>（2）项目风险后果的分析与确定。<br>（3）项目风险发展时间进程的分析与确定。</p>
<h3 id="3-量化的风险序列表"><a href="#3-量化的风险序列表" class="headerlink" title="3 量化的风险序列表"></a>3 量化的风险序列表</h3><h1 id="10-5-项目风险应对规划"><a href="#10-5-项目风险应对规划" class="headerlink" title="10.5 项目风险应对规划"></a><span id="5">10.5 项目风险应对规划</span></h1><h2 id="10-5-1-项目风险应对原则"><a href="#10-5-1-项目风险应对原则" class="headerlink" title="10.5.1 项目风险应对原则"></a>10.5.1 项目风险应对原则</h2><p>（1）可行、适用、有效性原则。<br>（2）经济、合理、先进性原则。<br>（3）主动、及时、全过程原则。<br>（4）综合、系统、全方位原则。</p>
<h2 id="10-5-2-项目风险的应对措施"><a href="#10-5-2-项目风险的应对措施" class="headerlink" title="10.5.2 项目风险的应对措施"></a>10.5.2 项目风险的应对措施</h2><p>1 风险回避<br>2 风险遏制<br>3 风险转移<br>4 风险化解<br>5 风险容忍<br>6 风险分担<br>7 IT项目常用的风险应对策略</p>
<h2 id="10-5-3-项目风险应对措施的依据"><a href="#10-5-3-项目风险应对措施的依据" class="headerlink" title="10.5.3 项目风险应对措施的依据"></a>10.5.3 项目风险应对措施的依据</h2><p>（1）项目风险的特性。<br>（2）项目组织抗风险的能力。<br>（3）可供选择的风险应对措施。</p>
<h2 id="10-5-4-风险应对规划的结果"><a href="#10-5-4-风险应对规划的结果" class="headerlink" title="10.5.4 风险应对规划的结果"></a>10.5.4 风险应对规划的结果</h2><p>1 更新风险登记册<br>2 项目风险应急计划<br>3 风险储备</p>
<h1 id="10-6-项目风险监控"><a href="#10-6-项目风险监控" class="headerlink" title="10.6 项目风险监控"></a><span id="6">10.6 项目风险监控</span></h1><h2 id="10-6-1-项目风险监控概述"><a href="#10-6-1-项目风险监控概述" class="headerlink" title="10.6.1 项目风险监控概述"></a>10.6.1 项目风险监控概述</h2><h3 id="1-项目风险控制的内容"><a href="#1-项目风险控制的内容" class="headerlink" title="1 项目风险控制的内容"></a>1 项目风险控制的内容</h3><p>持续开展项目风险的识别与度量，监控项目潜在风险的发展，追踪项目风险发生的征兆，采取各种风险防范措施，应对和处理发生的风险事件，消除和缩小项目风险事件的后果，管理和使用项目不可预见费，实施项目风险管理计划等。</p>
<h3 id="2-项目风险控制的依据"><a href="#2-项目风险控制的依据" class="headerlink" title="2 项目风险控制的依据"></a>2 项目风险控制的依据</h3><ul>
<li>项目风险管理计划。</li>
<li>实际项目风险发展变化情况。</li>
<li>附加的风险识别和分析。</li>
<li>项目评审。</li>
</ul>
<h2 id="10-6-2-风险监控程序"><a href="#10-6-2-风险监控程序" class="headerlink" title="10.6.2 风险监控程序"></a>10.6.2 风险监控程序</h2><ol>
<li>建立项目风险事件控制体制</li>
<li>确定要控制的具体项目风险</li>
<li>确定项目风险的控制责任</li>
<li>确定项目风险控制的行动时间</li>
<li>制订具体项目风险的控制方案</li>
<li>实施具体项目风险控制方案</li>
<li>跟踪具体项目风险的控制结果</li>
<li>判断项目风险是否已经消除</li>
</ol>
<h2 id="10-6-3-风险监控的方法"><a href="#10-6-3-风险监控的方法" class="headerlink" title="10.6.3 风险监控的方法"></a>10.6.3 风险监控的方法</h2><h3 id="1-风险再评估"><a href="#1-风险再评估" class="headerlink" title="1 风险再评估"></a>1 风险再评估</h3><h3 id="2-风险审计"><a href="#2-风险审计" class="headerlink" title="2 风险审计"></a>2 风险审计</h3><h3 id="3-技术指标分析"><a href="#3-技术指标分析" class="headerlink" title="3 技术指标分析"></a>3 技术指标分析</h3><h3 id="4-储备金分析"><a href="#4-储备金分析" class="headerlink" title="4 储备金分析"></a>4 储备金分析</h3><h3 id="5-状态审查会"><a href="#5-状态审查会" class="headerlink" title="5 状态审查会"></a>5 状态审查会</h3><h3 id="6-风险预警系统"><a href="#6-风险预警系统" class="headerlink" title="6 风险预警系统"></a>6 风险预警系统</h3><h2 id="10-6-4-风险监控的成果"><a href="#10-6-4-风险监控的成果" class="headerlink" title="10.6.4 风险监控的成果"></a>10.6.4 风险监控的成果</h2><ol>
<li>更新的风险登记册</li>
<li>请求的变更</li>
<li>更新的组织过程资产与项目管理计划</li>
<li>修改风险应对计划</li>
</ol>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>软件项目管理（第七章：IT项目质量管理）</title>
    <url>/2020/05/13/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/05/13/软件项目管理（第七章：IT项目质量管理）/#1">7.1 项目质量管理概述</a></p>
<p><a href="/2020/05/13/软件项目管理（第七章：IT项目质量管理）/#2">7.2 IT项目质量计划</a></p>
<p><a href="/2020/05/13/软件项目管理（第七章：IT项目质量管理）/#3">7.3 IT项目质量保证</a></p>
<p><a href="/2020/05/13/软件项目管理（第七章：IT项目质量管理）/#4">7.4 IT项目质量控制</a></p>
</blockquote>
<h1 id="7-1-项目质量管理概述"><a href="#7-1-项目质量管理概述" class="headerlink" title="7.1 项目质量管理概述"></a>7.1 项目质量管理概述</h1><h2 id="7-1-1-项目质量-管理的盖帘"><a href="#7-1-1-项目质量-管理的盖帘" class="headerlink" title="7.1.1 项目质量 管理的盖帘"></a>7.1.1 项目质量 管理的盖帘</h2><h3 id="1-项目质量的概念"><a href="#1-项目质量的概念" class="headerlink" title="1 项目质量的概念"></a>1 项目质量的概念</h3><p>国际标准化组织在其《质量管理与质量保障术语》中对于质量的定义是：“质量是反映实体（产品、过程或活动等）满足明确和隐含的需要能力及特性的总和”。</p>
<p>所谓“实体”是指承载质量属性的具体事物，反映质量的实体，包括产品、过程（服务）和活动（工作）3种。<br>质量本身的含义是指“实体”能够满足用户需求的能力和特性的总和。<br>对于不同“实体”，质量的实质内容不同，即“实体”满足用户明确和隐含的需求在实质内容上也不同。</p>
<p>产品或服务的质量特性又可分为：内在的特性、外在的特性、经济方面的特性、商业方面的特性、环保方面的特性等多种特性。</p>
<a id="more"></a>

<p>这些不同质量特性的具体内涵如下：</p>
<ul>
<li>内在质量特性。</li>
<li>外在质量特性。</li>
<li>经济质量特性。</li>
<li>商业质量特性。</li>
<li>环保质量特性。</li>
</ul>
<h3 id="2-项目质量管理的概念"><a href="#2-项目质量管理的概念" class="headerlink" title="2 项目质量管理的概念"></a>2 项目质量管理的概念</h3><p>   项目质量管理和产品质量管理都认为下述理念是至关重要。<br>（1）使顾客满意是质量管理的目的。<br>（2）质量是干出来的不是检验出来的。<br>（3）质量管理的责任是全体员工的。    </p>
<h3 id="3-理解质量成本"><a href="#3-理解质量成本" class="headerlink" title="3 理解质量成本"></a>3 理解质量成本</h3><p>（1）预防成本。<br>（2）评估成本。<br>（3）内部故障成本。<br>（4）外部故障成本。<br>（5）测量和测试设备成本。</p>
<h2 id="7-1-2-质量管理的过程"><a href="#7-1-2-质量管理的过程" class="headerlink" title="7.1.2 质量管理的过程"></a>7.1.2 质量管理的过程</h2><h3 id="1-质量规划"><a href="#1-质量规划" class="headerlink" title="1 质量规划"></a>1 质量规划</h3><h3 id="2-质量保证"><a href="#2-质量保证" class="headerlink" title="2 质量保证"></a>2 质量保证</h3><h3 id="3-质量控制"><a href="#3-质量控制" class="headerlink" title="3 质量控制"></a>3 质量控制</h3><h2 id="7-1-3-软件质量"><a href="#7-1-3-软件质量" class="headerlink" title="7.1.3 软件质量"></a>7.1.3 软件质量</h2><h3 id="1-软件质量定义"><a href="#1-软件质量定义" class="headerlink" title="1 软件质量定义"></a>1 软件质量定义</h3><p>ANSI/IEEE Std 729—1983定义软件质量为：与软件产品满足规定的和隐含的需要的能力有关的特征或特性的组合。</p>
<p>评价软件质量应遵循的原则如下：</p>
<ul>
<li>应强调软件总体质量（低成本高质量），而不应片面强调软件正确性，忽略其可维护性与可靠性、可用性与效率等。</li>
<li>软件生产的整个周期的各个阶段都注意软件的质量，而不能只在软件最终产品验收时注意质量。</li>
<li>应制定软件质量标准，定量地评价软件质量，使软件产品评价走上评测结合，以测为主的科学轨道。</li>
</ul>
<h3 id="2-软件质量的要素"><a href="#2-软件质量的要素" class="headerlink" title="2 软件质量的要素"></a>2 软件质量的要素</h3><img src="/2020/05/13/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%EF%BC%89/1.png" class="">

<p>正确性：系统满足规格说明和用户的程度，即在预定环境下能正确地完成预期功能的程度；<br>健壮性：在硬件发生故障、输入的数据无效或操作错误等意外环境下，系统能够做出适当响应的程度；<br>效率：为了完成预定的功能，系统需要的计算资源的多少；<br>完整性：对未经授权的人使用软件或数据的企图，系统能够控制的程度；<br>可用性：系统在完成预定应该完成的功能时令人满意的概率；<br>风险性：按预定的成本和进度把系统开发出来，并且使用户感到满意；<br>可理解性：理解和使用该系统的容易程度；<br>可维修性：诊断和改正在运行现场发生的错误所需要的概率；<br>灵活性：修改或改正在运行的系统需要的工作量的多少；<br>可测试性：软件容易测试的程度；<br>可移植性：把程序从一种硬件配置和（或）软件环境转移到另一种配置和环境时，需要的工作量多少；<br>可重用性：在其他应用中该程序可以被再次使用的程度（或范围）；<br>可运行性：把该系统和另外一个系统结合起来的工作量的多少。</p>
<h3 id="3-不同角度对质量的认识"><a href="#3-不同角度对质量的认识" class="headerlink" title="3 不同角度对质量的认识"></a>3 不同角度对质量的认识</h3><ol>
<li>对用户重要的属性。<ul>
<li>有效性。</li>
<li>效率。</li>
<li>灵活性。</li>
<li>完整性（或安全性）。</li>
<li>互操作性。</li>
<li>可靠性。</li>
<li>健壮性。</li>
<li>可用性。</li>
</ul>
</li>
<li>对开发者重要的属性。<ul>
<li>可维护性。</li>
<li>可重用性。</li>
<li>可测试性。</li>
</ul>
</li>
<li>属性的取舍。</li>
</ol>
<h2 id="7-1-4-IT企业质量管理体系"><a href="#7-1-4-IT企业质量管理体系" class="headerlink" title="7.1.4 IT企业质量管理体系"></a>7.1.4 IT企业质量管理体系</h2><p>质量管理的概念体系：</p>
<img src="/2020/05/13/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%EF%BC%89/2.png" class="">

<p>（1）项目型软件企业。<br>（2）产品型软件企业。<br>（3）服务型软件企业。<br>（4）系统集成型IT企业。<br>（5）管理咨询型IT企业。</p>
<h1 id="7-2-IT项目质量计划"><a href="#7-2-IT项目质量计划" class="headerlink" title="7.2 IT项目质量计划"></a>7.2 IT项目质量计划</h1><h2 id="7-2-1-质量计划的依据"><a href="#7-2-1-质量计划的依据" class="headerlink" title="7.2.1 质量计划的依据"></a>7.2.1 质量计划的依据</h2><h3 id="1-质量方针"><a href="#1-质量方针" class="headerlink" title="1 质量方针"></a>1 质量方针</h3><h3 id="2-范围阐述"><a href="#2-范围阐述" class="headerlink" title="2 范围阐述"></a>2 范围阐述</h3><h3 id="3-IT项目质量标准"><a href="#3-IT项目质量标准" class="headerlink" title="3 IT项目质量标准"></a>3 IT项目质量标准</h3><h3 id="4-产品说明"><a href="#4-产品说明" class="headerlink" title="4 产品说明"></a>4 产品说明</h3><h2 id="7-2-2-编辑质量计划的方法"><a href="#7-2-2-编辑质量计划的方法" class="headerlink" title="7.2.2 编辑质量计划的方法"></a>7.2.2 编辑质量计划的方法</h2><ul>
<li>效益/成本分析法，也叫经济质量法。</li>
<li>基准法，也叫质量标杆法。</li>
<li>流程图法。</li>
<li>试验设计。</li>
<li>其他质量规划工具。头脑风暴、因果图、力场分析、名义组技术、模块图、优先排序矩阵等。</li>
</ul>
<h2 id="7-2-3-质量计划的输出"><a href="#7-2-3-质量计划的输出" class="headerlink" title="7.2.3 质量计划的输出"></a>7.2.3 质量计划的输出</h2><h3 id="1-质量计划的要求"><a href="#1-质量计划的要求" class="headerlink" title="1 质量计划的要求"></a>1 质量计划的要求</h3><p>确定应达到的质量目标和所有特性的要求。<br>确定质量活动和质量控制程序。<br>确定项目不同阶段中的职责、权限、交流方式以及资源分配。<br>确定采用控制的手段、合适的验证手段和方法。<br>确定和准备质量记录。</p>
<p>在质量计划中应明确项目要达到的质量目标如下：</p>
<ul>
<li>初期故障率。</li>
<li>偶然故障率。</li>
<li>平均失效间隔时间（MTBF） 。</li>
<li>缺陷密度（FD） 。</li>
</ul>
<h3 id="2-质量计划的编写"><a href="#2-质量计划的编写" class="headerlink" title="2 质量计划的编写"></a>2 质量计划的编写</h3><p>下面给出一个软件项目质量计划的参考模板：</p>
<blockquote>
<ol>
<li>导言</li>
<li>项目概述<ol>
<li>功能概述</li>
<li>项目生命周期模型</li>
<li>项目阶段划分及其准则</li>
</ol>
</li>
<li>实施策略<ol>
<li>项目特征</li>
<li>主要工作</li>
</ol>
</li>
<li>项目组织<ol>
<li>项目组织结构</li>
<li>SQA组的权利</li>
<li>SQA组织及职责</li>
</ol>
</li>
<li>质量对象分析及选择</li>
<li>质量任务<ol>
<li>基本任务</li>
<li>活动反馈方式</li>
<li>争议上报方式</li>
<li>测试计划</li>
<li>采购产品的验证和确认</li>
<li>客户提供产品的验证</li>
</ol>
</li>
<li>实施计划<ol>
<li>工作计划</li>
<li>高层管理定期评审安排</li>
<li>项目经理定期和基于事件的评审</li>
</ol>
</li>
<li>资源计划</li>
<li>记录的收集、维护与保存<ol>
<li>记录范围</li>
<li>记录的收集、维护和保存</li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="3-质量管理计划"><a href="#3-质量管理计划" class="headerlink" title="3 质量管理计划"></a>3 质量管理计划</h3><h3 id="4-质量核对表"><a href="#4-质量核对表" class="headerlink" title="4 质量核对表"></a>4 质量核对表</h3><h1 id="7-3-IT项目质量保证"><a href="#7-3-IT项目质量保证" class="headerlink" title="7.3 IT项目质量保证"></a>7.3 IT项目质量保证</h1><h2 id="7-3-1-IT项目质量保证的思想"><a href="#7-3-1-IT项目质量保证的思想" class="headerlink" title="7.3.1 IT项目质量保证的思想"></a>7.3.1 IT项目质量保证的思想</h2><ul>
<li>以检测为重点。</li>
<li>以过程管理为重点。</li>
<li>以产品开发为重点</li>
</ul>
<p>1．平行测试过程<br>2．性能的稳定和集成<br>3．自动化测试<br>4．确保项目成员和项目文化都重视质量</p>
<h2 id="7-3-2-质量保证体系"><a href="#7-3-2-质量保证体系" class="headerlink" title="7.3.2 质量保证体系"></a>7.3.2 质量保证体系</h2><h3 id="1-质量保证体系的总体要求"><a href="#1-质量保证体系的总体要求" class="headerlink" title="1 质量保证体系的总体要求"></a>1 质量保证体系的总体要求</h3><ul>
<li>识别质量保证体系所需的过程及其在组织中的应用。</li>
<li>确定这些过程的顺序和相互作用。</li>
<li>确定为确保这些过程的有效动作和控制所需要的准则和方法。</li>
<li>确保可以获得必要的资源和信息，以支持这些过程的运作。</li>
<li>监视、测量和分析这些过程。</li>
<li>实施必要的措施，以实现对这些过程所策划的结果和对这些过程的持续改进。</li>
</ul>
<p>对于软件项目来说，质量保证体系需要负责调整所有影响产品质量的因素，例如：</p>
<ul>
<li>使用的方法和工具；</li>
<li>在开发和维护过程中应用的标准；</li>
<li>对开发和维护过程所进行的组织管理；</li>
<li>软件生产环境；</li>
<li>软件开发中人员的组织和管理；</li>
<li>工作人员的熟练程度；</li>
<li>对工作人员的奖励和工作条件的改善情况；</li>
<li>对外部项目转包商交付的产品的质量控制。</li>
</ul>
<h3 id="2-项目质量保证过程"><a href="#2-项目质量保证过程" class="headerlink" title="2 项目质量保证过程"></a>2 项目质量保证过程</h3><p>质量保证采用的主要工具和技术还有质量审计、过程分析以及质量控制的技术和工具。</p>
<p>质量审计是对特定的质量管理活动的结构化审查，以便确定项目活动是否符合组织与项目政策、过程和程序。<br>根据过程改进计划，采用过程分析技术从组织和技术角度识别所需的改进，其中也包括对遇到的问题、约束条件和无价值活动进行检查。</p>
<h3 id="3-软件项目质量保证的内容"><a href="#3-软件项目质量保证的内容" class="headerlink" title="3 软件项目质量保证的内容"></a>3 软件项目质量保证的内容</h3><p>（1）与软件质量保证（Software Quality Assurance，SQA）计划直接相关的工作<br>（2）参与项目的阶段性评审和审计。<br>（3）对项目日常活动与规程的符合性进行检查。<br>（4）对配置管理工作的检查和审计。<br>（5）跟踪问题的解决情况。<br>（6）收集新方法，提供过程改进的依据。</p>
<h3 id="4-质量审计报告"><a href="#4-质量审计报告" class="headerlink" title="4 质量审计报告"></a>4 质量审计报告</h3><img src="/2020/05/13/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%EF%BC%89/3.png" class="">

<h1 id="7-4-IT项目质量控制"><a href="#7-4-IT项目质量控制" class="headerlink" title="7.4 IT项目质量控制"></a>7.4 IT项目质量控制</h1><h2 id="7-4-1-常见的IT项目质量问题"><a href="#7-4-1-常见的IT项目质量问题" class="headerlink" title="7.4.1 常见的IT项目质量问题"></a>7.4.1 常见的IT项目质量问题</h2><ul>
<li>违背IT项目规律。</li>
<li>技术方案本身的缺陷。</li>
<li>基本部件不合格。</li>
<li>实施中的管理问题。</li>
</ul>
<p>上述质量问题产生的原因可以归纳为如下几个方面：</p>
<ul>
<li>人的因素。</li>
<li>资源要素。</li>
<li>方法因素。</li>
</ul>
<h2 id="7-4-2-实施质量控制"><a href="#7-4-2-实施质量控制" class="headerlink" title="7.4.2 实施质量控制"></a>7.4.2 实施质量控制</h2><h3 id="1-质量控制内容"><a href="#1-质量控制内容" class="headerlink" title="1 质量控制内容"></a>1 质量控制内容</h3><p>（1）项目产品或服务的质量控制。<br>（2）项目管理过程的质量控制。</p>
<h3 id="2-质量控制分类"><a href="#2-质量控制分类" class="headerlink" title="2 质量控制分类"></a>2 质量控制分类</h3><ol>
<li>事前质量控制。<ul>
<li>审查开发组织的技术资源，选择合适的项目承包组织。</li>
<li>对所需资源质量进行检查与控制。没有经过适当测试的资源不得在项目中使用。</li>
<li>审查技术方案，保证项目质量具有可靠的技术措施。</li>
<li>协助开发组织完善质量保证体系和质量管理制度。</li>
</ul>
</li>
<li>事中质量控制。<ul>
<li>协助开发组织完善实施控制。</li>
<li>严格交接检查。</li>
<li>对完成的分项应按相应的质量评定标准和方法进行检查、验收，并按合同或需求规格说明书行使质量监督权。</li>
<li>组织定期或不定期的评审会议，及时分析、通报项目质量状况，并协调有关组织间的业务活动等。</li>
</ul>
</li>
<li>事后质量控制。<ul>
<li>按规定质量评价标准和办法，组织单元测试和功能测试，并进行检查验收。</li>
<li>组织系统测试和集成测试。</li>
<li>审核开发组织的质量检验报告及有关技术性文件。</li>
<li>整理有关的项目质量的技术文件，并编号、建档。</li>
</ul>
</li>
</ol>
<h2 id="7-4-3-IT项目质量控制工具与技术"><a href="#7-4-3-IT项目质量控制工具与技术" class="headerlink" title="7.4.3 IT项目质量控制工具与技术"></a>7.4.3 IT项目质量控制工具与技术</h2><h3 id="1-帕累托图"><a href="#1-帕累托图" class="headerlink" title="1 帕累托图"></a>1 帕累托图</h3><img src="/2020/05/13/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%EF%BC%89/4.png" class="">

<h3 id="2-因果图"><a href="#2-因果图" class="headerlink" title="2 因果图"></a>2 因果图</h3><img src="/2020/05/13/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%EF%BC%89/5.png" class="">

<h3 id="3-流程图"><a href="#3-流程图" class="headerlink" title="3 流程图"></a>3 流程图</h3><h3 id="4-统计抽样"><a href="#4-统计抽样" class="headerlink" title="4 统计抽样"></a>4 统计抽样</h3><h3 id="5-软件项目质量控制技术"><a href="#5-软件项目质量控制技术" class="headerlink" title="5 软件项目质量控制技术"></a>5 软件项目质量控制技术</h3><p>为了控制项目全过程中的质量，应该遵循以下一些基本原则：</p>
<ul>
<li>控制项目所有过程的质量。</li>
<li>过程控制的出发点是预防不合格。</li>
<li>质量管理的中心任务是建立并实施文档管理的质量体系。</li>
<li>持续的质量改进。</li>
<li>定期评价质量体系。</li>
</ul>
<p>软件项目质量控制采用的主要方法是技术评审、代码走查、代码会审、单元测试、集成测试、系统测试、验收测试、缺陷追踪等。</p>
<h2 id="7-4-4-质量控制成果"><a href="#7-4-4-质量控制成果" class="headerlink" title="7.4.4 质量控制成果"></a>7.4.4 质量控制成果</h2><p> （1）质量控制衡量值是质量控制活动的成果，需要反馈给质量保证部门，用于重新评价与分析执行的质量标准与过程。<br>（2）确认缺陷补救。<br>（3）更新的质量基准。<br>（4）推荐的纠正措施。<br>（5）推荐的预防措施。<br>（6）请求的变更。<br>（7）推荐的缺陷补救。<br>（8）更新组织过程资产。<br>（9）确认的可交付成果。<br>（10）更新项目管理计划。</p>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>UML（第七章：组件图、部署图）</title>
    <url>/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="2020/05/12/UML（第七章：组件图、部署图）/#1">7.1 组件图</a></p>
<p><a href="2020/05/12/UML（第七章：组件图、部署图）/#2">7.2 部署图</a></p>
<p><a href="2020/05/12/UML（第七章：组件图、部署图）/#3">7.3 组件图、部署图综合例子</a></p>
</blockquote>
<h1 id="7-1-组件图"><a href="#7-1-组件图" class="headerlink" title="7.1 组件图"></a><span id="1">7.1 组件图</span></h1><h2 id="7-1-1-概念"><a href="#7-1-1-概念" class="headerlink" title="7.1.1 概念"></a>7.1.1 概念</h2><p>分析与设计软件系统时，不仅要考虑系统的逻辑部分，也要考虑系统的物理部分。<br><strong>逻辑部分</strong>需要描述类、对象、接口、交互、活动、状态机等。<br><strong>物理部分</strong>需要定义组件和结点。<br>类、对象、接口组织在组件中，组件部署在结点上。</p>
<p>软件系统<strong>分析阶段的主要任务：</strong>是对系统的功能需求进行静态模型和动态模型的建模，并且通过迭代方式对静态模型和动态模型进行细化和补充。<br>软件系统<strong>设计阶段的主要任务：</strong>是确定系统的体系结构，确定哪些类需要放在一个组件中，考虑如何对系统的组件进行构造和组织，以及组件如何在结点上进行分布。</p>
<a id="more"></a>

<h2 id="7-1-2-组件"><a href="#7-1-2-组件" class="headerlink" title="7.1.2 组件"></a>7.1.2 组件</h2><p>组件图（构件图）是对面向对象系统的物理方面建模时使用的两种图之一（另一种图是部署图），用于描述软件组件以及组件之间的组织和依赖关系。<br>软件组件是软件系统的一个<strong>物理单元</strong>。作为一个或多个类的软件实现，组件驻留在计算机中。组件提供和其他组件之间的接口。</p>
<p>组件图有利于：<br>⑴帮助客户理解最终的系统结构。<br>⑵使开发工作有一个明确的目标。<br>⑶帮助开发组的其他人员理解系统。<br>⑷复用软件组件。</p>
<p>组件也称为构件，是系统中遵从一组接口且提供其实现的物理的、可部署的、可替换的部分。<br>软件系统的物理设计通常采用的基本单位不是类，而是组件。<br>组件封装了某些实现细节，展现了确定的接口。<br>组件是软件系统逻辑架构中定义的概念和功能在物理架构上的实现。<br>组件对应于组成软件系统的目标文件、可执行程序文件、动态链接库文件、数据库文件和HTML文件等开发环境中实现性文件。</p>
<p>组件可以认为是<strong>软插件</strong><br>组件作为一个<strong>整体</strong>被替换<br>组件内部可以包含很多<strong>类</strong><br>通常情况下，包含类定义的源代码文件就是一个组件</p>
<p>组件就是一个实现性文件，可以有以下几种类型：</p>
<ol>
<li><strong>部署组件</strong>。运行系统需要配置的组件，如Java虚拟机、XML文件、JAR文件、DLL文件、数据库表等。</li>
<li><strong>工作产品组件</strong>。可以用来产生部署组件，如源代码文件、数据文件等。</li>
<li><strong>执行组件</strong>。系统执行后得到的组件，如EJB、动态Web页、exe文件、COM+对象、CORBA对象等。</li>
</ol>
<p>用于表示运行时存在的实现物理单元和在实例节点中的定位。有两个特征：</p>
<ol>
<li><strong>代码特征</strong>。组件包含、封装和实现系统功能的类，其他元素的实现代码、某些构成系统状态的实例对象。</li>
<li><strong>身份特征</strong>。组件的身份和状态。</li>
</ol>
<p>组件实例只能表示在部署图上，不能表示在组件图上。</p>
<h2 id="7-1-3-组件的类型"><a href="#7-1-3-组件的类型" class="headerlink" title="7.1.3 组件的类型"></a>7.1.3 组件的类型</h2><p>组件类型：标准组件、数据库、虚包、主程序、子程序规范和子程序体、包规范和包体、任务规范和任务体。</p>
<ul>
<li><strong>数据库</strong>是存储数据的物理单元。</li>
<li><strong>虚包</strong>是一个提供公共视图的包。</li>
<li><strong>主程</strong>序是系统程序的根文件，用于指定系统的入口。</li>
<li><strong>子程序</strong>是一个单独处理的元素的包。</li>
<li><strong>子程序规范</strong>是源代码文件中的声明文件。</li>
<li><strong>子程序体</strong>是源代码文件中的实现文件。</li>
<li><strong>包规范</strong>是存放所有源代码文件中的声明文件的包。</li>
<li><strong>包体</strong>是存放所有源代码文件中的实现文件的包。</li>
<li><strong>任务规范</strong>是表示拥有独立控制线程的组件的规范。</li>
<li><strong>任务体</strong>是表示拥有独立控制线程的组件的实现体。</li>
</ul>
<p>标准组件是除了上述特殊组件之外的一切组件，通常也包括<strong>自定义构件型的组件</strong>。</p>
<img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/1.png" class="">

<h2 id="7-1-4-组件之间的关系"><a href="#7-1-4-组件之间的关系" class="headerlink" title="7.1.4 组件之间的关系"></a>7.1.4 组件之间的关系</h2><p>在组件图中，组件之间的关系主要是<strong>依赖关系</strong>，包括编译、链接或执行时组件之间的依赖关系。</p>
<p>此外，也可以是<strong>泛化、关联、聚合、实现</strong>等关系。这些关系的确定主要依赖于不同组件中包含的实现元素之间的关系。</p>
<h3 id="1-依赖关系"><a href="#1-依赖关系" class="headerlink" title="1 依赖关系"></a>1 依赖关系</h3><img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/2.png" class="">

<p>组件A中包含类CA，组件B中包含类CB。<br>在类图中，类CA依赖于类CB。<br>所以，在组件图中，组件A就依赖于组件B。<br>组件之间的<strong>其他关系</strong>，以此类推。</p>
<img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/3.png" class="">

<p><font color="red">设计时可以将类图中的类分配到需要创建的物理组件上去，以达到由逻辑设计向物理设计的过渡。</font></p>
<h3 id="2-组件特征"><a href="#2-组件特征" class="headerlink" title="2 组件特征"></a>2 组件特征</h3><p>1 拥有专门的用途，但并非对专门的应用程序，可重用于多种应用程序。<br>2 是类和接口的集合。<br>3 隐藏实现细节，能够即插即用。<br>4 可以用任何语言编写，只要该语言支持特定的组件标准接口约定。<br>5 通常经过严格测试。</p>
<h3 id="3-组件图中的组件和类图中的类的区别"><a href="#3-组件图中的组件和类图中的类的区别" class="headerlink" title="3 组件图中的组件和类图中的类的区别"></a>3 组件图中的组件和类图中的类的区别</h3><p>1 类是逻辑抽象，组件是物理抽象，即组件可以位于结点上。<br>2 组件是对其他逻辑元素，如类、协作的物理实现。<br>3 类可以有属性和操作，组件通常只有操作，而且这些操作只能通过组件的接口才能使用。</p>
<h3 id="4-组件必须为支持确定的接口而定义"><a href="#4-组件必须为支持确定的接口而定义" class="headerlink" title="4 组件必须为支持确定的接口而定义"></a>4 组件必须为支持确定的接口而定义</h3><p>接口是一个组件提供给其他组件的一组操作。在组件重用和组件替换上接口是一个很重要的概念。<br>在系统开发中构造通用的、可重用的组件时，如果能够清晰地定义、表达出接口的信息，那么组件的替换和重用就变得十分容易。<br>一个组件可以实现多个接口，也可以使用多个接口。<br>在UML规范中，可以为一个组件定义其他组件可见的接口，其图形符号是从代表组件的大矩形边框画出一条实线，连接到一个小空心圆，接口名写在空心圆附近。</p>
<h2 id="7-1-5-组件图的用途"><a href="#7-1-5-组件图的用途" class="headerlink" title="7.1.5 组件图的用途"></a>7.1.5 组件图的用途</h2><h3 id="1-对源代码文件之间的关系建模"><a href="#1-对源代码文件之间的关系建模" class="headerlink" title="1 对源代码文件之间的关系建模"></a>1 对源代码文件之间的关系建模</h3><img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/4.png" class="">

<h3 id="2-对可执行文件之间的关系建模"><a href="#2-对可执行文件之间的关系建模" class="headerlink" title="2 对可执行文件之间的关系建模"></a>2 对可执行文件之间的关系建模</h3><img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/5.png" class="">

<h3 id="3-对物理数据库中各个具体对象之间的关系建模"><a href="#3-对物理数据库中各个具体对象之间的关系建模" class="headerlink" title="3 对物理数据库中各个具体对象之间的关系建模"></a>3 对物理数据库中各个具体对象之间的关系建模</h3><img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/6.png" class="">

<h3 id="4-对自适应系统建模"><a href="#4-对自适应系统建模" class="headerlink" title="4 对自适应系统建模"></a>4 对自适应系统建模</h3><img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/10.png" class="">

<h2 id="7-1-6-组件图的工具支持"><a href="#7-1-6-组件图的工具支持" class="headerlink" title="7.1.6 组件图的工具支持"></a>7.1.6 组件图的工具支持</h2><p><font color="red">通过正向工程和逆向工程，组件与源程序代码可以互相转换</font></p>
<p>涉及以下操作：<br>1、建立类图模型。<br>2、建立组件图模型。<br>3、将类分配到组件中。<br>4、选择组件，生成源代码。</p>
<h2 id="7-1-7-组件图的例子"><a href="#7-1-7-组件图的例子" class="headerlink" title="7.1.7 组件图的例子"></a>7.1.7 组件图的例子</h2><h3 id="1-某超市购买商品系统的组件图"><a href="#1-某超市购买商品系统的组件图" class="headerlink" title="1 某超市购买商品系统的组件图"></a>1 某超市购买商品系统的组件图</h3><img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/7.png" class="">

<h3 id="2-简单JAVA数据库应用的组件图"><a href="#2-简单JAVA数据库应用的组件图" class="headerlink" title="2 简单JAVA数据库应用的组件图"></a>2 简单JAVA数据库应用的组件图</h3><img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/8.png" class="">

<h3 id="3-简单EJB访问数据库应用的组件图"><a href="#3-简单EJB访问数据库应用的组件图" class="headerlink" title="3 简单EJB访问数据库应用的组件图"></a>3 简单EJB访问数据库应用的组件图</h3><img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/9.png" class="">

<h1 id="7-2-部署图"><a href="#7-2-部署图" class="headerlink" title="7.2 部署图"></a><span id="2">7.2 部署图</span></h1><h2 id="7-2-1-部署图"><a href="#7-2-1-部署图" class="headerlink" title="7.2.1 部署图"></a>7.2.1 部署图</h2><p>部署图（deployment diagram）也称配置图、实施图。<br>它可以用来显示系统中计算结点的拓扑结构和通信路径与结点上运行的软组件等。<br>一个系统模型只有一个部署图，部署图常用于帮助理解分布式系统。<br>部署图由体系结构设计师、网络工程师、系统工程师等描述。<br>部署图中包括的建模元素有<strong>结点、连接</strong>。</p>
<p>面向对象系统的物理方面的建模是绘制组件图和部署图。<br>物理方面建模也就是系统的物理体系架构的设计，其目的是尽可能实现软件的逻辑体系架构。</p>
<p>部署图描述了软件系统是如何部署到硬件环境中的，显示了该系统不同的组件将在何处物理地运行，以及他们如何彼此通信。<br>部署图描述了处理机、设备和软件组件运行时的体系架构。</p>
<p>部署图涉及系统的硬件和软件，它显示了硬件的结构，包括不同的节点和这些节点之间如何连接，它还图示了软件模块的物理结构和依赖关系，并展示了对进程、程序、组件等软件在运行时的物理分配。</p>
<h2 id="7-2-2-结点"><a href="#7-2-2-结点" class="headerlink" title="7.2.2 结点"></a>7.2.2 结点</h2><p>结点也称为节点，是存在于运行时的代表计算资源的物理元素。<br>结点一般都具有一些内存，而且常常具有处理能力。<br>结点可以代表一个物理设备以及运行该设备上的软件系统。<br>结点之间的连线表示系统之间进行交互的通信路径，这个通信路径称为<strong>连接(connection)</strong><br>结点上安置（多个）组件。即，组件放在结点上运行。</p>
<p>部署图中的节点分为两种类型：处理机和设备。</p>
<ul>
<li><strong>处理机结点</strong>是可以执行程序的硬件设备。<br>例如，UNIX主机、PC机、打印机、传感器等。</li>
<li><strong>设备结点</strong>是无计算能力的硬件设备。<br>例如，调制解调器、终端等。</li>
</ul>
<img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/11.png" class="">

<h2 id="7-2-3-结点和组件的区别"><a href="#7-2-3-结点和组件的区别" class="headerlink" title="7.2.3 结点和组件的区别"></a>7.2.3 结点和组件的区别</h2><p>结点和组件的区别：</p>
<ol>
<li>组件是参与系统执行的事物，而结点是执行组件的事物。</li>
<li>组件代表逻辑元素的物理打包，而在结点上表示组件的物理部署情况。</li>
</ol>
<p>一个节点可以有一个或多个组件，一个组件也可以部署在一个或多个结点上。</p>
<h2 id="7-2-4-连接"><a href="#7-2-4-连接" class="headerlink" title="7.2.4 连接"></a>7.2.4 连接</h2><p>结点通过通信关联相互连接。</p>
<p><strong>连接</strong>表示两个硬件之间的<strong>关联关系</strong>，它指出结点之间只存在着某种通信路径，并指出通过哪条通信路径可使这些结点交换对象或发送消息。</p>
<p>由于连接关系是关联，所以可以像类图中那样，在关联上加角色、多重性、约束、版型等。</p>
<p>在连接上可附加诸如&lt;&lt;TCP/IP&gt;&gt;、&lt;&lt;DecNet&gt;&gt;等符号，以指明通信协议或所使用的网络。<br>一些常见的连接有以太网连接、串行口连接、共享总线等。</p>
<img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/12.png" class="">

<h2 id="7-2-5-部署图建模"><a href="#7-2-5-部署图建模" class="headerlink" title="7.2.5 部署图建模"></a>7.2.5 部署图建模</h2><p>在进行部署图建模时，应考虑以下问题：<br>（1）类和对象物理上位于哪个程序或进程。<br>（2）程序和进程在哪台计算机上执行。<br>（3）系统中有哪些计算机和其他硬件设备，他们如何相互连接。<br>（4）不同的代码文件之间有什么依赖关系。如果一个指定的文件被改变，那么哪些其他的文件需要重新编译。</p>
<h2 id="7-2-6-分布式系统的物理建模"><a href="#7-2-6-分布式系统的物理建模" class="headerlink" title="7.2.6 分布式系统的物理建模"></a>7.2.6 分布式系统的物理建模</h2><p>分布式系统指的是将不同地点、具有不同功能或拥有不同数据的多个节点用通信网络连接起来，在控制系统的统一管理下，协调完成信息处理任务。</p>
<p>分布式系统要求各节点之间用网络连接，系统中的软件组件要物理地分布在节点上。</p>
<p>例：超市购买商品系统的部署图</p>
<img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/13.png" class="">

<h2 id="7-2-7-部署图的用途例子"><a href="#7-2-7-部署图的用途例子" class="headerlink" title="7.2.7 部署图的用途例子"></a>7.2.7 部署图的用途例子</h2><h3 id="1-ATM自动取款机的分布式系统的部署图"><a href="#1-ATM自动取款机的分布式系统的部署图" class="headerlink" title="1 ATM自动取款机的分布式系统的部署图"></a>1 ATM自动取款机的分布式系统的部署图</h3><img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/14.png" class="">

<h3 id="2-对外设配置的物理建模"><a href="#2-对外设配置的物理建模" class="headerlink" title="2 对外设配置的物理建模"></a>2 对外设配置的物理建模</h3><img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/15.png" class="">

<h3 id="3-对互联网的物理建模"><a href="#3-对互联网的物理建模" class="headerlink" title="3 对互联网的物理建模"></a>3 对互联网的物理建模</h3><img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/16.png" class="">

<h3 id="4-详细说明结点上运行的组件"><a href="#4-详细说明结点上运行的组件" class="headerlink" title="4 详细说明结点上运行的组件"></a>4 详细说明结点上运行的组件</h3><img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/17.png" class="">

<h1 id="7-3-组件图、部署图综合例子"><a href="#7-3-组件图、部署图综合例子" class="headerlink" title="7.3 组件图、部署图综合例子"></a><span id="3">7.3 组件图、部署图综合例子</span></h1><p>基于Struts2的个人信息管理系统</p>
<p>【工程目录：】</p>
<img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/18.png" class="">

<p>【组件图：】</p>
<img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/19.png" class="">

<p>【部署图：】</p>
<img src="/2020/05/12/UML%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9B%BE%E3%80%81%E9%83%A8%E7%BD%B2%E5%9B%BE%EF%BC%89/20.png" class="">]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（函数）</title>
    <url>/2020/05/09/Python%EF%BC%88%E5%87%BD%E6%95%B0%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/05/09/Python（函数）/#1">1 函数</a></p>
<p><a href="/2020/05/09/Python（函数）/#2">2 定义函数</a></p>
<p><a href="/2020/05/09/Python（函数）/#3">3 函数调用</a></p>
<p><a href="/2020/05/09/Python（函数）/#4">4 函数的返回值</a></p>
<p><a href="/2020/05/09/Python（函数）/#5">5 函数的参数</a></p>
<p><a href="/2020/05/09/Python（函数）/#6">6 匿名函数</a></p>
<p><a href="/2020/05/09/Python（函数）/#7">7 局部变量和全局变</a></p>
<p><a href="/2020/05/09/Python（函数）/#8">8 内置函数</a></p>
</blockquote>
<h1 id="1-函数"><a href="#1-函数" class="headerlink" title="1 函数"></a><span id="1">1 函数</span></h1><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。</p>
<p>函数能提高应用的模块性，和代码的重复利用率。</p>
<p>你已经知道 Python 提供了许多内置函数，比如 print().range()函数等等。当然也可以自己创建实现某个预设功能的函数，这被叫做用户自定义函数。</p>
<ul>
<li>内置函数</li>
<li>自定义函数</li>
<li>标准库函数</li>
<li>第三方库函数</li>
</ul>
<a id="more"></a>

<h1 id="2-定义函数"><a href="#2-定义函数" class="headerlink" title="2 定义函数"></a><span id="2">2 定义函数</span></h1><h2 id="2-1-定义步骤"><a href="#2-1-定义步骤" class="headerlink" title="2.1 定义步骤"></a>2.1 定义步骤</h2><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p>
<ol>
<li>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()；</li>
<li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数；</li>
<li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明；</li>
<li>函数内容以冒号起始，并且缩进；</li>
<li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的 return 相当于返回 None。</li>
</ol>
<h2 id="2-2-一般格式"><a href="#2-2-一般格式" class="headerlink" title="2.2 一般格式"></a>2.2 一般格式</h2><p>Python 定义函数使用 def 关键字，一般格式如下：</p>
<pre><code class="python">def 函数名（参数列表）: 
    函数体    
    return语句</code></pre>
<p>默认情况下，参数值和参数名称是按函数声明中定义的顺序匹配起来的。</p>
<h1 id="3-函数的调用"><a href="#3-函数的调用" class="headerlink" title="3 函数的调用"></a><span id="3">3 函数的调用</span></h1><p>定义一个函数：给出函数名称，指定了函数里包含的参数，和代码块结构。这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从 Python 命令提示符执行。</p>
<p> 注意：</p>
<p>​    ——调用时要给出实际参数</p>
<p>​    ——实际参数替换定义中的参数</p>
<p>​    ——函数调用后得到返回值</p>
<p>例如：</p>
<pre><code class="python"># 定义函数
def printme( str ):  
    print (str)   # 打印任何传入的字符串  
    return
# 调用函数
printme(&quot;我要调用用户自定义函数!&quot;)
printme(&quot;再次调用同一函数&quot;)
#【结果：】我要调用用户自定义函数!再次调用同一函数</code></pre>
<p>又如：</p>
<pre><code class="python">def area(w,h):
    &quot;求矩形面积&quot;
    a=w*h
    print(&quot;矩形面积为：&quot;,a)
    return a
print(&#39;矩形面积位：&#39;,area(5,10)) #调用函数
#【结果：】矩形面积为： 50</code></pre>
<h1 id="4-函数的返回值"><a href="#4-函数的返回值" class="headerlink" title="4 函数的返回值"></a><span id="4">4 函数的返回值</span></h1><ul>
<li>函数可以return也可以没有</li>
<li>return保留字用来传递返回值，不带表达式的return或者没有return，相当于返回None</li>
<li>return可以选择性地返回一个值或多个值给调用方</li>
</ul>
<pre><code class="python">def add(x,y):
    s=x+y
    return s,x,y
add(3,4)    #调用函数
#【结果：】（7，3，4）</code></pre>
<h1 id="5-函数的参数"><a href="#5-函数的参数" class="headerlink" title="5 函数的参数"></a><span id="5">5 函数的参数</span></h1><h2 id="5-1-必选参数（位置参数、正常参数）"><a href="#5-1-必选参数（位置参数、正常参数）" class="headerlink" title="5.1 必选参数（位置参数、正常参数）"></a>5.1 必选参数（位置参数、正常参数）</h2><p>必备参数须以<font color="red">正确的顺序</font>传入函数，调用时的<font color="red">数量</font>必须和声明时的一样。</p>
<pre><code class="python">def plus(a,b):    
    c = a + b     # 计算a加b的值，并将结果赋给c   
    return c     # 返回结果值</code></pre>
<p>总结：一一对应，总数不少</p>
<h2 id="5-2-关键字参数"><a href="#5-2-关键字参数" class="headerlink" title="5.2 关键字参数"></a>5.2 关键字参数</h2><p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。</p>
<p>使用关键字参数<font color="red">允许函数调用时参数的顺序与声明时<strong>不一致</strong></font>，因为 Python 解释器能够用参数名匹配参数值。</p>
<pre><code class="python">def printinfo(name,age): 
    print (&quot;Name: &quot;, name)   
    print(&quot;Age: &quot;, age) 
    return
printinfo(age=28,name=&quot;小明&quot;) #调用函数
#【结果：】Name:小明 \n Age:  28</code></pre>
<p>关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错。</p>
<h2 id="5-3-默认参数"><a href="#5-3-默认参数" class="headerlink" title="5.3 默认参数"></a>5.3 默认参数</h2><p>对于必选参数，函数中定义了多少个参数，就必须传入多少个参数，否则会报错。</p>
<p>如果函数中有默认参数的话，对于默认参数，可以不用传参，也不会报错，参数会使用默认值。</p>
<pre><code class="python">def printinfo( name, age = 35 ): 
    print(&quot;Name: &quot;, name)  
    print( &quot;Age:&quot;, age)  
    return
#调用printinfo函数
printinfo(age=55, name=&quot;lily&quot; )
printinfo(name=&quot;lily&quot;)    #默认age=35
#【结果：】Name:lily \n  Age：50
#【结果：】Name:lily \n  Age：35</code></pre>
<p><font color="red">注意：必须保证带有默认值的缺省参数在<strong>参数列表末尾</strong></font></p>
<pre><code class="python">def printinfo( name,age=35,gender):                #错误 

def printinfo( name,age=35,gender=True ):        #正确</code></pre>
<h2 id="5-4-不定长参数"><a href="#5-4-不定长参数" class="headerlink" title="5.4 不定长参数"></a>5.4 不定长参数</h2><p>需要处理比定义函数声明时更多的参数时：</p>
<p>可将第二个<font color="red">形参 加*</font>，此时实参传递时将第二个及其后面的实参以<font color="red">元组</font>的形式传递给形参。</p>
<p>或者将第二个<font color="red">形参 加**</font>，此时实参传递时将第二个及其后面的实参以<font color="red">字典</font>的形式传递给形参。</p>
<p>加了星*的变量名会存放所有未命名的变量参数，并以元组形式输出。</p>
<p> 例1：*</p>
<pre><code class="python">def printinfo(arg1,*var):  
    print (&quot;输出: &quot;)  
    print(arg1)  
    print(var)
printinfo(1,2,3,4,5)    #调用函数
#【结果：】输出:1 \n (2, 3, 4, 5)</code></pre>
<p>例2：**</p>
<pre><code class="python">def fun(a, b, *args, **kwargs):
    print(a)
    print(b)
    print(args)
    print(kwargs)
fun(1, 2, 3, 4, name = &quot;hello&quot;, age = 20)
&#39;&#39;&#39;
结果：
2
(3, 4)
{&#39;name&#39;: &#39;hello&#39;, &#39;age&#39;: 20}
&#39;&#39;&#39;</code></pre>
<h1 id="6-匿名函数"><a href="#6-匿名函数" class="headerlink" title="6 匿名函数"></a><span id="6">6 匿名函数</span></h1><h2 id="6-1-lambda-表达式"><a href="#6-1-lambda-表达式" class="headerlink" title="6.1 lambda 表达式"></a>6.1 lambda 表达式</h2><p>Python 使用<font color="red"> lambda </font>来创建匿名函数。所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。PS：更小，更精炼，更灵活</p>
<ul>
<li>lambda 只是一个表达式，函数体比 def 简单很多；</li>
<li>lambda 的主体是一个表达式，而不是一段代码。仅仅能在 lambda 表达式中封装有限的逻辑进去；</li>
<li>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数</li>
</ul>
<pre><code class="python">lambda 参数列表:表达式
# 参数类型与def一样
lambda 空:表达式
lambda x,y:表达式
lambda x,y=1:表达式
lambda *var:表达式
lambda **var:表达式</code></pre>
<pre><code class="python"># 可写函数说明
sum = lambda x, y: x+y
# 调用sum函数
print (&quot;相加后的值为 : &quot;, sum( 10, 20 ))
print (&quot;相加后的值为 : &quot;, sum( 50, 20 ))
&#39;&#39;&#39;【结果：】
相加后的值为 :  30
相加后的值为 :  70
&#39;&#39;&#39;</code></pre>
<pre><code class="python">b=lambda x:x if x%2==0 else None
print(b(3))
print(b(8))
&#39;&#39;&#39;【结果：】
None
8
&#39;&#39;&#39;

map1=map(lambda x,y:max(x,y),[65,34,64,788,97],[32,87,97,37,100])
print(list(map1))
#【结果：】[65,87,97,788,100]</code></pre>
<h2 id="6-2-匿名函数的应用"><a href="#6-2-匿名函数的应用" class="headerlink" title="6.2 匿名函数的应用"></a>6.2 匿名函数的应用</h2><p>由于lambda语法是固定的，其本质上只有一种用法，即定义lambda函数。</p>
<p>在一般编程中，根据lambda函数应用场景的不同，可将lambda函数用法扩展为以下： </p>
<ul>
<li><p>——将lambda函数赋值给一个变量，</p>
<ul>
<li>如<strong>add=lambda x,y=x+y</strong>；</li>
</ul>
</li>
<li><p>——将lambda函数赋值给其他函数，从而将其他函数用该lambda函数替换，</p>
<ul>
<li>如为了把标准库time中的函数sleep的休眠功能屏蔽，调用<strong>time.sleep=lambda x:None</strong>。则执行time.sleep(3)时，程序不会休眠3s而是不执行任何操作；</li>
</ul>
</li>
<li><p>——将lambda函数作为其他函数的返回值，返回给调用者。</p>
<ul>
<li>如函数的返回值也可以是一个函数：<strong>return lambda a,b:a+b</strong>从而返回一个加法函数；</li>
</ul>
</li>
<li><p>——将lambda函数作为参数传递给其他函数，</p>
<ul>
<li>如<strong>filter(lambda x:x%3==0,[1,2,3])</strong>,实现功能：将列表[1,2,3]中能够被3整除的元素使用filter内置函数过滤出来   </li>
</ul>
</li>
</ul>
<h1 id="7-局部变量与全局变量"><a href="#7-局部变量与全局变量" class="headerlink" title="7 局部变量与全局变量"></a><span id="7">7 局部变量与全局变量</span></h1><h2 id="7-1-变量的作用域"><a href="#7-1-变量的作用域" class="headerlink" title="7.1 变量的作用域"></a>7.1 变量的作用域</h2><p>一个程序的所有的变量并不是在哪个位置都可以访问的。访问权限决定于这个变量是在哪里赋值的。变量的作用域决定了在哪一部分程序你可以访问哪个特定的变量名称。</p>
<p>两种基本的变量作用域如下：</p>
<ul>
<li>全局变量：在整个代码文件任意地方都可以使用的变量，作用域为全局范围。</li>
<li>局部变量：在某个函数中声明的，只能在该函数中调用它，如果试图在超出范围的地方调用，代码运行时可能会报错。</li>
</ul>
<pre><code class="python">var1 = 1     # 定义了一个全局变量
def func():
    var2 = 2     # 定义了一个局部变量
    print(var1)
    print(var2)
# 调用函数
func()
print(var1)
# print(var2)     # 当我们想打印var2时，代码会报错，提示var2未定义。
&#39;&#39;&#39;【结果：】
1
2
1
&#39;&#39;&#39;</code></pre>
<pre><code class="python">var1 = 1     # 定义了一个全局变量
def func():
    var1 = 2     # 定义了一个局部变量
    print(var1)
# 调用函数
func()
print(var1)
&#39;&#39;&#39;【结果：】
2
1
&#39;&#39;&#39;</code></pre>
<p>注意：</p>
<pre><code class="python">ls=[&#39;car&#39;,&#39;truck&#39;]
def func(a):
    ls.append(a)
    return
func(&#39;bus&#39;)
print(ls)
#【结果：】[&#39;car&#39;, &#39;truck&#39;, &#39;bus&#39;]</code></pre>
<h2 id="7-2-global和nonlocal关键字"><a href="#7-2-global和nonlocal关键字" class="headerlink" title="7.2 global和nonlocal关键字"></a>7.2 global和nonlocal关键字</h2><p>Python中有两个改变作用域的关键字：</p>
<ul>
<li>global：将局部变量声明为全局变量。</li>
</ul>
<pre><code class="python">var1 = 1     # 定义了一个全局变量
def func():
  global var1     # 将变量var1声明为全局变量
  var1 = 2
  print(var1)
# 调用函数
func()
print(var1)        
&#39;&#39;&#39;【结果：】
2
2
&#39;&#39;&#39;</code></pre>
<ul>
<li>nonlocal：该关键字能将局部变量的作用域增加一个级别，并不是声明为全局变量，且该关键字只能对局部变量使用。<font color="red">作用于<strong>嵌套函数内</strong>，且<strong>外层函数已经定义</strong>了相同的变量。</font></li>
</ul>
<pre><code class="python">var1 = 1     # 定义了一个全局变量var1
def func1():
  var2 = 1     # 定义了一个局部变量var2
  def func2():
      nonlocal var2     # 将var2声明为非全局变量
      var2 = 2     # 将局部变量var2的值改为2
  func2()     # 调用函数func2
  print(var2)
# 调用函数
func1()
print(var1)
# print(var2)     # 当我们想打印var2时，代码会报错，提示var2未定义。
&#39;&#39;&#39;【结果：】
2
1
&#39;&#39;&#39;</code></pre>
<h1 id="8-内置函数"><a href="#8-内置函数" class="headerlink" title="8 内置函数"></a><span id="8">8 内置函数</span></h1><blockquote>
<p>下表链接——菜鸟教程</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">内置函数</th>
<th align="left"></th>
<th align="left"></th>
<th align="left"></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/python/func-number-abs.html" target="_blank" rel="noopener">abs()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-divmod.html" target="_blank" rel="noopener">divmod()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-input.html" target="_blank" rel="noopener">input()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-open.html" target="_blank" rel="noopener">open()</a></td>
<td><a href="https://www.runoob.com/python/python-func-staticmethod.html" target="_blank" rel="noopener">staticmethod()</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/python/python-func-all.html" target="_blank" rel="noopener">all()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-enumerate.html" target="_blank" rel="noopener">enumerate()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-int.html" target="_blank" rel="noopener">int()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-ord.html" target="_blank" rel="noopener">ord()</a></td>
<td><a href="https://www.runoob.com/python/python-func-str.html" target="_blank" rel="noopener">str()</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/python/python-func-any.html" target="_blank" rel="noopener">any()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-eval.html" target="_blank" rel="noopener">eval()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-isinstance.html" target="_blank" rel="noopener">isinstance()</a></td>
<td align="left"><a href="https://www.runoob.com/python/func-number-pow.html" target="_blank" rel="noopener">pow()</a></td>
<td><a href="https://www.runoob.com/python/python-func-sum.html" target="_blank" rel="noopener">sum()</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/python/python-func-basestring.html" target="_blank" rel="noopener">basestring()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-execfile.html" target="_blank" rel="noopener">execfile()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-issubclass.html" target="_blank" rel="noopener">issubclass()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-print.html" target="_blank" rel="noopener">print()</a></td>
<td><a href="https://www.runoob.com/python/python-func-super.html" target="_blank" rel="noopener">super()</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/python/python-func-bin.html" target="_blank" rel="noopener">bin()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-file.html" target="_blank" rel="noopener">file()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-iter.html" target="_blank" rel="noopener">iter()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-property.html" target="_blank" rel="noopener">property()</a></td>
<td><a href="https://www.runoob.com/python/att-tuple-tuple.html" target="_blank" rel="noopener">tuple()</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/python/python-func-bool.html" target="_blank" rel="noopener">bool()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-filter.html" target="_blank" rel="noopener">filter()</a></td>
<td align="left"><a href="https://www.runoob.com/python/att-string-len.html" target="_blank" rel="noopener">len()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-range.html" target="_blank" rel="noopener">range()</a></td>
<td><a href="https://www.runoob.com/python/python-func-type.html" target="_blank" rel="noopener">type()</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/python/python-func-bytearray.html" target="_blank" rel="noopener">bytearray()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-float.html" target="_blank" rel="noopener">float()</a></td>
<td align="left"><a href="https://www.runoob.com/python/att-list-list.html" target="_blank" rel="noopener">list()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-raw_input.html" target="_blank" rel="noopener">raw_input()</a></td>
<td><a href="https://www.runoob.com/python/python-func-unichr.html" target="_blank" rel="noopener">unichr()</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/python/python-func-callable.html" target="_blank" rel="noopener">callable()</a></td>
<td align="left"><a href="https://www.runoob.com/python/att-string-format.html" target="_blank" rel="noopener">format()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-locals.html" target="_blank" rel="noopener">locals()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-reduce.html" target="_blank" rel="noopener">reduce()</a></td>
<td>unicode()</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/python/python-func-chr.html" target="_blank" rel="noopener">chr()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-frozenset.html" target="_blank" rel="noopener">frozenset()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-long.html" target="_blank" rel="noopener">long()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-reload.html" target="_blank" rel="noopener">reload()</a></td>
<td><a href="https://www.runoob.com/python/python-func-vars.html" target="_blank" rel="noopener">vars()</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/python/python-func-classmethod.html" target="_blank" rel="noopener">classmethod()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-getattr.html" target="_blank" rel="noopener">getattr()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-map.html" target="_blank" rel="noopener">map()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-repr.html" target="_blank" rel="noopener">repr()</a></td>
<td><a href="https://www.runoob.com/python/python-func-xrange.html" target="_blank" rel="noopener">xrange()</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/python/func-number-cmp.html" target="_blank" rel="noopener">cmp()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-globals.html" target="_blank" rel="noopener">globals()</a></td>
<td align="left"><a href="https://www.runoob.com/python/func-number-max.html" target="_blank" rel="noopener">max()</a></td>
<td align="left"><a href="https://www.runoob.com/python/att-list-reverse.html" target="_blank" rel="noopener">reverse()</a></td>
<td><a href="https://www.runoob.com/python/python-func-zip.html" target="_blank" rel="noopener">zip()</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/python/python-func-compile.html" target="_blank" rel="noopener">compile()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-hasattr.html" target="_blank" rel="noopener">hasattr()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-memoryview.html" target="_blank" rel="noopener">memoryview()</a></td>
<td align="left"><a href="https://www.runoob.com/python/func-number-round.html" target="_blank" rel="noopener">round()</a></td>
<td><a href="https://www.runoob.com/python/python-func-__import__.html" target="_blank" rel="noopener"><strong>import</strong>()</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/python/python-func-complex.html" target="_blank" rel="noopener">complex()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-hash.html" target="_blank" rel="noopener">hash()</a></td>
<td align="left"><a href="https://www.runoob.com/python/func-number-min.html" target="_blank" rel="noopener">min()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-set.html" target="_blank" rel="noopener">set()</a></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/python/python-func-delattr.html" target="_blank" rel="noopener">delattr()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-help.html" target="_blank" rel="noopener">help()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-next.html" target="_blank" rel="noopener">next()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-setattr.html" target="_blank" rel="noopener">setattr()</a></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/python/python-func-dict.html" target="_blank" rel="noopener">dict()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-hex.html" target="_blank" rel="noopener">hex()</a></td>
<td align="left">object()</td>
<td align="left"><a href="https://www.runoob.com/python/python-func-slice.html" target="_blank" rel="noopener">slice()</a></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/python/python-func-dir.html" target="_blank" rel="noopener">dir()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-id.html" target="_blank" rel="noopener">id()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-oct.html" target="_blank" rel="noopener">oct()</a></td>
<td align="left"><a href="https://www.runoob.com/python/python-func-sorted.html" target="_blank" rel="noopener">sorted()</a></td>
<td><a href="https://www.runoob.com/python/python-func-exec.html" target="_blank" rel="noopener">exec 内置表达式</a></td>
</tr>
</tbody></table>
<ul>
<li>数学运算函数</li>
<li>字符串运算函数</li>
<li>类型转换函数</li>
<li>序列操作函数<ul>
<li>map()</li>
<li>filter()</li>
<li>zip()</li>
</ul>
</li>
</ul>
<h2 id="8-1-map-function-iterable-…"><a href="#8-1-map-function-iterable-…" class="headerlink" title="8.1 map(function,iterable,…)"></a>8.1 map(function,iterable,…)</h2><p><strong>map()</strong> 会根据提供的函数对指定序列做映射。</p>
<pre><code class="python">&gt;&gt;&gt;def square(x) :            # 计算平方数
...     return x ** 2
... 
&gt;&gt;&gt; map(square, [1,2,3,4,5])   # 计算列表各个元素的平方
[1, 4, 9, 16, 25]
&gt;&gt;&gt; map(lambda x: x ** 2, [1, 2, 3, 4, 5])  # 使用 lambda 匿名函数
[1, 4, 9, 16, 25]

# 提供了两个列表，对相同位置的列表数据进行相加
&gt;&gt;&gt; map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])
[3, 7, 11, 15, 19]</code></pre>
<h2 id="8-2-filter-function-iterable"><a href="#8-2-filter-function-iterable" class="headerlink" title="8.2 filter(function, iterable)"></a>8.2 filter(function, iterable)</h2><p><strong>filter()</strong> 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。</p>
<pre><code class="python">def is_odd(n):
    return n % 2 == 1

newlist = filter(is_odd, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(newlist)
#【结果：】[1, 3, 5, 7, 9]</code></pre>
<h2 id="8-3-zip-iterable-…"><a href="#8-3-zip-iterable-…" class="headerlink" title="8.3 zip([iterable, …])"></a>8.3 zip([iterable, …])</h2><p><strong>zip()</strong> 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。</p>
<pre><code class="python">&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = [4,5,6]
&gt;&gt;&gt; c = [4,5,6,7,8]
&gt;&gt;&gt; zipped = zip(a,b)     # 打包为元组的列表
[(1, 4), (2, 5), (3, 6)]
&gt;&gt;&gt; zip(a,c)              # 元素个数与最短的列表一致
[(1, 4), (2, 5), (3, 6)]
&gt;&gt;&gt; zip(a,b,c)              # 打包为多个列表
[(1, 4, 4), (2, 5, 5), (3, 6, 6)
&gt;&gt;&gt; zip(*zipped)          # 与 zip 相反，*zipped 可理解为解压，返回二维矩阵式
[(1, 2, 3), (4, 5, 6)]</code></pre>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（字典、集合）</title>
    <url>/2020/05/08/Python%EF%BC%88%E5%AD%97%E5%85%B8%E3%80%81%E9%9B%86%E5%90%88%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/05/08/Python（字典、集合）/#1">1 字典</a></p>
<p><a href="/2020/05/08/Python（字典、集合）/#2">2 集合</a></p>
<p><a href="/2020/05/08/Python（字典、集合）/#3">3 组合数据类型总结</a></p>
</blockquote>
<h1 id="1-字典"><a href="#1-字典" class="headerlink" title="1 字典"></a><span id="1">1 字典</span></h1><h2 id="1-1-字典的定义"><a href="#1-1-字典的定义" class="headerlink" title="1.1 字典的定义"></a>1.1 字典的定义</h2><p><font color="red">字典：映射类型，dict  </font></p>
<p> 元素是键值对（key : value）</p>
<p> 多个元素放在{ }中，用逗号隔开。</p>
<p> {  key1：value1  , key2：value2 ,…… }</p>
<p>键（key）是唯一的，必须是不可变类型，比如整数、实数、字符串、元组等；</p>
<p>键值（value）是任意是，也可以是字典、列表、元祖等；</p>
<p>字典是<font color="red"><strong>无序</strong></font>的，只能通过‘键’访问元素</p>
<a id="more"></a>

<h2 id="1-2-创建字典"><a href="#1-2-创建字典" class="headerlink" title="1.2 创建字典"></a>1.2 创建字典</h2><h3 id="方法（1）用-创建："><a href="#方法（1）用-创建：" class="headerlink" title="方法（1）用{}创建："></a>方法（1）用{}创建：</h3><pre><code class="python">dict1={  }         #创建空字典     
dict2={‘aaa’ : 98,   ‘bbb’ : 88}    #创建字典，有2个元素</code></pre>
<h3 id="方法（2）用dict-函数创建："><a href="#方法（2）用dict-函数创建：" class="headerlink" title="方法（2）用dict()函数创建："></a>方法（2）用dict()函数创建：</h3><pre><code class="Python">#用赋值表达式确定’键值对’   
dict3=dict(ccc=98, ddd=88)     

#【结果：】dict3的值为 {&#39;ccc&#39;:98,&#39;ddd&#39;:88}</code></pre>
<pre><code class="Python">#用元组确定键值对，将列表转换为字典 
vegetables = [(&#39;白菜&#39;, 1.58) , (&#39;芹菜&#39;, 1.29), (&#39;辣椒&#39; , 2.19)]
dict4=dict(vegetables)
#dict4的值为 {&#39;白菜&#39;:1.58,&#39;芹菜&#39;:1.29,&#39;辣椒&#39;:2.19}

#用列表确定键值对，将列表 转换为字典
cars=[[&#39;BMW&#39;, 8.5] , [&#39;BENS&#39;, 8.3] , [&#39;AUDI&#39;, 7.9]]
dict5=dict(cars)
#dict5的值为 {&#39;BMW&#39;:8.5 , &#39;BENS&#39;:8.3 , &#39;AUDI&#39;:7.9}

#用’双值’字符串确定键值对，将列表转换为字典
dict6=dict([&#39;AB&#39;,&#39;DE&#39;])
#dict6的值为 {&#39;A&#39;:&#39;B&#39;,&#39;D&#39;:&#39;E&#39;}</code></pre>
<h2 id="1-3-字典元素的提取"><a href="#1-3-字典元素的提取" class="headerlink" title="1.3 字典元素的提取"></a>1.3 字典元素的提取</h2><h3 id="方法1：通过‘键’获取键值"><a href="#方法1：通过‘键’获取键值" class="headerlink" title="方法1：通过‘键’获取键值."></a>方法1：通过‘键’获取键值.</h3><p><font color="red">dict[ key]</font></p>
<p>比如：</p>
<pre><code class="Python">dict2={&#39;aaa&#39; : 98, &#39;bbb&#39; : 88}   
print(dict2[&#39;aaa&#39;])    #结果： 98    
print(dict2[&#39;ccc&#39;])  #通过‘键’获取键值，当键不存在时，报错。 结果：  KeyError: &#39;ccc&#39; 

# 说明：当 key 在字典中不存在时，会发生异常，一般在访问元素前先用in运算符判断一下是否存在。
&#39;ccc&#39; in dict2   # 判断 &#39;ccc&#39;是否在dict2中，  结果：False       </code></pre>
<h3 id="方法2：get-函数"><a href="#方法2：get-函数" class="headerlink" title="方法2：get()函数"></a>方法2：get()函数</h3><p><font color="red">dict.get(key, default =None) </font></p>
<p>获取键为key的键值，当不存在时，返回默认值  </p>
<pre><code class="python">dict2={&#39;aaa&#39; : 98, &#39;bbb&#39; : 88} 
print(dict2.get(&#39;bbb&#39;,100))  # 88 
print(dict2.get(&#39;ccc&#39;,100))  # 100 ,不存在返回默认值</code></pre>
<h2 id="1-4-字典元素的修改"><a href="#1-4-字典元素的修改" class="headerlink" title="1.4 字典元素的修改"></a>1.4 字典元素的修改</h2><p>通过’键’重新给’键值’赋值。</p>
<p><font color="red">dictname[key] = value </font>   </p>
<p>当键为Key的元素不存在时，则添加一个元素。</p>
<pre><code class="Python">dict2={&#39;aaa&#39;:98,&#39;bbb&#39;:88}
dict2[&#39;bbb&#39;]=90 #修改键&#39;bbb&#39;的键值为90</code></pre>
<h2 id="1-5-字典元素的添加"><a href="#1-5-字典元素的添加" class="headerlink" title="1.5 字典元素的添加"></a>1.5 字典元素的添加</h2><h3 id="（1）-用修改元素的方法，添加一个新元素-key-value"><a href="#（1）-用修改元素的方法，添加一个新元素-key-value" class="headerlink" title="（1） 用修改元素的方法，添加一个新元素 key:value"></a>（1） 用修改元素的方法，添加一个新元素 key:value</h3><p><font color="red">dictname[key] = value </font>   </p>
<p>当字典中已有键为key的元素时，用value<strong>修改</strong>该元素的键值；否则就<strong>添加一个新元素</strong>。 </p>
<pre><code class="python">dict2={&#39;aaa&#39;:98,&#39;bbb&#39;:88}
dict2[&#39;ccc&#39;]=100 #添加新元素：dict2={&#39;aaa&#39;:98,&#39;bbb&#39;:88,&#39;ccc&#39;:100}</code></pre>
<h3 id="（2）用update将一个字典添加到另一个字典末尾-批量修改"><a href="#（2）用update将一个字典添加到另一个字典末尾-批量修改" class="headerlink" title="（2）用update将一个字典添加到另一个字典末尾(批量修改)"></a>（2）用update将一个字典添加到另一个字典末尾(批量修改)</h3><pre><code class="python">dicta={&#39;China&#39;:&#39;Beijing&#39;,&#39;America&#39;:&#39;Washington&#39;} 
dictb={&#39;Britain&#39;:&#39;London&#39;,&#39;Japan&#39;:&#39;Tokyo&#39;}   
dicta.update(dictb) #合并：将dictb的元素添加到dicta末尾
print(dicta) 

#【结果：】dicta={&#39;America&#39;: &#39;Washington&#39;, &#39;Britain&#39;: &#39;London&#39;, &#39;China&#39;: &#39;Beijing&#39;, &#39;Japan&#39;: &#39;Tokyo&#39;}</code></pre>
<h2 id="1-6-字典元素的删除"><a href="#1-6-字典元素的删除" class="headerlink" title="1.6 字典元素的删除"></a>1.6 字典元素的删除</h2><h3 id="方法1：del命令"><a href="#方法1：del命令" class="headerlink" title="方法1：del命令"></a>方法1：del命令</h3><p>del 命令删除单个元素    </p>
<pre><code class="python">dicta={&#39;山东&#39;: &#39;济南&#39;, &#39;广东&#39;: &#39;广州&#39;, &#39;河南&#39;: &#39;郑州&#39;}   
del dicta[&#39;广东&#39;]            #删除指定键的元素   
print(dicta)    #{&#39;山东&#39;: &#39;济南&#39;, &#39;河南&#39;: &#39;郑州&#39;}</code></pre>
<h3 id="方法2：pop-函数"><a href="#方法2：pop-函数" class="headerlink" title="方法2：pop()函数"></a>方法2：pop()函数</h3><p>获取元素的键值并删除该元素。</p>
<pre><code class="python">dict_a={&#39;山东&#39;: &#39;济南&#39;, &#39;广东&#39;: &#39;广州&#39;, &#39;河南&#39;: &#39;郑州&#39;}    
city=dict_a.pop(&#39;广东&#39;)   
print(dict_a)    #{&#39;山东&#39;: &#39;济南&#39;, &#39;河南&#39;: &#39;郑州&#39;}   
print(city)      # &#39;广州&#39;、</code></pre>
<h3 id="方法3：clear-函数"><a href="#方法3：clear-函数" class="headerlink" title="方法3：clear()函数"></a>方法3：clear()函数</h3><p>clear()方法清除字典中所有的元素，字典没有删除，原字典变成一个空字典</p>
<h2 id="1-7-字典的常用操作方法"><a href="#1-7-字典的常用操作方法" class="headerlink" title="1.7 字典的常用操作方法"></a>1.7 字典的常用操作方法</h2><img src="/2020/05/08/Python%EF%BC%88%E5%AD%97%E5%85%B8%E3%80%81%E9%9B%86%E5%90%88%EF%BC%89/1.png" class="">

<pre><code class="python">cutyNo={&#39;3702&#39;:&#39;青岛&#39;,&#39;3701&#39;:&#39;济南&#39;,&#39;1301&#39;:&#39;石家庄&#39;}
#获取字典所有的‘键’
cityNo.keys()#dict_keuys([&#39;3702&#39;,&#39;3701&#39;,&#39;1301&#39;])
cityNoList=list(cityNo.keys())
#获取字典所有的‘键值’
cityNameList=list(cityNo.vALUES())
#获取字典所有的键值对
cityNoItems=list(cityNo.items())

#【结果：】
#cityNoList=[&#39;3702&#39;,&#39;3701&#39;,&#39;1301&#39;]
#cityNameList=[&#39;青岛&#39;,&#39;济南&#39;,&#39;石家庄&#39;]
#cityNoItems=[(&#39;3702&#39;,&#39;青岛&#39;),(&#39;3701&#39;,&#39;济南&#39;),(&#39;1301&#39;,&#39;石家庄&#39;)]</code></pre>
<h2 id="1-8-案例实现"><a href="#1-8-案例实现" class="headerlink" title="1.8 案例实现"></a>1.8 案例实现</h2><h3 id="1-8-1-用字典实现通讯录管理"><a href="#1-8-1-用字典实现通讯录管理" class="headerlink" title="1.8.1 用字典实现通讯录管理"></a>1.8.1 用字典实现通讯录管理</h3><p>（1）输入通讯录：创建一个空字典，输入多个朋友的姓名和电话，用添加字典元素的方法逐个添加到字典中；当输入姓名为空时结束输入；</p>
<pre><code class="python">telBook={}
while True:
    name=input(&#39;name(Enter for end):&#39;)
    if name==&#39;&#39;:
        break;
    tel=input(&#39;tel:&#39;)
    telBook[name]=tel
print(&#39;(1)&#39;,telBook)</code></pre>
<p> （2）输入新增的一个朋友的信息，直接添加到字典中；</p>
<pre><code class="python">print(&#39;新增一朋友的信息&#39;)
name=input(&#39;name:&#39;)
tel=input(&#39;tel:&#39;)
telBook[name]=tel
print(&#39;(2)&#39;:telBook)</code></pre>
<p>（3）查找某朋友的电话：输入姓名，用in语句查找该朋友是否存在，若存在：则以此为“键”读取该元素的键值（即电话）；若不存在：则给出提示信息；</p>
<pre><code class="python">print(&#39;输入姓名，查找电话&#39;)
name=input(&#39;input name：&#39;)
if name in telBook:    #先判断是否在字典中
    print(&#39;(3)&#39;,name,&#39;:&#39;,telBook[name])
else:
    print(&#39;(3)&#39;,name,&#39;:is non-existent&#39;)</code></pre>
<p>（4）修改电话：根据用户 输出的姓名，用in语句查找该朋友是否存在，若存在：则显示原来的电话，然后输入新的电话，修改该元素的键值；若不存在，则给出提示信息；</p>
<pre><code class="python">name=input(&#39;input name for modify:&#39;)
if name in telBook:
    print(name,&#39;:&#39;,telBook[name])    #输出原电话号
    tel=input(&#39;input new tel:&#39;)        #输出新电话号
    telBook[name]=tel                #修改
    print(&#39;(4)modifided successfully&#39;)
else:
    print(&#39;(4)&#39;,name,&#39;:is non-existent&#39;)#不存在</code></pre>
<p>（5）删除不再需要的朋友：用del命令</p>
<pre><code class="python">print(&#39;输入姓名，删除朋友信息&#39;)
name=input(&#39;name&#39;)
if name in telBook:
    del telBook[name]
    print(&#39;(5)del successfully&#39;)
else:
    print(&#39;(5)&#39;,name,&#39;is non-existent&#39;)</code></pre>
<h3 id="1-8-2-统计字符出现的次数"><a href="#1-8-2-统计字符出现的次数" class="headerlink" title="1.8.2 统计字符出现的次数"></a>1.8.2 统计字符出现的次数</h3><pre><code class="python">dict.setdefault(key, default=None)
#key -- 查找的键值。
#default -- 键不存在时，设置的默认键值。</code></pre>
<pre><code class="python">##### 统计一行字符中每个字符出现的次数。请在下面标注序号的下面填写程序#####
#（1）输入一行字符
message=input()
#（2）创建空字典，用于表示统计结果
count={} 
#（3）统计每个字符出现的次数，用字典表示（字符：次数）
for character in message:
    count.setdefault(character,0)
    count[character]=count[character]+1
#输出统计结果,即字典的内容
print(count)</code></pre>
<h1 id="2-集合"><a href="#2-集合" class="headerlink" title="2 集合"></a><span id="2">2 集合</span></h1><h2 id="2-1-集合的定义"><a href="#2-1-集合的定义" class="headerlink" title="2.1 集合的定义"></a>2.1 集合的定义</h2><p>集合： {元素1，元素2，元素3，……}；用{}包括，元素之间用逗号分隔。</p>
<p> 特点：元素是<font color="red"><strong>无序的</strong></font>，不能通过索引号访问； 元素是<font color="red"><strong>不可重复的</strong></font>。</p>
<p> 比如：    { 2 , 4 , 6 , 8 }    </p>
<h2 id="2-2-集合的创建"><a href="#2-2-集合的创建" class="headerlink" title="2.2 集合的创建"></a>2.2 集合的创建</h2><h3 id="方法1：用"><a href="#方法1：用" class="headerlink" title="方法1：用{}"></a>方法1：用{}</h3><pre><code class="Python">set1= {1,2,3} 
print(set1)            #{1,2,3}
print(type(set1))     #set
set2={&#39;peach&#39;,&#39;grape&#39;,&#39;pear&#39;,&#39;apple&#39;}
stt3={}                #不是空集合，是空字典
print(type(stt3))    #&lt;class&#39;dict&#39;&gt;</code></pre>
<h3 id="方法2：用set-函数"><a href="#方法2：用set-函数" class="headerlink" title="方法2：用set()函数"></a>方法2：用set()函数</h3><p>参数可以是字符串、列表、元组等，转换时，<font color="red">自动把重复的元素去掉</font>。 </p>
<pre><code class="Python">set4=set([10,20,30,40,20])   
print(set4)         # 结果：{ 10, 20, 30 , 40}去掉了一个重复的元素20 
set5 = set(&#39;good&#39;)     
print(set5)      #结果：{&#39;g&#39;, &#39;o&#39;, &#39;d&#39;}   
set6 = set((7,8,9))  
print(set6)     #结果： {7,8,9}</code></pre>
<p><strong>注意：</strong></p>
<pre><code class="python">set7=set()     #空集合
set3={}        #空字典</code></pre>
<h2 id="2-3-集合元素的添加"><a href="#2-3-集合元素的添加" class="headerlink" title="2.3 集合元素的添加"></a>2.3 集合元素的添加</h2><p>（1）add()函数 </p>
<p><font color="red">格式： set1.add(var) </font></p>
<p>功能：将一个元素var添加到集合set1中，如果集合中已经存在该元素，则忽略添加操作；</p>
<pre><code class="python">set1={10,20,30,40}   
set1.add(35)      #添加一个元素35   
print(set1)        #结果：{10, 20, 30, 35, 40} </code></pre>
<p>（2）update()函数 </p>
<p><font color="red">格式：set1.update(set2) </font></p>
<p>功能： 将集合set2中的元素合添加到集合set1中，自动去重 </p>
<pre><code class="python">set2 = {10, 20, 30, 35, 40}   
set2.update({60,40})    #将集合{60,40}合并到set2中,忽略重复的元素  
print(set2)                #结果：{10, 20, 30, 35, 40, 60}</code></pre>
<h2 id="2-3-集合元素的删除"><a href="#2-3-集合元素的删除" class="headerlink" title="2.3 集合元素的删除"></a>2.3 集合元素的删除</h2><p>set.remove(var) 函数   </p>
<p>功能：删除集合中指定的元素，   若该元素不存在则会抛出异常。     </p>
<pre><code class="python">set3=set([10,20,30,40,50]) 
set3.remove(40)        #删除一个元素：40  
print(set3)            #结果：{10, 20, 30, 50}   
set3.remove(25)        #KeyError: 25</code></pre>
<p><strong>其他方法：discard(var)不存在不报错、pop()、clear()</strong></p>
<h2 id="2-4-案例实现"><a href="#2-4-案例实现" class="headerlink" title="2.4 案例实现"></a>2.4 案例实现</h2><h3 id="2-4-1-随机抽取10人，形成调查问卷名单，-然后替换一人。"><a href="#2-4-1-随机抽取10人，形成调查问卷名单，-然后替换一人。" class="headerlink" title="2.4.1 随机抽取10人，形成调查问卷名单， 然后替换一人。"></a>2.4.1 随机抽取10人，形成调查问卷名单， 然后替换一人。</h3><p>（1）随机抽取10人。</p>
<pre><code class="python">import random
numSet=set()    #创建空集合
while True:        #循环抽取一个号
    n=random.randint(1,30)
    numSet.add(n)
    if len(numSet)==10:    #当前集合长度为10结束
        break
print(&#39;抽取的10人名单：&#39;,numSet)</code></pre>
<p>（2）替换一人。</p>
<pre><code class="python">num=int(input(&#39;输入不能参加的员工编号：&#39;))
numSet.remove(num)        #删除不能参加的编号
while True:            #循环抽取编号
    n=random.randint(1,30)
    numSet.add(n)
    if len(numSet)==10:        #h当前集合长度为10结束
        break
print(&#39;新的10人名单：&#39;,numSet)
print(&#39;新增的工号：&#39;,n)</code></pre>
<h2 id="2-5-集合的常用情景"><a href="#2-5-集合的常用情景" class="headerlink" title="2.5 集合的常用情景"></a>2.5 集合的常用情景</h2><h3 id="1——列表元素去重"><a href="#1——列表元素去重" class="headerlink" title="1——列表元素去重"></a>1——列表元素去重</h3><pre><code class="python">basket=[&#39;apple&#39;,&#39;orange&#39;,&#39;apple&#39;,&#39;pear&#39;,&#39;orange&#39;]
s1=set(basket)
basket=list(s1)
print(basket)    #【结果：】[&#39;apple&#39;,&#39;pear&#39;,&#39;orange&#39;]</code></pre>
<h3 id="2——集合运算"><a href="#2——集合运算" class="headerlink" title="2——集合运算"></a>2——集合运算</h3><p>集合运算：快速获取两个集合中“符合条件”的元素</p>
<img src="/2020/05/08/Python%EF%BC%88%E5%AD%97%E5%85%B8%E3%80%81%E9%9B%86%E5%90%88%EF%BC%89/2.png" class="">

<hr>
<h4 id="例子：关于水果喜好的统计。"><a href="#例子：关于水果喜好的统计。" class="headerlink" title="例子：关于水果喜好的统计。"></a>例子：关于水果喜好的统计。</h4><p>有两个班（A班和B班）要联合举行座谈会，需要统计每个班的学生喜欢的水果，以便更准确地购买水果。已知A、B两个班的水果喜好情况分别为</p>
<p>A={‘peach’,’grape’,’pear’,’apple’}</p>
<p>B={‘watermelon’,’banana’,’peach’,’orange’,’apple’}</p>
<p>请用集合运算实现以下任务：</p>
<p>（1）求两个班学生喜欢的所有水果，列出购买水果名单</p>
<p><strong>setA|setB</strong></p>
<p>（2）求两个班学生都喜欢的水果，这类水果购买时数量要多一些</p>
<p><strong>setA&amp;setB</strong></p>
<p>（3）求B班学生喜欢但A班学生不喜欢的水果，以便把该类水果放在靠近B班的位置</p>
<p><strong>setB-setA</strong></p>
<p>（4）求A、B两个班学生喜欢的不相同的水果</p>
<p><strong>setA^setB</strong></p>
<h1 id="3-组合数据类型总结"><a href="#3-组合数据类型总结" class="headerlink" title="3 组合数据类型总结"></a><span id="3">3 组合数据类型总结</span></h1><img src="/2020/05/08/Python%EF%BC%88%E5%AD%97%E5%85%B8%E3%80%81%E9%9B%86%E5%90%88%EF%BC%89/3.png" class="">]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP（第八章：Struts2）</title>
    <url>/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9AStruts2%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/04/29/JSP（第八章：Struts2）/#1">1 第一个Struts2页面</a></p>
<p><a href="/2020/04/29/JSP（第八章：Struts2）/#2">2 配置文件</a></p>
<p><a href="/2020/04/29/JSP（第八章：Struts2）/#3">3 Action</a></p>
<p><a href="/2020/04/29/JSP（第八章：Struts2）/#4">4 校验机制</a></p>
</blockquote>
<p>Struts官方网站：<a href="https://struts.apache.org/" target="_blank" rel="noopener">https://struts.apache.org/</a></p>
<p>入门资源：<a href="https://www.w3cschool.cn/struts_2/" target="_blank" rel="noopener">W3Cschool Strtus2</a></p>
<h1 id="1-第一个Struts2页面"><a href="#1-第一个Struts2页面" class="headerlink" title="1 第一个Struts2页面"></a><span id="1">1 第一个Struts2页面</span></h1><h2 id="1-1-简单例子1"><a href="#1-1-简单例子1" class="headerlink" title="1.1 简单例子1"></a>1.1 简单例子1</h2><p>【导入jar包】:</p>
<img src="/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9AStruts2%EF%BC%89/1.png" class="">

<p>【WebContent/WEB-INF/web.xml】：<strong>struts2实质就是过滤器实现</strong></p>
<pre><code class="jsp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;4.0&quot;&gt;
  &lt;display-name&gt;JSPStruts2&lt;/display-name&gt;
  &lt;filter&gt;
    &lt;filter-name&gt;struts2&lt;/filter-name&gt;
       &lt;filter-class&gt;
            org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter
      &lt;/filter-class&gt;
  &lt;/filter&gt;
  &lt;filter-mapping&gt;
      &lt;filter-name&gt;struts2&lt;/filter-name&gt;
      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
  &lt;/filter-mapping&gt;

  &lt;welcome-file-list&gt;
    &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;
    &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;
    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;
    &lt;welcome-file&gt;default.html&lt;/welcome-file&gt;
    &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt;
    &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt;
  &lt;/welcome-file-list&gt;
&lt;/web-app&gt;</code></pre>
<a id="more"></a>

<p>【src/struts.xml】：</p>
<pre><code class="jsp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE struts PUBLIC
    &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot;
    &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt;
&lt;struts&gt;
&lt;package name=&quot;mypack&quot; namespace=&quot;/test&quot; extends=&quot;struts-default&quot;&gt;
&lt;action name=&quot;helloworld&quot; class=&quot;my.example.HelloWorldAction&quot; method=&quot;execute&quot;&gt;
&lt;result name=&quot;success&quot;&gt;/WEB-INF/page/hello.jsp&lt;/result&gt;
&lt;/action&gt;
&lt;/package&gt;
&lt;/struts&gt;</code></pre>
<p>【src/my.example/HelloWorldAction.java】：</p>
<pre><code class="java">package my.example;

public class HelloWorldAction {

    private String message;
       public String getMessage() {
        return message;
    }

    public String execute(){
           message=&quot;my first page&quot;;
           return &quot;success&quot;;
       }
}</code></pre>
<p>【运行结果】：启动服务器，访问地址：<a href="http://localhost:8080/JSPStruts2/test/helloworld" target="_blank" rel="noopener">http://localhost:8080/JSPStruts2/test/helloworld</a></p>
<p>显示：  my first page </p>
<p><font color="red">这里 <strong>JSPStruts2 **是项目名，</strong>test**是struts.xml配置中package中的namespace。</font></p>
<h2 id="1-2-简单例子2"><a href="#1-2-简单例子2" class="headerlink" title="1.2 简单例子2"></a>1.2 简单例子2</h2><p>【src/my.example/UserAction.java】：</p>
<pre><code class="java">package my.example;

public class UserAction { 

    private String username; 
    private String password; 

    public String getUsername() { 
        return username; 
    } 

    public void setUsername(String username) { 
        this.username = username; 
    } 

    public String getPassword() { 
        return password; 
    } 

    public void setPassword(String password) { 
        this.password = password; 
    } 

    public String execute() throws Exception { 
    // 只有用户名为root，密码为root方可成功登陆 
        if (username.equals(&quot;root&quot;) &amp;&amp; password.equals(&quot;root&quot;)) { 
            return &quot;success&quot;; }
        else { 
            return &quot;error&quot;; 
        } 
    } 
}</code></pre>
<p>【src/struts.xml】：</p>
<pre><code class="xml">&lt;struts&gt;
&lt;package name=&quot;mylogin&quot; extends=&quot;struts-default&quot;&gt; 
    &lt;action name=&quot;loginUser&quot; class=&quot;my.example.UserAction&quot;&gt;
    &lt;result name=&quot;success&quot;&gt;/success.jsp&lt;/result&gt;
    &lt;result name=&quot;error&quot;&gt;/error.jsp&lt;/result&gt;
&lt;/action&gt;
&lt;/package&gt;
&lt;/struts&gt;</code></pre>
<p>【WebContent/login.jsp】</p>
<pre><code class="jsp">&lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt; 
&lt;!-- s：stuts标签 --&gt;
&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;s:form action=&quot;loginUser&quot;&gt; 
    &lt;s:textfield name=&quot;username&quot; label=&quot;用户名&quot;&gt;&lt;/s:textfield&gt; 
    &lt;s:password name=&quot;password&quot; label=&quot;密码&quot;&gt;&lt;/s:password&gt; 
    &lt;s:submit value=&quot;确定&quot;/&gt;&lt;s:reset value=&quot;重置&quot;/&gt; 
&lt;/s:form&gt; 
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>【WebContent/success.jsp】</p>
<pre><code class="jsp">&lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt; 
&lt;body&gt;
登陆成功！！！您的用户名是&lt;s:property value=&quot;username&quot;&gt;&lt;/s:property&gt;
&lt;/body&gt;</code></pre>
<p>【WebContent/error.jsp】</p>
<pre><code class="jsp"> error!!!&lt;br&gt;</code></pre>
<hr>
<p>浏览器运行 <a href="http://localhost:8080/JSPStruts2/login.jsp" target="_blank" rel="noopener">http://localhost:8080/JSPStruts2/login.jsp</a></p>
<img src="/2020/04/29/JSP（第八章：Struts2）/2.png">

<img src="/2020/04/29/JSP（第八章：Struts2）/3.png">

<img src="/2020/04/29/JSP（第八章：Struts2）/4.png">

<h1 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2 配置文件"></a><span id="2">2 配置文件</span></h1><h2 id="2-1-web-xml文件"><a href="#2-1-web-xml文件" class="headerlink" title="2.1 web.xml文件"></a>2.1 web.xml文件</h2><p><strong>struts2实质就是过滤器实现</strong>，按例子中再web.xml添加struts2的过滤器</p>
<h2 id="2-2-struts-xml文件"><a href="#2-2-struts-xml文件" class="headerlink" title="2.2 struts.xml文件"></a>2.2 struts.xml文件</h2><p>在struts2框架中使用包来管理Action，包的作用和java中的类包是非常类似的，它主要用于管理一组业务功能相关的action.在实际应用中，我们应该把一组业务功能相关的Action放在同一个包下。<br>配置包时必须指定name属性，该name属性值可以任意取名，但必须唯一，如果其他包要继承该包，必须通过该属性进行引用。包的namespace属性用于定义该包的命名空间，命名空间作为访问该包下Action路径的一部分。Namespace属性可以不配置，如果不指定该属性，默认的命名空间为“”<br>通常每个包都应该继承struts-default包，因为struts2很多核心的功能都是拦截器来实现。当包继承了struts-default才能使用struts2提供的核心功能。Struts-default包是在struts2-core-2.x.x.jar文件中的struts-default.xml中定义。</p>
<p><strong>一个package中可以有多个action</strong></p>
<h1 id="3-Action"><a href="#3-Action" class="headerlink" title="3 Action"></a><span id="3">3 Action</span></h1><h2 id="3-1-基本概念"><a href="#3-1-基本概念" class="headerlink" title="3.1 基本概念"></a>3.1 基本概念</h2><p>Action有一下特点：Struts2框架中Action是一个POJO，没有被代码污染。 </p>
<p>POJO（Plain Old Java Objects）简单的Java对象，实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称。是它通指没有使用Entity Beans的普通java对象，可以把POJO作为支持业务逻辑的协助类。</p>
<p><strong>Struts2中actions的唯一要求是必须有一个无参数方法返回String或Result对象，并且必须是POJO。如果没有指定no-argument方法，则<font color="red">默认是使用execute()方法</font>。</strong></p>
<h2 id="3-2-基类ActionSupport"><a href="#3-2-基类ActionSupport" class="headerlink" title="3.2 基类ActionSupport"></a>3.2 基类ActionSupport</h2><p>框架还提供了一个Action组件的基类ActionSupport，它在实现了Action接口的同时实现了execute()方法。</p>
<img src="/2020/04/29/JSP（第八章：Struts2）/5.png">

<h2 id="3-3-让Action处理多个请求——通配符"><a href="#3-3-让Action处理多个请求——通配符" class="headerlink" title="3.3 让Action处理多个请求——通配符"></a>3.3 让Action处理多个请求——通配符</h2><p>【src/struts.xml】：<font color="red">_* 代表方法名，action 添加 {1} 表示第一个 * 的内容</font></p>
<pre><code class="xml">&lt;struts&gt;
&lt;package name=&quot;mylogin&quot; extends=&quot;struts-default&quot;&gt; 
    &lt;action name=&quot;loginUser_*&quot; class=&quot;my.example.UserAction&quot; method=&quot;{1} &quot;&gt;
    &lt;result name=&quot;success&quot;&gt;/success.jsp&lt;/result&gt;
    &lt;result name=&quot;error&quot;&gt;/error.jsp&lt;/result&gt;
    &lt;result name=&quot;add&quot;&gt;/{1}.jsp&lt;/result&gt;&lt;!-- 跳转add.jsp --&gt;
    &lt;result name=&quot;delete&quot;&gt;/{1}.jsp&lt;/result&gt;&lt;!-- 跳转delete.jsp --&gt;
&lt;/action&gt;
&lt;/package&gt;
&lt;/struts&gt;</code></pre>
<p>【src/my.example/User.java】：继承ActionSupport并增加方法，execute（）返回值为<font color="red">常量<strong>SUCCESS</strong>和<strong>ERROR</strong></font></p>
<pre><code class="java">package my.example;

import com.opensymphony.xwork2.ActionSupport;

public class UserAction extends ActionSupport{ 

    private User user;//复杂类型

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public String execute() throws Exception { 
    // 只有用户名为root，密码为root方可成功登陆 
        if (user.getUsername().equals(&quot;root&quot;) &amp;&amp; user.getPassword().equals(&quot;root&quot;)) { 
            return SUCCESS; }
        else { 
            return ERROR; 
        } 
    } 

    public String add() {
        return &quot;add&quot;;    
    }
    public String delete() {
        return &quot;delete&quot;;    
    }
}</code></pre>
<p>【WebContent/login.jsp】：<font color="red">form中的action加_*，*是方法名</font></p>
<pre><code class="jsp">&lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt; 
&lt;!-- s：stuts标签 --&gt;
&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;s:form action=&quot;loginUser&quot;&gt; &lt;!-- 执行action中的默认方法execute() --&gt;
    &lt;s:textfield name=&quot;user.username&quot; label=&quot;用户名&quot;&gt;&lt;/s:textfield&gt; 
    &lt;s:password name=&quot;user.password&quot; label=&quot;密码&quot;&gt;&lt;/s:password&gt; 
    &lt;s:submit value=&quot;确定&quot;/&gt;&lt;s:reset value=&quot;重置&quot;/&gt; 
&lt;/s:form&gt; 
&lt;s:form action=&quot;loginUser_add&quot;&gt; &lt;!-- 执行action中的add() --&gt;
    &lt;s:submit value=&quot;add&quot;/&gt;
&lt;/s:form&gt; 
&lt;s:form action=&quot;loginUser_delete&quot;&gt; &lt;!-- 执行action中的delete() --&gt;
    &lt;s:submit value=&quot;delete&quot;/&gt;
&lt;/s:form&gt; 
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>增加【WebContent/add.jsp】和【WebContent/delete.jsp】，其他页面不变。</p>
<p>【运行结果：】<strong>注意网址</strong></p>
<img src="/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9AStruts2%EF%BC%89/6.png" class="">

<img src="/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9AStruts2%EF%BC%89/7.png" class="">

<img src="/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9AStruts2%EF%BC%89/3.png" class="">

<img src="/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9AStruts2%EF%BC%89/4.png" class="">

<hr>
<p>【src/struts.xml】还能精简：减少代码冗余。</p>
<pre><code class="jsp">&lt;struts&gt;
&lt;package name=&quot;mylogin&quot; extends=&quot;struts-default&quot;&gt; 
    &lt;action name=&quot;loginUser_*&quot; class=&quot;my.example.UserAction&quot; method=&quot;{1} &quot;&gt;
    &lt;result name=&quot;success&quot;&gt;/success.jsp&lt;/result&gt;
    &lt;result name=&quot;error&quot;&gt;/error.jsp&lt;/result&gt;

    &lt;!-- 返回值是add就跳转add,jsp返回值为delete就跳delete.jsp --&gt;   
    &lt;result name=&quot;{1}&quot;&gt;{1}.jsp&lt;/result&gt;

&lt;/action&gt;
&lt;/package&gt;
&lt;/struts&gt;</code></pre>
<h1 id="4-校验机制"><a href="#4-校验机制" class="headerlink" title="4 校验机制"></a><span id="4">4 校验机制</span></h1><h2 id="4-1-手动校验"><a href="#4-1-手动校验" class="headerlink" title="4.1 手动校验"></a>4.1 手动校验</h2><p>【src/struts.xml】：<font color="red">校验不成功返回字符串input</font></p>
<pre><code class="jsp">&lt;/package&gt;
&lt;package name=&quot;mylogin&quot; extends=&quot;struts-default&quot;&gt; 
    &lt;action name=&quot;loginUser_*&quot; class=&quot;my.example.UserAction&quot; method=&quot;execute &quot;&gt;
    &lt;result name=&quot;success&quot;&gt;success.jsp&lt;/result&gt;
    &lt;result name=&quot;error&quot;&gt;error.jsp&lt;/result&gt;
    &lt;result name=&quot;input&quot;&gt;login.jsp&lt;/result&gt;&lt;!-- 校验不成功时跳转 --&gt;
&lt;/action&gt;
&lt;/package&gt;</code></pre>
<p>【src/my.example/UserAction.java】：<font color="red">validate()校验方法</font></p>
<pre><code class="java">package my.example;

import com.opensymphony.xwork2.ActionSupport;

public class UserAction extends ActionSupport{ 
    private String username;
    private String password;

    public String getUsername() {
        return username;
    }
    public void setUsername(String username) {
        this.username = username;
    }
    public String getPassword() {
        return password;
    }
    public void setPassword(String password) {
        this.password = password;
    }
    @Override
    public String execute() throws Exception {
        return SUCCESS;
    }
    //重写父类ActionSupport的校验的方法validate()
    @Override
    public void validate() {
        if(username.equals(&quot;admin&quot;)) {
            //提示信息username is invalid出现在username字段附近
            this.addFieldError(&quot;username&quot;, &quot;username is invalid&quot;);
        }
        if(password.equals(&quot;111&quot;)) {
            this.addFieldError(&quot;password&quot;, &quot;username is invalid&quot;);
        }
        if(username.equals(&quot;root&quot;)&amp;&amp;password.equals(&quot;root&quot;)) {
            //多个字符串时候，不能指定错误信息提示在哪个字段的附近
            //而是直接出现在&lt;s:actionerror/&gt;处
            this.addActionError(&quot;information is invalid&quot;);
        }
    }
}</code></pre>
<p>【WebContent/login.jsp】：</p>
<pre><code class="jsp">&lt;body&gt;
&lt;s:form action=&quot;loginUser&quot;&gt; &lt;!-- 执行action中的默认方法execute() --&gt;
    &lt;s:textfield name=&quot;username&quot; label=&quot;用户名&quot;&gt;&lt;/s:textfield&gt; 
    &lt;s:password name=&quot;password&quot; label=&quot;密码&quot;&gt;&lt;/s:password&gt; 
    &lt;s:submit value=&quot;确定&quot;/&gt;&lt;s:reset value=&quot;重置&quot;/&gt; 
&lt;/s:form&gt; 
&lt;s:actionerror/&gt;&lt;!-- this.addActionError()报错信息位置 --&gt;
&lt;/body&gt;</code></pre>
<p>【结果】:错误提示出现在字段的附件提示错误信息</p>
<p>账号admin密码111：</p>
<img src="/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9AStruts2%EF%BC%89/8.png" class="">

<p>账号root密码root：</p>
<img src="/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9AStruts2%EF%BC%89/9.png" class="">

<h2 id="4-2-自动校验"><a href="#4-2-自动校验" class="headerlink" title="4.2 自动校验"></a>4.2 自动校验</h2><h3 id="4-2-1-基本数据类型时"><a href="#4-2-1-基本数据类型时" class="headerlink" title="4.2.1 基本数据类型时"></a>4.2.1 基本数据类型时</h3><p>【src/my.example/UserAction-validation.xml】：<font color="red">UserAction-validation.xml和UserAction.java放在同一个包下</font></p>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!--  --&gt;
&lt;!DOCTYPE validators PUBLIC 
 &quot;-//Apache Struts//XWork Validator 1.0.2//EN&quot; 
 &quot;http://struts.apache.org/dtds/xwork-validator-1.0.2.dtd&quot;&gt;

&lt;validators&gt;

&lt;validator type=&quot;requiredstring&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;username&lt;/param&gt;
&lt;message&gt;用户名不可为空&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;requiredstring&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;password&lt;/param&gt;
&lt;message&gt;密码不可为空&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;requiredstring&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;repassword&lt;/param&gt;
&lt;message&gt;再次输入密码不可为空&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;required&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;height&lt;/param&gt;
&lt;message&gt;身高不可为空&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;requiredstring&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;email&lt;/param&gt;
&lt;message&gt;邮箱不可为空&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;required&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;birthday&lt;/param&gt;
&lt;message&gt;生日不可为空&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;requiredstring&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;blogurl&lt;/param&gt;
&lt;message&gt;博客不可为空&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;regex&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;username&lt;/param&gt;
&lt;param name=&quot;expression&quot;&gt;&lt;![CDATA[(\w{4,20})]]&gt;&lt;/param&gt;
&lt;message&gt;用户名长度必须在4到20之间且必须是数字和字母&lt;/message&gt;
&lt;/validator&gt;


&lt;validator type=&quot;stringlength&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;password&lt;/param&gt;
&lt;param name=&quot;minLength&quot;&gt;6&lt;/param&gt;
&lt;message&gt;密码不得小于${minLength}位&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;url&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;blogurl&lt;/param&gt;
&lt;message&gt;博客地址不正确&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;email&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;email&lt;/param&gt;
&lt;message&gt;邮箱地址不正确&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;double&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;height&lt;/param&gt;
&lt;param name=&quot;minInclusive&quot;&gt;0.7&lt;/param&gt;
&lt;param name=&quot;maxInclusive&quot;&gt;2.5&lt;/param&gt;
&lt;message&gt;身高必须在${minInclusive}和${maxInclusive}之间&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;date&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;birthday&lt;/param&gt;
&lt;param name=&quot;min&quot;&gt;1900-01-01&lt;/param&gt;
&lt;param name=&quot;max&quot;&gt;2010-01-01&lt;/param&gt;
&lt;message&gt;出生日期必须在${min}和${max}之间&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;fieldexpression&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;password&lt;/param&gt;
&lt;param name=&quot;fieldName&quot;&gt;repassword&lt;/param&gt;
&lt;param name=&quot;expression&quot;&gt;&lt;![CDATA[(password==repassword)]]&gt;&lt;/param&gt;
&lt;message&gt;两次输入的密码必须一致&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;fieldexpression&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;username&lt;/param&gt;
&lt;param name=&quot;expression&quot;&gt;&lt;![CDATA[(username!=&#39;admin&#39;)]]&gt;&lt;/param&gt;
&lt;message&gt;用户名不允许设为admin&lt;/message&gt;
&lt;/validator&gt;

&lt;/validators&gt;</code></pre>
<p>【WebContent/login.jsp】：</p>
<pre><code class="jsp">&lt;body&gt;
     &lt;s:fielderror cssStyle=&quot;color:red;&quot;/&gt;&lt;!-- 校检信息提示处 --&gt;

       &lt;s:form action=&quot;loginUser&quot; method=&quot;POST&quot; theme=&quot;simple&quot;&gt;
       &lt;table border=&quot;1&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
       &lt;tr&gt;
           &lt;td&gt;用户名&lt;/td&gt;
           &lt;td&gt;
             &lt;s:textfield name=&quot;username&quot;/&gt;
           &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
           &lt;td&gt;密  码&lt;/td&gt;
           &lt;td&gt;
             &lt;s:password name=&quot;password&quot;/&gt;
           &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
           &lt;td&gt;再次输入密码&lt;/td&gt;
           &lt;td&gt;
             &lt;s:password name=&quot;repassword&quot;/&gt;
           &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
           &lt;td&gt;出生日期&lt;/td&gt;
           &lt;td&gt;
             &lt;s:textfield name=&quot;birthday&quot;/&gt;
           &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
           &lt;td&gt;身高(米)&lt;/td&gt;
           &lt;td&gt;
             &lt;s:textfield name=&quot;height&quot;/&gt;
           &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
           &lt;td&gt;电子邮箱&lt;/td&gt;
           &lt;td&gt;
             &lt;s:textfield name=&quot;email&quot;/&gt;
           &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
           &lt;td&gt;博客&lt;/td&gt;
           &lt;td&gt;
             &lt;s:textfield name=&quot;blogurl&quot;/&gt;
           &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
           &lt;td&gt;&amp;nbsp;&lt;/td&gt;
           &lt;td&gt;
             &lt;s:submit value=&quot;注册&quot;/&gt;
           &lt;/td&gt;
       &lt;/tr&gt;
       &lt;/table&gt;
    &lt;/s:form&gt;
&lt;/body&gt;</code></pre>
<p>【src/my.example/UserAction.java】：</p>
<pre><code class="java">package my.example;

import java.util.Date;

import com.opensymphony.xwork2.ActionSupport;

public class UserAction extends ActionSupport{ 
    private String username;
    private String password;
    private String repassword;
    private double height;
    private Date birthday;
    private String email;
    private String blogurl;

    public Date getBirthday() {

        return birthday;

    }
    public void setBirthday(Date birthday) {
        this.birthday = birthday;
    }
    public String getUsername() {
        return username;
    }
    public void setUsername(String username) {
        this.username = username;
    }
    public String getPassword() {
        return password;
    }
    public void setPassword(String password) {
        this.password = password;
    }
    public String getRepassword() {
        return repassword;
    }
    public void setRepassword(String repassword) {
        this.repassword = repassword;
    }
    public double getHeight() {
        return height;
    }
    public void setHeight(double height) {
        this.height = height;
    }
    public String getEmail() {
        return email;
    }
    public void setEmail(String email) {
        this.email = email;
    }
    public String getBlogurl() {
        return blogurl;
    }
    public void setBlogurl(String blogurl) {
        this.blogurl = blogurl;
    }
    public String execute(){
        System.out.println(birthday);
        return SUCCESS;
    }
}</code></pre>
<p>【src/struts.xml】：<font color="red">校验不成功返回字符串input</font></p>
<pre><code class="jsp">&lt;/package&gt;
&lt;package name=&quot;mylogin&quot; extends=&quot;struts-default&quot;&gt; 
    &lt;action name=&quot;loginUser_*&quot; class=&quot;my.example.UserAction&quot; method=&quot;execute &quot;&gt;
    &lt;result name=&quot;success&quot;&gt;success.jsp&lt;/result&gt;
    &lt;result name=&quot;error&quot;&gt;error.jsp&lt;/result&gt;
    &lt;result name=&quot;input&quot;&gt;login.jsp&lt;/result&gt;&lt;!-- 校验不成功时跳转 --&gt;
&lt;/action&gt;
&lt;/package&gt;</code></pre>
<p>【结果：】<strong>校验器默认的执行顺序是按照在配置文件中由上到下的顺序执行的。</strong>框架默认非字段校验器的执行顺序是优于字段校验器的。非字段校验器的执行与字段校验器的执行是分离的，非字段校验器的短路只会影响到与此字段相关的非字段校验器。</p>
<img src="/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9AStruts2%EF%BC%89/10.png" class="">

<h3 id="4-2-2-复杂数据类型"><a href="#4-2-2-复杂数据类型" class="headerlink" title="4.2.2 复杂数据类型"></a>4.2.2 复杂数据类型</h3><img src="/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9AStruts2%EF%BC%89/12.png" class="">

<p>【src/my.example/User.java】：新建User.java类，把基本数据剪切过来封装。</p>
<pre><code class="java">package my.example;

import java.util.Date;

public class User {
    private String username;
    private String password;
    private String repassword;
    private double height;
    private Date birthday;
    private String email;
    private String blogurl;
    public String getUsername() {
        return username;
    }
    public void setUsername(String username) {
        this.username = username;
    }
    public String getPassword() {
        return password;
    }
    public void setPassword(String password) {
        this.password = password;
    }
    public String getRepassword() {
        return repassword;
    }
    public void setRepassword(String repassword) {
        this.repassword = repassword;
    }
    public double getHeight() {
        return height;
    }
    public void setHeight(double height) {
        this.height = height;
    }
    public Date getBirthday() {
        return birthday;
    }
    public void setBirthday(Date birthday) {
        this.birthday = birthday;
    }
    public String getEmail() {
        return email;
    }
    public void setEmail(String email) {
        this.email = email;
    }
    public String getBlogurl() {
        return blogurl;
    }
    public void setBlogurl(String blogurl) {
        this.blogurl = blogurl;
    }
}</code></pre>
<p>【src/my.example/UserAction.java】：添加User复杂数据类型</p>
<pre><code class="java">package my.example;

import java.util.Date;

import com.opensymphony.xwork2.ActionSupport;

public class UserAction extends ActionSupport{ 
    private User user;

    public User getUser() {
        return user;
    }
    public void setUser(User user) {
        this.user = user;
    }

    public String execute(){
        return SUCCESS;
    }
}</code></pre>
<p>【src/my.example/UserAction-validation.xml】：<font color="red">UserAction-validation.xml和UserAction.java放在同一个包下</font></p>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE validators PUBLIC 
 &quot;-//Apache Struts//XWork Validator 1.0.2//EN&quot; 
 &quot;http://struts.apache.org/dtds/xwork-validator-1.0.2.dtd&quot;&gt;

&lt;validators&gt;
&lt;field name=&quot;user&quot;&gt;
&lt;field-validator type=&quot;visitor&quot;&gt;
&lt;param name=&quot;context&quot;&gt;Reg&lt;/param&gt;&lt;!-- 名字：要和文件名中间相同 --&gt;
&lt;param name=&quot;appendPrefix&quot;&gt;true&lt;/param&gt;&lt;!-- 是否加前缀 --&gt;
&lt;message&gt;用户注册：&lt;/message&gt;&lt;!-- 前缀描述 --&gt;
&lt;/field-validator&gt;
&lt;/field&gt;
&lt;/validators&gt;</code></pre>
<p>【src/my.example/User-Reg-validation.xml】：<font color="red">User-Reg-validation.xml和User.java放在同一个包下,并且文件名-两横杠中字符串与<strong>“context”的值对应</strong>-</font>，对基本数据的校检放进新validation</p>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE validators PUBLIC 
 &quot;-//Apache Struts//XWork Validator 1.0.2//EN&quot; 
 &quot;http://struts.apache.org/dtds/xwork-validator-1.0.2.dtd&quot;&gt;

&lt;validators&gt;

&lt;validator type=&quot;requiredstring&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;username&lt;/param&gt;
&lt;message&gt;用户名不可为空&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;requiredstring&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;password&lt;/param&gt;
&lt;message&gt;密码不可为空&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;requiredstring&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;repassword&lt;/param&gt;
&lt;message&gt;再次输入密码不可为空&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;required&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;height&lt;/param&gt;
&lt;message&gt;身高不可为空&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;requiredstring&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;email&lt;/param&gt;
&lt;message&gt;邮箱不可为空&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;required&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;birthday&lt;/param&gt;
&lt;message&gt;生日不可为空&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;requiredstring&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;blogurl&lt;/param&gt;
&lt;message&gt;博客不可为空&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;regex&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;username&lt;/param&gt;
&lt;param name=&quot;expression&quot;&gt;&lt;![CDATA[(\w{4,20})]]&gt;&lt;/param&gt;
&lt;message&gt;用户名长度必须在4到20之间且必须是数字和字母&lt;/message&gt;
&lt;/validator&gt;


&lt;validator type=&quot;stringlength&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;password&lt;/param&gt;
&lt;param name=&quot;minLength&quot;&gt;6&lt;/param&gt;
&lt;message&gt;密码不得小于${minLength}位&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;url&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;blogurl&lt;/param&gt;
&lt;message&gt;博客地址不正确&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;email&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;email&lt;/param&gt;
&lt;message&gt;邮箱地址不正确&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;double&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;height&lt;/param&gt;
&lt;param name=&quot;minInclusive&quot;&gt;0.7&lt;/param&gt;
&lt;param name=&quot;maxInclusive&quot;&gt;2.5&lt;/param&gt;
&lt;message&gt;身高必须在${minInclusive}和${maxInclusive}之间&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;date&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;birthday&lt;/param&gt;
&lt;param name=&quot;min&quot;&gt;1900-01-01&lt;/param&gt;
&lt;param name=&quot;max&quot;&gt;2010-01-01&lt;/param&gt;
&lt;message&gt;出生日期必须在${min}和${max}之间&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;fieldexpression&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;password&lt;/param&gt;
&lt;param name=&quot;fieldName&quot;&gt;repassword&lt;/param&gt;
&lt;param name=&quot;expression&quot;&gt;&lt;![CDATA[(password==repassword)]]&gt;&lt;/param&gt;
&lt;message&gt;两次输入的密码必须一致&lt;/message&gt;
&lt;/validator&gt;

&lt;validator type=&quot;fieldexpression&quot;&gt;
&lt;param name=&quot;fieldName&quot;&gt;username&lt;/param&gt;
&lt;param name=&quot;expression&quot;&gt;&lt;![CDATA[(username!=&#39;admin&#39;)]]&gt;&lt;/param&gt;
&lt;message&gt;用户名不允许设为admin&lt;/message&gt;
&lt;/validator&gt;

&lt;/validators&gt;</code></pre>
<p>【WebContent/login.jsp】：name中参数加上对象<strong>user.</strong></p>
<pre><code class="html">&lt;body&gt;
     &lt;s:fielderror cssStyle=&quot;color:red;&quot;/&gt;&lt;!-- 校检信息提示处 --&gt;

       &lt;s:form action=&quot;loginUser&quot; method=&quot;POST&quot; theme=&quot;simple&quot;&gt;
       &lt;table border=&quot;1&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
       &lt;tr&gt;
           &lt;td&gt;用户名&lt;/td&gt;
           &lt;td&gt;
             &lt;s:textfield name=&quot;user.username&quot;/&gt;
           &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
           &lt;td&gt;密  码&lt;/td&gt;
           &lt;td&gt;
             &lt;s:password name=&quot;user.password&quot;/&gt;
           &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
           &lt;td&gt;再次输入密码&lt;/td&gt;
           &lt;td&gt;
             &lt;s:password name=&quot;user.repassword&quot;/&gt;
           &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
           &lt;td&gt;出生日期&lt;/td&gt;
           &lt;td&gt;
             &lt;s:textfield name=&quot;user.birthday&quot;/&gt;
           &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
           &lt;td&gt;身高(米)&lt;/td&gt;
           &lt;td&gt;
             &lt;s:textfield name=&quot;user.height&quot;/&gt;
           &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
           &lt;td&gt;电子邮箱&lt;/td&gt;
           &lt;td&gt;
             &lt;s:textfield name=&quot;user.email&quot;/&gt;
           &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
           &lt;td&gt;博客&lt;/td&gt;
           &lt;td&gt;
             &lt;s:textfield name=&quot;user.blogurl&quot;/&gt;
           &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
           &lt;td&gt;&amp;nbsp;&lt;/td&gt;
           &lt;td&gt;
             &lt;s:submit value=&quot;注册&quot;/&gt;
           &lt;/td&gt;
       &lt;/tr&gt;
       &lt;/table&gt;
    &lt;/s:form&gt;
&lt;/body&gt;</code></pre>
<p>【结果】：当不同的Action调用同一个封装类时，设置不同的<strong>前缀信息</strong>，就能知道是哪个Action校检有问题。</p>
<img src="/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9AStruts2%EF%BC%89/11.png" class="">]]></content>
      <categories>
        <category>JSP</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP（第七章：JSTL核心标签库）</title>
    <url>/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9AJSTL%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/04/29/JSP（第七章：JSTL）/#1">1 JSTL标签库分类</a></p>
<p><a href="/2020/04/29/JSP（第七章：JSTL）/#2">2 表达式控制标签</a></p>
<p><a href="/2020/04/29/JSP（第七章：JSTL）/#3">3 流程控制标签</a></p>
<p><a href="/2020/04/29/JSP（第七章：JSTL）/#4">4 循环标签</a></p>
<p><a href="/2020/04/29/JSP（第七章：JSTL）/#5">5 URL操作标签</a></p>
</blockquote>
<h1 id="1-JSTL标签库分类"><a href="#1-JSTL标签库分类" class="headerlink" title="1 JSTL标签库分类"></a><span id="1">1 JSTL标签库分类</span></h1><p>JSTL标签库的使用是为了弥补html表示的不足，规范自定义标签的使用而诞生的。在告别modle1模式开发应用程序后，人们开始注重软件的分层设计，不希望在JSP页面中出现java逻辑代码，同时也由于自定义标签的开发难度较大和不利于技术标准化产生了自定义标签库。</p>
<p>JSTL标签库可分为5类：</p>
<ul>
<li>核心标签库</li>
<li>I18N格式化标签库</li>
<li>SQL标签库</li>
<li>XML标签库</li>
<li>函数标签库</li>
</ul>
<h2 id="1-1-核心标签库"><a href="#1-1-核心标签库" class="headerlink" title="1.1 核心标签库"></a>1.1 核心标签库</h2><p>JSTL的核心标签库标签共13个，从功能上可以分为4类：</p>
<ul>
<li>表达式控制标签：out标签、set标签、remove标签、catch标签</li>
<li>流程控制标签：if标签、choose标签、when标签、otherwise标签</li>
<li>循环标签：forEach标签、forTokens标签</li>
<li>URL操作标签：import标签、url标签、redirect标签</li>
</ul>
<a id="more"></a>

<p><strong>使用这些标签能够完成JSP页面的基本功能，减少编码工作。</strong></p>
<p>在JSP页面引入核心标签库的代码为：</p>
<pre><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code></pre><p>需要将两个文件拷贝到lib目录下面：</p>
<p>文件下载地址 <a href="http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/" target="_blank" rel="noopener">http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/</a></p>
<img src="/2020/04/29/JSP（第七章：JSTL）/1.png">

<h1 id="2-表达式控制标签"><a href="#2-表达式控制标签" class="headerlink" title="2 表达式控制标签"></a><span id="2">2 表达式控制标签</span></h1><p>表达式控制分类中包括&lt;c:out&gt;、&lt;c:set&gt;、&lt;c:remove&gt;、&lt;c:catch&gt;4个标签。</p>
<h2 id="2-1-lt-c-out-gt"><a href="#2-1-lt-c-out-gt" class="headerlink" title="2.1 &lt;c:out&gt;"></a>2.1 &lt;c:out&gt;</h2><p>&lt;c:out&gt;标签用来显示一个表达式的结果，与&lt;%= %&gt;作用相似，它们的区别就是&lt;c:out&gt;标签可以直接通过”.”操作符来访问属性。</p>
<p>举例来说，如果想要访问customer.address.street，只需要这样写：&lt;c:out value=”customer.address.street”&gt;。</p>
<p>&lt;c:out&gt;标签会自动忽略XML标记字符，所以它们不会被当做标签来处理。</p>
<p>【语法格式】：</p>
<pre><code class="jsp">&lt;c:out value=&quot;&lt;string&gt;&quot; default=&quot;&lt;string&gt;&quot; escapeXml=&quot;&lt;true|false&gt;&quot;/&gt;</code></pre>
<p>【参数说明】：</p>
<table>
<thead>
<tr>
<th align="left"><strong>属性</strong></th>
<th align="left"><strong>描述</strong></th>
<th align="left"><strong>是否必要</strong></th>
<th align="left"><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">value</td>
<td align="left">要输出的内容</td>
<td align="left">是</td>
<td align="left">无</td>
</tr>
<tr>
<td align="left">default</td>
<td align="left">输出的默认值</td>
<td align="left">否</td>
<td align="left">主体中的内容</td>
</tr>
<tr>
<td align="left">escapeXml</td>
<td align="left">是否忽略XML特殊字符</td>
<td align="left">否</td>
<td align="left">true</td>
</tr>
</tbody></table>
<p>【示例代码】：</p>
<pre><code class="jsp">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;

&lt;html&gt;
&lt;head&gt;
&lt;title&gt;c:out 标签实例&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;&amp;lt;c:out&amp;gt; 实例&lt;/h1&gt;
        &lt;c:out value=&quot;&amp;lt要显示的数据对象（未使用转义字符）&amp;gt&quot; escapeXml=&quot;true&quot; default=&quot;默认值&quot;&gt;&lt;/c:out&gt;&lt;br/&gt;
          &lt;c:out value=&quot;&amp;lt要显示的数据对象（使用转义字符）&amp;gt&quot; escapeXml=&quot;false&quot; default=&quot;默认值&quot;&gt;&lt;/c:out&gt;&lt;br/&gt;
    &lt;c:out value=&quot;${null}&quot; escapeXml=&quot;false&quot;&gt;使用的表达式结果为null，则输出该默认值&lt;/c:out&gt;&lt;br/&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>【运行结果】：</p>
<img src="/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9AJSTL%EF%BC%89/8.png" class="">

<h2 id="2-2-lt-c-set-gt"><a href="#2-2-lt-c-set-gt" class="headerlink" title="2.2 &lt;c:set&gt;"></a>2.2 &lt;c:set&gt;</h2><p>&lt;c:set&gt;标签用于设置变量值和对象属性。</p>
<p>&lt;c:set&gt;标签就是&lt;jsp:setProperty&gt;行为标签的孪生兄弟。</p>
<p>这个标签之所以很有用呢，是因为它会计算表达式的值，然后使用计算结果来设置 JavaBean 对象或 java.util.Map 对象的值。</p>
<p>【语法格式】：</p>
<pre><code class="JSP">&lt;c:set
   var=&quot;&lt;string&gt;&quot;
   value=&quot;&lt;string&gt;&quot;
   target=&quot;&lt;string&gt;&quot;
   property=&quot;&lt;string&gt;&quot;
   scope=&quot;&lt;string&gt;&quot;/&gt;</code></pre>
<p>【参数说明】：</p>
<table>
<thead>
<tr>
<th align="left"><strong>属性</strong></th>
<th align="left"><strong>描述</strong></th>
<th align="left"><strong>是否必要</strong></th>
<th align="left"><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">value</td>
<td align="left">要存储的值</td>
<td align="left">否</td>
<td align="left">主体的内容</td>
</tr>
<tr>
<td align="left">target</td>
<td align="left">要修改的属性所属的对象</td>
<td align="left">否</td>
<td align="left">无</td>
</tr>
<tr>
<td align="left">property</td>
<td align="left">要修改的属性</td>
<td align="left">否</td>
<td align="left">无</td>
</tr>
<tr>
<td align="left">var</td>
<td align="left">存储信息的变量</td>
<td align="left">否</td>
<td align="left">无</td>
</tr>
<tr>
<td align="left">scope</td>
<td align="left">var属性的作用域</td>
<td align="left">否</td>
<td align="left">Page</td>
</tr>
</tbody></table>
<p>【示例代码】：</p>
<pre><code class="jsp">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;c:set 标签实例&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;c:set var=&quot;salary&quot; scope=&quot;session&quot; value=&quot;${2000*2}&quot;/&gt;
&lt;c:out value=&quot;${salary}&quot;/&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>【运行结果】：</p>
<pre><code>4000</code></pre><h2 id="2-3-lt-c-remove-gt"><a href="#2-3-lt-c-remove-gt" class="headerlink" title="2.3 &lt;c:remove&gt;"></a>2.3 &lt;c:remove&gt;</h2><p>&lt;c:remove&gt;标签用于移除一个变量，可以指定这个变量的作用域，若未指定，则默认为变量第一次出现的作用域。</p>
<p>这个标签不是特别有用，不过可以用来确保JSP完成清理工作。</p>
<p>【语法格式】：</p>
<pre><code class="JSP">&lt;c:remove var=&quot;&lt;string&gt;&quot; scope=&quot;&lt;string&gt;&quot;/&gt;</code></pre>
<p>【参数说明】：</p>
<table>
<thead>
<tr>
<th align="left"><strong>属性</strong></th>
<th align="left"><strong>描述</strong></th>
<th align="left"><strong>是否必要</strong></th>
<th align="left"><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">var</td>
<td align="left">要移除的变量名称</td>
<td align="left">是</td>
<td align="left">无</td>
</tr>
<tr>
<td align="left">scope</td>
<td align="left">变量所属的作用域</td>
<td align="left">否</td>
<td align="left">所有作用域</td>
</tr>
</tbody></table>
<p>【示例代码】：</p>
<pre><code class="jsp">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;c:remove 标签实例&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;c:set var=&quot;salary&quot; scope=&quot;session&quot; value=&quot;${2000*2}&quot;/&gt;
&lt;p&gt;salary 变量值: &lt;c:out value=&quot;${salary}&quot;/&gt;&lt;/p&gt;
&lt;c:remove var=&quot;salary&quot;/&gt;
&lt;p&gt;删除 salary 变量后的值: &lt;c:out value=&quot;${salary}&quot;/&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>【运行结果】：</p>
<pre><code>salary 变量值: 4000
删除 salary 变量后的值:</code></pre><h2 id="2-3-lt-c-catch-gt"><a href="#2-3-lt-c-catch-gt" class="headerlink" title="2.3 &lt;c:catch&gt;"></a>2.3 &lt;c:catch&gt;</h2><p>&lt;c:catch&gt; 标签主要用来处理产生错误的异常状况，并且将错误信息储存起来。</p>
<p>【语法格式】：</p>
<pre><code>&lt;c:catch var=&quot;&lt;string&gt;&quot;&gt;
...
&lt;/c:catch&gt;</code></pre><p>【参数说明】：</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
<th align="left">是否必要</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">var</td>
<td align="left">用来储存错误信息的变量</td>
<td align="left">否</td>
<td align="left">None</td>
</tr>
</tbody></table>
<p>【示例代码】：</p>
<pre><code class="JSP">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;c:catch 标签实例&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;c:catch var =&quot;catchException&quot;&gt;
   &lt;% int x = 5/0;%&gt;
&lt;/c:catch&gt;

&lt;c:if test = &quot;${catchException != null}&quot;&gt;
   &lt;p&gt;异常为 : ${catchException} &lt;br /&gt;
   发生了异常: ${catchException.message}&lt;/p&gt;
&lt;/c:if&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>【运行结果】：</p>
<pre><code>异常为 : java.lang.ArithmeticException: / by zero 
发生了异常: / by zero</code></pre><h1 id="3-流程控制标签"><a href="#3-流程控制标签" class="headerlink" title="3 流程控制标签"></a><span id="3">3 流程控制标签</span></h1><p>流程控制标签主要用于对页面简单业务逻辑进行控制。流程控制标签包含有4个：&lt;c:if&gt;标签、&lt;c:choose&gt;标签、&lt;c:when&gt;标签和&lt;c:otherwise&gt;标签。</p>
<h2 id="3-1-lt-c-if-gt-标签"><a href="#3-1-lt-c-if-gt-标签" class="headerlink" title="3.1 &lt;c:if&gt;标签"></a>3.1 &lt;c:if&gt;标签</h2><p>&lt;c:if&gt;同程序中的if作用相同，用来实现条件控制。</p>
<p>【语法格式】：</p>
<pre><code class="jsp">&lt;c:if test=&quot;条件1&quot; var=&quot;name&quot; [scope=&quot;page|request|session|application&quot;]&gt;&lt;/c:if&gt;</code></pre>
<p>【参数说明】：<br>（1）test属性用于存放判断的条件，一般使用EL表达式来编写。<br>（2）var指定名称用来存放判断的结果类型为true或false。<br>（3）scope用来存放var属性存放的范围。</p>
<p>【使用场景】：在开发中经常会出现不同用户的权限，首先对用户名进行判断（包括进行数据库验证，该功能可以由JavaBean实现，使用EL表达式得到一个布尔型的结果），把判断的结果存放在不同的JSP范围内（比如常用的session内），这样在每个页面都可以得到该用户的权限信息，根据不同权限的用户显示不同的结果。</p>
<pre><code class="jsp">&lt;%@ page language=&quot;java&quot; pageEncoding=&quot;gbk&quot;%&gt;
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;JSTL: -- if标签示例&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h4&gt;if标签示例&lt;/h4&gt;
&lt;hr&gt;
&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
&lt;input type=&quot;text&quot; name=&quot;uname&quot; value=&quot;${param.uname}&quot;&gt;
&lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;
&lt;/form&gt;

&lt;c:if test=&quot;${param.uname==&#39;admin&#39; }&quot; var=&quot;adminchock&quot;&gt;
&lt;c:out value=&quot;管理员欢迎您！&quot;&gt;
&lt;/c:out&gt;
&lt;/c:if&gt;
${adminchock}
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>提示：可以把adminchock的属性范围设置为session，可以在其他的页面中得到adminchock的值，使用&lt;c:if text=”${adminchock}”&gt; &lt;/c:if&gt;判断，实现不同的权限。</p>
<p>【运行结果】：</p>
<img src="/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9AJSTL%EF%BC%89/2.png" class="">

<h2 id="3-2-lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签"><a href="#3-2-lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签" class="headerlink" title="3.2 &lt;c:choose&gt;&lt;c:when&gt;&lt;c:otherwise&gt;标签"></a>3.2 &lt;c:choose&gt;&lt;c:when&gt;&lt;c:otherwise&gt;标签</h2><p>这3个标签通常情况下是一起使用的，&lt;c:choose&gt;标签作为&lt;c:when&gt;和&lt;c:otherwise&gt;标签的父标签来使用。</p>
<pre><code class="JSP">&lt;c:choose&gt;
    &lt;c:when test=&quot;&lt;boolean&gt;&quot;&gt;
        ...//业务逻辑1
    &lt;/c:when&gt;
    &lt;c:when test=&quot;&lt;boolean&gt;&quot;&gt;
        ...//业务逻辑2
    &lt;/c:when&gt;
    ...
    ...
    &lt;c:otherwise&gt;
        ...//业务逻辑N
    &lt;/c:otherwise&gt;
&lt;/c:choose&gt;</code></pre>
<p>【参数说明】：<br>（1）语法1为3个标签的嵌套使用方式，&lt;c:choose&gt;标签只能和&lt;c:when&gt;标签共同使用。<br>（2）语法2为&lt;c:when&gt;标签的使用方式，该标签都条件进行判断，一般情况下和&lt;c:choose&gt;共同使用。<br>（3）&lt;c:otherwise&gt;不含有参数，只能跟&lt;c:when&gt;共同使用，并且在嵌套中<strong>只允许出现一次</strong>。</p>
<p>【示例代码】：代码9设定一个score变量的值为85，使用嵌套标签进行判断，根据判断返回结果。</p>
<pre><code class="jsp">&lt;%@ page language=&quot;java&quot; pageEncoding=&quot;gbk&quot;%&gt;
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;JSTL: -- choose及其嵌套标签标签示例&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h4&gt;choose及其嵌套标签示例&lt;/h4&gt;
&lt;hr&gt;
&lt;c:set var=&quot;score&quot;&gt;85&lt;/c:set&gt;

&lt;c:choose&gt;
    &lt;c:when test=&quot;${score&gt;=90}&quot;&gt;
    你的成绩为优秀！
    &lt;/c:when&gt;
    &lt;c:when test=&quot;${score&gt;=70&amp;&amp;score&lt;90}&quot;&gt;
    您的成绩为良好!
    &lt;/c:when&gt;
    &lt;c:when test=&quot;${score&gt;60&amp;&amp;score&lt;70}&quot;&gt;
    您的成绩为及格
    &lt;/c:when&gt;
    &lt;c:otherwise&gt;
    对不起，您没有通过考试！
    &lt;/c:otherwise&gt;
&lt;/c:choose&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>【运行结果】：</p>
<img src="/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9AJSTL%EF%BC%89/3.png" class="">

<h1 id="4-循环标签"><a href="#4-循环标签" class="headerlink" title="4 循环标签"></a><span id="4">4 循环标签</span></h1><p>循环标签主要实现迭代操作。主要包含两个标签：&lt;c:forEach&gt;和&lt;c:forTokens&gt;标签，接下来将详细介绍这两个标签的用法。</p>
<h2 id="4-1-lt-c-forEach-gt-标签"><a href="#4-1-lt-c-forEach-gt-标签" class="headerlink" title="4.1&lt;c:forEach&gt;标签"></a>4.1&lt;c:forEach&gt;标签</h2><p>该标签根据循环条件遍历集合（Collection）中的元素。</p>
<p>【语法格式】：</p>
<pre><code class="JSP">&lt;c:forEach var=”name” items=”Collection” varStatus=”StatusName” begin=”begin” end=”end” step=”step”&gt;本体内容&lt;/c:forEach&gt;</code></pre>
<p>【参数解析】：<br>（1）var设定变量名用于存储从集合中取出元素。<br>（2）items指定要遍历的集合。<br>（3）varStatus设定变量名，该变量用于存放集合中元素的信息。<br>（4）begin、end用于指定遍历的起始位置和终止位置（可选）。<br>（5）step指定循环的步长。</p>
<p>参数类型和相关说明见表：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th align="center">EL</th>
<th align="left">类型</th>
<th align="center">是否必须</th>
<th align="center">默认值</th>
</tr>
</thead>
<tbody><tr>
<td>var</td>
<td align="center">N</td>
<td align="left">String</td>
<td align="center">是</td>
<td align="center">无</td>
</tr>
<tr>
<td>items</td>
<td align="center">Y</td>
<td align="left">Arrays  Collection  Iterator  Enumeration  Map  String []args</td>
<td align="center">是</td>
<td align="center">无</td>
</tr>
<tr>
<td>begin</td>
<td align="center">Y</td>
<td align="left">int</td>
<td align="center">否</td>
<td align="center">0</td>
</tr>
<tr>
<td>end</td>
<td align="center">Y</td>
<td align="left">int</td>
<td align="center">否</td>
<td align="center">集合中最后一个元素</td>
</tr>
<tr>
<td>step</td>
<td align="center">y</td>
<td align="left">int</td>
<td align="center">否</td>
<td align="center">1</td>
</tr>
<tr>
<td>varStatus</td>
<td align="center">N</td>
<td align="left">String</td>
<td align="center">否</td>
<td align="center">无</td>
</tr>
</tbody></table>
<p><strong>varStatus的4个状态：</strong></p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>index</td>
<td>int</td>
<td>当前循环的索引值</td>
</tr>
<tr>
<td>count</td>
<td>int</td>
<td>循环的次数</td>
</tr>
<tr>
<td>frist</td>
<td>boolean</td>
<td>是否为第一个位置</td>
</tr>
<tr>
<td>last</td>
<td>boolean</td>
<td>是否为第二个位置</td>
</tr>
</tbody></table>
<p>【示例代码】：实现了遍历的两种方式：设定起始位置、不设定起始位置。同时实现了获得原属的状态信息。</p>
<pre><code class="jsp">&lt;%@ page contentType=&quot;text/html;charset=GBK&quot; %&gt;
&lt;%@page import=&quot;java.util.List&quot;%&gt;
&lt;%@page import=&quot;java.util.ArrayList&quot;%&gt;
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;JSTL: -- forEach标签实例&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h4&gt;&lt;c:out value=&quot;forEach实例&quot;/&gt;&lt;/h4&gt;
    &lt;hr&gt;
    &lt;%
        List a=new ArrayList();
        a.add(&quot;贝贝&quot;);
        a.add(&quot;晶晶&quot;);
        a.add(&quot;欢欢&quot;);
        a.add(&quot;莹莹&quot;);
        a.add(&quot;妮妮&quot;);
        request.setAttribute(&quot;a&quot;,a);
    %&gt;
    &lt;B&gt;&lt;c:out value=&quot;不指定begin和end的迭代：&quot; /&gt;&lt;/B&gt;&lt;br&gt;
    &lt;c:forEach var=&quot;fuwa&quot; items=&quot;${a}&quot;&gt;
        &amp;nbsp;&lt;c:out value=&quot;${fuwa}&quot;/&gt;&lt;br&gt;
    &lt;/c:forEach&gt;

    &lt;B&gt;&lt;c:out value=&quot;指定begin和end的迭代：&quot; /&gt;&lt;/B&gt;&lt;br&gt;
    &lt;c:forEach var=&quot;fuwa&quot; items=&quot;${a}&quot; begin=&quot;1&quot; end=&quot;3&quot; step=&quot;2&quot;&gt;
        &amp;nbsp;&lt;c:out value=&quot;${fuwa}&quot; /&gt;&lt;br&gt;
    &lt;/c:forEach&gt;

    &lt;B&gt;&lt;c:out value=&quot;输出整个迭代的信息：&quot; /&gt;&lt;/B&gt;&lt;br&gt;
    &lt;c:forEach var=&quot;fuwa&quot; items=&quot;${a}&quot; begin=&quot;3&quot; end=&quot;4&quot; step=&quot;1&quot; varStatus=&quot;s&quot;&gt;
        &amp;nbsp;&lt;c:out value=&quot;${fuwa}&quot; /&gt;的四种属性：&lt;br&gt;
        &amp;nbsp;&amp;nbsp;所在位置，即索引：&lt;c:out value=&quot;${s.index}&quot; /&gt;&lt;br&gt;
        &amp;nbsp;&amp;nbsp;总共已迭代的次数：&lt;c:out value=&quot;${s.count}&quot; /&gt;&lt;br&gt;
        &amp;nbsp;&amp;nbsp;是否为第一个位置：&lt;c:out value=&quot;${s.first}&quot; /&gt;&lt;br&gt;
        &amp;nbsp;&amp;nbsp;是否为最后一个位置：&lt;c:out value=&quot;${s.last}&quot; /&gt;&lt;br&gt;
    &lt;/c:forEach&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>提示：本例使用的list是在JSP页面中使用Java脚本创建的，是因为JSTL缺少创建集合的功能，在开发中一般不会如此，可通过访问数据库得到数据集合，和通过设定JavaBean的值得到数据集合</p>
<p>【运行结果】：</p>
<img src="/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9AJSTL%EF%BC%89/4.png" class="">

<h2 id="4-2-lt-c-forTokens-gt"><a href="#4-2-lt-c-forTokens-gt" class="headerlink" title="4.2 &lt;c:forTokens&gt;"></a>4.2 &lt;c:forTokens&gt;</h2><p>该标签用于浏览字符串，并根据指定的字符将字符串截取。</p>
<p>【语法格式】：</p>
<pre><code class="JSP">&lt;c:forTokens items=”strigOfTokens” delims=””delimiters [var=”name” begin=”begin” end=”end” step=”len” varStatus=”statusName”] &gt;</code></pre>
<p>【参数说明】<br>（1）items指定被迭代的字符串。<br>（2）delims指定使用的分隔符。<br>（3）var指定用来存放遍历到的成员。<br>（4）begin指定遍历的开始位置（int型从取值0开始）。<br>（5）end指定遍历结束的位置（int型，默认集合中最后一个元素）。<br>（6）step遍历的步长（大于0的整型）。<br>（7）varStatus存放遍历到的成员的状态信息。</p>
<p>【示例代码】：代码11实现了遍历一个有符号的字符串，把指定的符号移除。指定begin和end值，并获得遍历到的元素的状态信息。</p>
<pre><code class="jsp">&lt;%@ page contentType=&quot;text/html;charset=GBK&quot; %&gt;
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
         &lt;title&gt;JSTL: -- forTokens标签实例&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h4&gt;&lt;c:out value=&quot;forToken实例&quot;/&gt;&lt;/h4&gt;
&lt;hr&gt;
    &lt;c:forTokens items=&quot;北、京、欢、迎、您&quot; delims=&quot;&quot; var=&quot;c1&quot;&gt;
        &lt;c:out value=&quot;${c1}&quot;&gt;&lt;/c:out&gt;
    &lt;/c:forTokens&gt;&lt;br&gt;

    &lt;c:forTokens items=&quot;123-4567-8854&quot; delims=&quot;-&quot; var=&quot;t&quot;&gt;
        &lt;c:out value=&quot;${t}&quot;&gt;&lt;/c:out&gt;
    &lt;/c:forTokens&gt;&lt;br&gt;

    &lt;c:forTokens items=&quot;1*2*3*4*5*6*7&quot; delims=&quot;*&quot; begin=&quot;1&quot; end=&quot;3&quot; var=&quot;n&quot; varStatus=&quot;s&quot;&gt;
        &amp;nbsp;&lt;c:out value=&quot;${n}&quot; /&gt;的四种属性：&lt;br&gt;
        &amp;nbsp;&amp;nbsp;所在位置，即索引：&lt;c:out value=&quot;${s.index}&quot; /&gt;&lt;br&gt;
        &amp;nbsp;&amp;nbsp;总共已迭代的次数：&lt;c:out value=&quot;${s.count}&quot; /&gt;&lt;br&gt;
        &amp;nbsp;&amp;nbsp;是否为第一个位置：&lt;c:out value=&quot;${s.first}&quot; /&gt;&lt;br&gt;
        &amp;nbsp;&amp;nbsp;是否为最后一个位置：&lt;c:out value=&quot;${s.last}&quot; /&gt;&lt;br&gt;
    &lt;/c:forTokens&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>【运行结果】：</p>
<img src="/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9AJSTL%EF%BC%89/5.png" class="">

<h1 id="5-URL操作标签"><a href="#5-URL操作标签" class="headerlink" title="5 URL操作标签"></a><span id="5">5 URL操作标签</span></h1><h2 id="5-1-lt-c-url-gt"><a href="#5-1-lt-c-url-gt" class="headerlink" title="5.1 &lt;c:url&gt;"></a>5.1 &lt;c:url&gt;</h2><p>&lt;c:url&gt;    使用可选的查询参数来创造一个URL</p>
<p>【语法格式】：</p>
<pre><code class="jsp">&lt;c:url
  var=&quot;&lt;string&gt;&quot;
  scope=&quot;&lt;string&gt;&quot;
  value=&quot;&lt;string&gt;&quot;
  context=&quot;&lt;string&gt;&quot;/&gt;</code></pre>
<p>【参数说明】：</p>
<table>
<thead>
<tr>
<th>value</th>
<th>基础URL</th>
<th>是</th>
<th>无</th>
</tr>
</thead>
<tbody><tr>
<td>context</td>
<td>本地网络应用程序的名称</td>
<td>否</td>
<td>当前应用程序</td>
</tr>
<tr>
<td>var</td>
<td>代表URL的变量名</td>
<td>否</td>
<td>Print to page</td>
</tr>
<tr>
<td>scope</td>
<td>var属性的作用域</td>
<td>否</td>
<td>Page</td>
</tr>
</tbody></table>
<p>【示例代码】：</p>
<pre><code class="jsp">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;c:url 标签实例&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;&amp;lt;c:url&amp;gt实例 Demo&lt;/h1&gt;
    &lt;a href=&quot;&lt;c:url value=&quot;http://www.runoob.com&quot;/&gt;&quot;&gt;
     这个链接通过 &amp;lt;c:url&amp;gt; 标签生成。
    &lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>【运行结果】：</p>
<img src="/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9AJSTL%EF%BC%89/7.png" class="">

<h2 id="5-2-lt-c-param-gt"><a href="#5-2-lt-c-param-gt" class="headerlink" title="5.2 &lt;c:param&gt;"></a>5.2 &lt;c:param&gt;</h2><p>&lt;c:param&gt;    用来给包含或重定向的页面传递参数</p>
<p>【语法格式】：</p>
<pre><code class="jsp">&lt;c:param name=&quot;&lt;string&gt;&quot; value=&quot;&lt;string&gt;&quot;/&gt;</code></pre>
<p>【参数说明】：</p>
<table>
<thead>
<tr>
<th>name</th>
<th>URL中要设置的参数的名称</th>
<th>是</th>
<th>无</th>
</tr>
</thead>
<tbody><tr>
<td>value</td>
<td>参数的值</td>
<td>否</td>
<td>Body</td>
</tr>
</tbody></table>
<p>【示例代码】：</p>
<pre><code class="jsp">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;c:forTokens 标签实例&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;&amp;lt;c:param&amp;gt; 实例&lt;/h1&gt;
    &lt;c:url var=&quot;myURL&quot; value=&quot;main.jsp&quot;&gt;
        &lt;c:param name=&quot;name&quot; value=&quot;Runoob&quot;/&gt;
        &lt;c:param name=&quot;url&quot; value=&quot;www.runoob.com&quot;/&gt;
    &lt;/c:url&gt;
      &lt;a href=&quot;/&lt;c:out value=&quot;${myURL}&quot;/&gt;&quot;&gt;
 使用 &amp;lt;c:param&amp;gt; 为指定URL发送两个参数。&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>【运行结果】：</p>
<img src="/2020/04/29/JSP%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9AJSTL%EF%BC%89/6.png" class="">

<h2 id="5-3-lt-c-redirect-gt"><a href="#5-3-lt-c-redirect-gt" class="headerlink" title="5.3 &lt;c:redirect&gt;"></a>5.3 &lt;c:redirect&gt;</h2><p>&lt;c:redirect&gt;    重定向至一个新的URL</p>
<p>【语法格式】：</p>
<pre><code class="jsp">&lt;c:redirect url=&quot;&lt;string&gt;&quot; context=&quot;&lt;string&gt;&quot;/&gt;</code></pre>
<p>【参数说明】：</p>
<table>
<thead>
<tr>
<th align="left"><strong>属性</strong></th>
<th align="left"><strong>描述</strong></th>
<th align="left"><strong>是否必要</strong></th>
<th align="left"><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">url</td>
<td align="left">目标URL</td>
<td align="left">是</td>
<td align="left">无</td>
</tr>
<tr>
<td align="left">context</td>
<td align="left">紧接着一个本地网络应用程序的名称</td>
<td align="left">否</td>
<td align="left">当前应用程序</td>
</tr>
</tbody></table>
<p>【示例代码】：</p>
<pre><code class="jsp">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;c:redirect 标签实例&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;c:redirect url=&quot;http://www.runoob.com&quot;/&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>【运行结果】：</p>
<p>浏览器打开以上页面将跳转至 <a href="http://www.runoob.com。" target="_blank" rel="noopener">http://www.runoob.com。</a></p>
<hr>
<p>参考：<a href="https://www.runoob.com/jsp/jsp-intro.html" target="_blank" rel="noopener">菜鸟教程</a></p>
]]></content>
      <categories>
        <category>JSP</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>软件项目管理（第六章：IT项目成本管理）</title>
    <url>/2020/04/29/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/04/29/软件项目管理（第六章：IT项目成本管理）/#1">6.1 成本管理概述</a></p>
<p><a href="/2020/04/29/软件项目管理（第六章：IT项目成本管理）/#2">6.2 项目成本估算</a></p>
<p><a href="/2020/04/29/软件项目管理（第六章：IT项目成本管理）/#3">6.3 项目成本预算</a></p>
<p><a href="/2020/04/29/软件项目管理（第六章：IT项目成本管理）/#4">6.4 成本控制</a></p>
<p><a href="/2020/04/29/软件项目管理（第六章：IT项目成本管理）/#5">6.5 项目成本效益分析</a></p>
</blockquote>
<h1 id="6-1-成本管理概述"><a href="#6-1-成本管理概述" class="headerlink" title="6.1 成本管理概述"></a><span id="1">6.1 成本管理概述</span></h1><h2 id="6-1-1-项目成本与成本特点"><a href="#6-1-1-项目成本与成本特点" class="headerlink" title="6.1.1 项目成本与成本特点"></a>6.1.1 项目成本与成本特点</h2><h4 id="1-全生命周期成本"><a href="#1-全生命周期成本" class="headerlink" title="1. 全生命周期成本"></a>1. 全生命周期成本</h4><p>对工程项目的全过程、全要素、全体人员、全风险的成本管理观念。</p>
<p>开发阶段、后期维护统筹考虑。</p>
<a id="more"></a>

<h4 id="2-常见成本的概念"><a href="#2-常见成本的概念" class="headerlink" title="2. 常见成本的概念"></a>2. 常见成本的概念</h4><ol>
<li>成本或收益</li>
<li>直接成本</li>
<li>间接成本</li>
<li>沉默成本</li>
</ol>
<h4 id="3-IT项目成本的分类"><a href="#3-IT项目成本的分类" class="headerlink" title="3. IT项目成本的分类"></a>3. IT项目成本的分类</h4><p><strong>（1）软件产品的生产不是一个重复的制造过程，项目成本是以“一次性”开发过程中所花费的代价来计算的。<br> 从系统生命周期构成的开发阶段和维护阶段看，IT项目的成本由开发成本和维护成本构成。</strong></p>
<p>​        其中开发成本由软件开发成本、硬件成本和其他成本组成，包括软件的分析/设计费用（包含系统调研、需求分析、系统设计）、实施费用（包含编程/测试、硬件购买与安装、系统软件购置、数据收集、人员培训）及系统切换等方面的费用。</p>
<p>​        维护成本包括运行费用（包含人工费、材料费、固定资产折旧费、专有技术及技术资料购置费）、管理费（包含审计费、系统服务费、行政管理费）及维护费（包含纠错性维护费用及适应性维护费用等）。</p>
<p><strong>（2）从财务角度来看，列入IT项目的成本如下：</strong></p>
<p>硬件购置费、软件购置费、人工费、培训费、通信费、基本建设费、财务费用、管理费用、材料费、水电气费、专业技术购置费、其他费用</p>
<h3 id="4-IT项目成本特点"><a href="#4-IT项目成本特点" class="headerlink" title="4. IT项目成本特点"></a>4. IT项目成本特点</h3><ol>
<li>人工成本高。</li>
<li>直接成本低，间接成本高。</li>
<li>维护成本高且较难确定。</li>
<li>成本变动频繁，风险成本高。</li>
</ol>
<h3 id="5-影响IT项目成本的因素"><a href="#5-影响IT项目成本的因素" class="headerlink" title="5. 影响IT项目成本的因素"></a>5. 影响IT项目成本的因素</h3><img src="/2020/04/29/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86%EF%BC%89/1.png" class="">

<ol>
<li>项目质量对成本的影响。</li>
<li>工期对成本的影响。</li>
<li>范围对成本的影响。</li>
<li>管理水平对成本的影响。</li>
<li>人力资源对成本的影响。</li>
<li>价格对成本的影响。</li>
</ol>
<h2 id="6-1-2-项目成本管理过程"><a href="#6-1-2-项目成本管理过程" class="headerlink" title="6.1.2 项目成本管理过程"></a>6.1.2 项目成本管理过程</h2><ol>
<li>项目资源计划</li>
<li>项目成本估算</li>
<li>项目成本预算</li>
<li>项目成本控制</li>
<li>项目成本预测</li>
</ol>
<h1 id="6-2-项目成本估算"><a href="#6-2-项目成本估算" class="headerlink" title="6.2 项目成本估算"></a><span id="2">6.2 项目成本估算</span></h1><h2 id="6-2-1-项目成本估算工程"><a href="#6-2-1-项目成本估算工程" class="headerlink" title="6.2.1 项目成本估算工程"></a>6.2.1 项目成本估算工程</h2><h4 id="1-成本估算的依据"><a href="#1-成本估算的依据" class="headerlink" title="1. 成本估算的依据"></a>1. 成本估算的依据</h4><p>（1）项目范围说明<br>（2）WBS<br>（3）资源需求<br>（4）资源单价<br>（5）分项工作时间<br>（6）历史信息<br>（7）资金成本参数</p>
<h3 id="2-IT项目成本估算方法"><a href="#2-IT项目成本估算方法" class="headerlink" title="2. IT项目成本估算方法"></a>2. IT项目成本估算方法</h3><p>（1）自上而下的估算。<br>（2）自下而上的估算。<br>（3）自上而下和自下而上相结合的成本估算。</p>
<h3 id="3-软件开发项目成本估算过程"><a href="#3-软件开发项目成本估算过程" class="headerlink" title="3. 软件开发项目成本估算过程"></a>3. 软件开发项目成本估算过程</h3><p>开发成本估算过程：</p>
<img src="/2020/04/29/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86%EF%BC%89/2.png" class="">

<h2 id="6-2-2-软件项目成本估算方法"><a href="#6-2-2-软件项目成本估算方法" class="headerlink" title="6.2.2 软件项目成本估算方法"></a>6.2.2 软件项目成本估算方法</h2><h3 id="1-LOC法"><a href="#1-LOC法" class="headerlink" title="1. LOC法"></a>1. LOC法</h3><img src="/2020/04/29/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86%EF%BC%89/3.png" class="">

<h3 id="2-功能点估计法"><a href="#2-功能点估计法" class="headerlink" title="2. 功能点估计法"></a>2. 功能点估计法</h3><ol>
<li>首先确定待开发的程序必须包含的功能（例如，回溯、显示）。</li>
<li>对每一项功能，通过计算4类系统外部行为或事务的数目，以及1类内部逻辑文件的数目来估算由一组需求所表达的功能点数目。<ul>
<li>外部输入。</li>
<li>外部输出。</li>
<li>外部查询。</li>
<li>外部文件。</li>
<li>内部文件。</li>
</ul>
</li>
<li>在估算中对5类功能计数项中的每一类功能计数项按其复杂性的不同分为简单（低）、一般（中）和复杂（高）3个级别。</li>
<li>这一步是要计算项目中14个技术复杂度因子（TCF）。</li>
<li>最后根据功能点计算公式FP=UFC×TCF计算出调整后的功能点总和。</li>
</ol>
<h3 id="3-经验成本估算模型"><a href="#3-经验成本估算模型" class="headerlink" title="3. 经验成本估算模型"></a>3. 经验成本估算模型</h3><ol>
<li><p>SLIM模型。</p>
<p>SLIM基本估算方程（又称为动态变量模型）式为：<img src="/2020/04/29/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86%EF%BC%89/7.png" class=""></p>
</li>
<li><p>COCOMO模型。</p>
</li>
</ol>
<h3 id="4-综合成本估算方法"><a href="#4-综合成本估算方法" class="headerlink" title="4. 综合成本估算方法"></a>4. 综合成本估算方法</h3><ol>
<li>确定代码行</li>
<li>求期望值Le和偏差Ld <img src="/2020/04/29/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86%EF%BC%89/8.png" class=""></li>
<li>根据经验数据，确定各个子功能的代码行成本。</li>
<li>计算各个子功能的成本和工作量，并计算任务的总成本和总工作量。</li>
<li>计算开发时间。</li>
<li>对结果进行分析比较。</li>
</ol>
<h2 id="6-2-3-项目成本估算的结果"><a href="#6-2-3-项目成本估算的结果" class="headerlink" title="6.2.3 项目成本估算的结果"></a>6.2.3 项目成本估算的结果</h2><h3 id="1-项目成本估算文件"><a href="#1-项目成本估算文件" class="headerlink" title="1. 项目成本估算文件"></a>1. 项目成本估算文件</h3><h3 id="2-细节说明文件"><a href="#2-细节说明文件" class="headerlink" title="2. 细节说明文件"></a>2. 细节说明文件</h3><ul>
<li>项目范围的描述。</li>
<li>项目成本估算的基础和依据文件。</li>
<li>项目成本估算各种假定条件的说明文件。</li>
<li>项目成本估算可能出现的变动范围的说明。</li>
</ul>
<h3 id="3-项目成本管理计划"><a href="#3-项目成本管理计划" class="headerlink" title="3. 项目成本管理计划"></a>3. 项目成本管理计划</h3><h1 id="6-3-项目成本预算"><a href="#6-3-项目成本预算" class="headerlink" title="6.3 项目成本预算"></a><span id="3">6.3 项目成本预算</span></h1><h2 id="6-3-1-成本预算概述"><a href="#6-3-1-成本预算概述" class="headerlink" title="6.3.1 成本预算概述"></a>6.3.1 成本预算概述</h2><h3 id="1-项目预算的特征"><a href="#1-项目预算的特征" class="headerlink" title="1. 项目预算的特征"></a>1. 项目预算的特征</h3><ul>
<li>计划性</li>
<li>约束性</li>
<li>控制性</li>
</ul>
<h3 id="2-编制项目成本预算的原则"><a href="#2-编制项目成本预算的原则" class="headerlink" title="2. 编制项目成本预算的原则"></a>2. 编制项目成本预算的原则</h3><ul>
<li>项目成本预算要与项目目标相联系（包括项目质量目标、进度目标）。</li>
<li>项目成本预算要以项目需求为基础。</li>
<li>项目成本预算要切实可行。</li>
<li>项目成本预算应当有一定的弹性。</li>
</ul>
<h3 id="3-不可预见费用分析"><a href="#3-不可预见费用分析" class="headerlink" title="3. 不可预见费用分析"></a>3. 不可预见费用分析</h3><h3 id="4-成本预算的依据和方法"><a href="#4-成本预算的依据和方法" class="headerlink" title="4. 成本预算的依据和方法"></a>4. 成本预算的依据和方法</h3><h2 id="6-3-2-项目成本预算的步骤"><a href="#6-3-2-项目成本预算的步骤" class="headerlink" title="6.3.2 项目成本预算的步骤"></a>6.3.2 项目成本预算的步骤</h2><h3 id="1-分摊总预算成本"><a href="#1-分摊总预算成本" class="headerlink" title="1.分摊总预算成本"></a>1.分摊总预算成本</h3><p>预算总成本分解示意：</p>
<img src="/2020/04/29/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86%EF%BC%89/9.png" class="">

<h3 id="2-制定累计预算成本"><a href="#2-制定累计预算成本" class="headerlink" title="2. 制定累计预算成本"></a>2. 制定累计预算成本</h3><p>项目每天分摊预算与预算累计表：</p>
<img src="/2020/04/29/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86%EF%BC%89/10.png" class="">

<h2 id="6-3-3-成本预算的结果"><a href="#6-3-3-成本预算的结果" class="headerlink" title="6.3.3 成本预算的结果"></a>6.3.3 成本预算的结果</h2><p>在将项目各工作包的成本预算分配到项目工期的各个时段以后，就能确定项目在何时需要多少成本预算和项目从起点开始累计的预算成本了，这是项目资金投入与筹措和项目成本控制的重要依据。</p>
<p>项目成本预算的主要结果是获得基准预算。</p>
<h2 id="6-3-4-项目费用与资源的优化"><a href="#6-3-4-项目费用与资源的优化" class="headerlink" title="6.3.4 项目费用与资源的优化"></a>6.3.4 项目费用与资源的优化</h2><h3 id="1-费用优化"><a href="#1-费用优化" class="headerlink" title="1. 费用优化"></a>1. 费用优化</h3><h3 id="2-资源优化"><a href="#2-资源优化" class="headerlink" title="2. 资源优化"></a>2. 资源优化</h3><p> 资源优化包括：“资源有限—工期最短”和“工期固定—资源均衡”两种。</p>
<h1 id="6-4-成本控制"><a href="#6-4-成本控制" class="headerlink" title="6.4 成本控制"></a><span id="4">6.4 成本控制</span></h1><h2 id="6-4-1-成本控制概述"><a href="#6-4-1-成本控制概述" class="headerlink" title="6.4.1 成本控制概述"></a>6.4.1 成本控制概述</h2><h3 id="1-成本控制的原则"><a href="#1-成本控制的原则" class="headerlink" title="1. 成本控制的原则"></a>1. 成本控制的原则</h3><ol>
<li>节约原则。</li>
<li>经济原则。</li>
<li>责任权利相结合的原则。</li>
<li>全面控制原则。</li>
<li>例外管理的原则。确定“例外”的标准，通常有如下4条：<ol>
<li>重要性</li>
<li>可控性</li>
<li>一贯性</li>
<li>特殊性</li>
</ol>
</li>
</ol>
<h3 id="2-IT项目成本控制的内容"><a href="#2-IT项目成本控制的内容" class="headerlink" title="2. IT项目成本控制的内容"></a>2. IT项目成本控制的内容</h3><p>IT项目成本控制的主要内容包括如下几项：</p>
<ul>
<li>在项目立项前需要对项目的可行性，包括市场情况、实施环境、融资状况、技术条件、人员水平等进行详细的事前研究，而完成这些工作通常需要花费一定的资金，这些资金就构成了项目的决策成本。其预算和管理就构成了决策成本控制。</li>
<li>招投标费用成本控制是指对进行招投标工作时开支的费用进行控制。</li>
<li>设计成本控制是指对项目的各种设计，包括总体设计、技术设计、详细设计等各种设计所需要的费用管理和控制。</li>
<li>项目实施成本控制是指对项目从启动、计划、实施，一直到项目交付收尾整个过程中，涉及的所有费用进行控制和管理的工作。</li>
</ul>
<h3 id="3-成本控制的依据"><a href="#3-成本控制的依据" class="headerlink" title="3. 成本控制的依据"></a>3. 成本控制的依据</h3><p>（1）项目成本基准。<br>（2）项目执行报告。<br>（3）项目变更申请。<br>（4）项目成本管理计划。</p>
<h2 id="6-4-2-项目成本控制方法"><a href="#6-4-2-项目成本控制方法" class="headerlink" title="6.4.2 项目成本控制方法"></a>6.4.2 项目成本控制方法</h2><h3 id="1-项目成本分析表法"><a href="#1-项目成本分析表法" class="headerlink" title="1. 项目成本分析表法"></a>1. 项目成本分析表法</h3><img src="/2020/04/29/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86%EF%BC%89/6.png" class="">

<h3 id="2-挣值分析法（常用）"><a href="#2-挣值分析法（常用）" class="headerlink" title="2. 挣值分析法（常用）"></a>2. 挣值分析法（常用）</h3><h4 id="（1）挣值分析法的3个基本参数："><a href="#（1）挣值分析法的3个基本参数：" class="headerlink" title="（1）挣值分析法的3个基本参数："></a>（1）挣值分析法的3个基本参数：</h4><ul>
<li>计划工作量的预算费用BCWS</li>
<li>已完成工作量的预算实际费用ACWP</li>
<li>已完成工作量的预算成本BCWP（挣值）</li>
</ul>
<p>BCWP的计算公式：<font color="red">BCWP=已完成工作量×预算定额</font></p>
<h4 id="（2）挣值分析法的4个评价指标："><a href="#（2）挣值分析法的4个评价指标：" class="headerlink" title="（2）挣值分析法的4个评价指标："></a>（2）挣值分析法的4个评价指标：</h4><ul>
<li><font color="red">费用偏差CV（Cost Variance）=BCWP-ACWP</font><ul>
<li><font color="blue">Cost Variance：实际完成的工作是否多花了钱</font></li>
<li><img src="/2020/04/29/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86%EF%BC%89/12.png" class=""></li>
</ul>
</li>
<li><font color="red">进度偏差SV（Schedule Variance）=BCWP-BCWS</font><ul>
<li><font color="blue">Schedule Variance：应该完成的任务是否都完成了</font></li>
<li><img src="/2020/04/29/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86%EF%BC%89/13.png" class=""></li>
</ul>
</li>
<li>费用执行指标CPI（Cost Performed Index）=BCWP/ACWP<ul>
<li>CPI&gt;1：低于预算，实际费用低于预算费用</li>
<li>CPI&lt;1：超出预算，实际费用高于预算费用</li>
<li>CPI=1：实际费用与预算费用吻合</li>
</ul>
</li>
<li>进度执行指标SPI（Schedul  Performed  Index）=BCWP/BCWS<ul>
<li>SPI&gt;1：进度提前，实际进度快于预算进度</li>
<li>SPI&lt;1：进度延误，实际进度慢于预算进度</li>
<li>SPI=1：实际进度与计划进度一致</li>
</ul>
</li>
</ul>
<h4 id="（3）挣值分析法评价曲线："><a href="#（3）挣值分析法评价曲线：" class="headerlink" title="（3）挣值分析法评价曲线："></a>（3）挣值分析法评价曲线：</h4><img src="/2020/04/29/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86%EF%BC%89/4.png" class="">

<h4 id="（4）分析与建议："><a href="#（4）分析与建议：" class="headerlink" title="（4）分析与建议："></a>（4）分析与建议：</h4><p>费用超支的原因是多方面的，主要有以下几点：</p>
<ul>
<li>宏观因素</li>
<li>微观因素</li>
<li>内部原因</li>
<li>外部因素</li>
<li>另有技术、经济、管理、合同等方面原因</li>
</ul>
<h4 id="（5）对完工的预测"><a href="#（5）对完工的预测" class="headerlink" title="（5）对完工的预测"></a>（5）对完工的预测</h4><img src="/2020/04/29/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86%EF%BC%89/14.png" class="">

<h3 id="3-成本因素分析法"><a href="#3-成本因素分析法" class="headerlink" title="3. 成本因素分析法"></a>3. 成本因素分析法</h3><p>项目成本构成及直接影响因素分析图：</p>
<img src="/2020/04/29/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86%EF%BC%89/5.png" class="">

<h2 id="6-4-3-成本控制的结果"><a href="#6-4-3-成本控制的结果" class="headerlink" title="6.4.3 成本控制的结果"></a>6.4.3 成本控制的结果</h2><ul>
<li>成本估算更新</li>
<li>成本预算更新</li>
<li>纠正措施</li>
<li>经验教训</li>
</ul>
<h1 id="6-5-项目成本效益分析"><a href="#6-5-项目成本效益分析" class="headerlink" title="6.5 项目成本效益分析"></a>6.5 项目成本效益分析</h1><h2 id="6-5-1-成本效益分析的必要性"><a href="#6-5-1-成本效益分析的必要性" class="headerlink" title="6.5.1 成本效益分析的必要性"></a>6.5.1 成本效益分析的必要性</h2><p>进行项目成本效益分析，有利于组织选择IT项目的投资决策，有利于组织制订IT项目的投资预算计划，有利于获得组织内部的支持。</p>
<h2 id="6-5-2-成本效益分析方法"><a href="#6-5-2-成本效益分析方法" class="headerlink" title="6.5.2 成本效益分析方法"></a>6.5.2 成本效益分析方法</h2><p>（1）资金的时间价值<br>（2）净现值NPV<br>（3）投资收益率ROI<br>（4）投资回收期分析<br>（5）现金流量<br>（6）内部收益率IRR</p>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP（第六章：EL）</title>
    <url>/2020/04/28/JSP%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AEL%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/04/28/JSP（第六章：EL）/#1">1 EL概述</a></p>
<p><a href="/2020/04/28/JSP（第六章：EL）/#2">2 EL运算符</a></p>
<p><a href="/2020/04/28/JSP（第六章：EL）/#3">3 EL的隐含对象</a></p>
<p><a href="/2020/04/28/JSP（第六章：EL）/#4">4 定义和使用EL函数</a></p>
</blockquote>
<p>JSTL(JSP Standard Tag Library) 是JSP标准标签库，不依赖于哪个框架。在Servlet2.4以上容器使用。由两部分组成：标签库+EL表达式(表达式语言)。EL表达式可以单独使用，不用引入任何包，要求容器是2.4以上，JSP2.0支持或J2EE1.4要支持。</p>
<h1 id="1-EL概述"><a href="#1-EL概述" class="headerlink" title="1 EL概述"></a><span id="1">1 EL概述</span></h1><p>EL是表达式语言，通过EL可以简化在JSP开发中对对象的引用。EL为不熟悉Java语言页面开发的人员提供了一个开发Java Web应用的新途径。目的:为了使JSP写起来更加简单。它提供了在 JSP 中简化表达式的方法。</p>
<h2 id="1-1-EL基本的语法"><a href="#1-1-EL基本的语法" class="headerlink" title="1.1 EL基本的语法"></a>1.1 EL基本的语法</h2><p>EL表达式必须以“ ${expression} ”来表示，其中“ expression ”部分就是具体表达式内容，“ ${} ”将这个表达式内容包含在其中作为 EL 表达式的定义。</p>
<p>EL存取变量数据的方法很简单，例如:${username}。它的意思是取出某一范围中名称为username的变量。</p>
<p>因为我们并没有指定哪一个范围的username，所以它会依序从<strong>Page、Request、Session、Application</strong>范围查找。假如途中找到username，就直接回传，不再继续找下去，但是假如全部的范围都没有找到时，就回传null。</p>
<a id="more"></a>

<h2 id="1-2-禁用EL"><a href="#1-2-禁用EL" class="headerlink" title="1.2 禁用EL"></a>1.2 禁用EL</h2><p>如果在使用EL时，其内容没有被正确的解析，而是原样输出到页面，则需要检查一下EL有没有被禁用。</p>
<h3 id="1-2-1-使用斜杆符号"><a href="#1-2-1-使用斜杆符号" class="headerlink" title="1.2.1 使用斜杆符号"></a>1.2.1 使用斜杆符号</h3><p>禁用一个JSP页面中的EL表达式。</p>
<p>使用斜杠符号是一种比较简单的禁用EL的方法。该方法只需要在EL的起始标记 <strong>“${”</strong> 前加上 <strong>“\”</strong> 符号</p>
<p>具体的语法：<font color="red">\${expression}</font></p>
<h3 id="1-2-2-使用page指令"><a href="#1-2-2-使用page指令" class="headerlink" title="1.2.2 使用page指令"></a>1.2.2 使用page指令</h3><p>禁用一个JSP页面中的EL表达式。</p>
<p>使用JSP的page指令也可以禁用EL表达式。</p>
<p>其具体的语法格式：<font color="red"> &lt;%@ page isELIgnored=”布尔值” %&gt;</font></p>
<p><strong>isELIgnored属性：</strong>用于指定是否禁用页面中的EL，如果属性值为<strong>true，则忽略页面中的EL</strong>，否则将解析页面中的EL。</p>
<h3 id="1-2-3-web-xml中配置"><a href="#1-2-3-web-xml中配置" class="headerlink" title="1.2.3 web.xml中配置"></a>1.2.3 web.xml中配置</h3><p>禁用服务器中的EL表达式。</p>
<p>在web.xml文件中配置&lt;el-ignored&gt;元素可以实现禁用服务器中的EL。<br>在web.xml文件中配置&lt;el-ignored&gt;元素的具体代码如下：</p>
<pre><code>&lt;jsp-config&gt;
    &lt;jsp-property-group&gt;
        &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;
        &lt;el-ignored&gt;true&lt;/el-ignored&gt;&lt;!--将此处的值设置为false，表示使用EL--&gt;
    &lt;/jsp-property-group&gt;
&lt;/jsp-config&gt;</code></pre><h2 id="1-3-通过EL访问数据"><a href="#1-3-通过EL访问数据" class="headerlink" title="1.3 通过EL访问数据"></a>1.3 通过EL访问数据</h2><p>通过EL提供的“[]”和“.”运算符可以访问数据。通常情况下，“[]”和“.”运算符是等价的，可以相互代替。</p>
<p>访问JavaBean对象userInfo的id属性，可以写成以下两种形式：</p>
<pre><code>${userInfo.id}
${userInfo[id]}</code></pre><h2 id="1-4-保留关键字"><a href="#1-4-保留关键字" class="headerlink" title="1.4 保留关键字"></a>1.4 保留关键字</h2><img src="/2020/04/28/JSP%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AEL%EF%BC%89/1.png" class="">

<h1 id="2-EL运算符"><a href="#2-EL运算符" class="headerlink" title="2 EL运算符"></a><span id="2">2 EL运算符</span></h1><h2 id="2-1-表达式的运算符"><a href="#2-1-表达式的运算符" class="headerlink" title="2.1 表达式的运算符"></a>2.1 表达式的运算符</h2><h3 id="2-1-1-数组元素的存取"><a href="#2-1-1-数组元素的存取" class="headerlink" title="2.1.1 数组元素的存取"></a>2.1.1 数组元素的存取</h3><pre><code>&lt;%
    String[] citys1={&quot;北京&quot;,&quot;济南&quot;,&quot;长沙&quot;,&quot;成都&quot;}; 
    request.setAttribute(&quot;citys&quot;, citys1);
%&gt;
${requestScope.citys[1]}</code></pre><h3 id="2-1-2-List集合元素的读取"><a href="#2-1-2-List集合元素的读取" class="headerlink" title="2.1.2 List集合元素的读取"></a>2.1.2 List集合元素的读取</h3><pre><code>&lt;%
    List&lt;String&gt; citys2 = new ArrayList&lt;String&gt;();
    citys2.add(&quot;beijing&quot;);
    citys2.add(&quot;jinan&quot;);
    citys2.add(&quot;shanghai&quot;);
    session.setAttribute(&quot;citys&quot;,citys2);
%&gt;
${sessionScope.citys[2]}</code></pre><h3 id="2-1-3-Map集合元素的读取"><a href="#2-1-3-Map集合元素的读取" class="headerlink" title="2.1.3 Map集合元素的读取"></a>2.1.3 Map集合元素的读取</h3><pre><code>&lt;%
    Map&lt;String,String&gt; citys3 = new HashMap&lt;String,String&gt;();
    citys3.put(&quot;1&quot;,&quot;beijing&quot;);
    citys3.put(&quot;2&quot;,&quot;wuhan&quot;);
    citys3.put(&quot;3&quot;,&quot;shanghai&quot;);
    application.setAttribute(&quot;citys&quot;,citys3);
%&gt;
${applicationScope.citys[&quot;2&quot;]}</code></pre><h2 id="2-2-算数运算符"><a href="#2-2-算数运算符" class="headerlink" title="2.2 算数运算符"></a>2.2 算数运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>功能</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加</td>
<td>${19+1}</td>
<td>20</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>${66-30}</td>
<td>36</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>${52.1*10}</td>
<td>521.0</td>
</tr>
<tr>
<td>/或div</td>
<td>除</td>
<td>${5/2}或${5 div 2}</td>
<td>2.5</td>
</tr>
<tr>
<td></td>
<td></td>
<td>${9/0}或${9 div 0}</td>
<td>Infinity无穷</td>
</tr>
<tr>
<td>%或mod</td>
<td>求余</td>
<td>${17%3}或${17 mod 3}</td>
<td>2</td>
</tr>
<tr>
<td></td>
<td></td>
<td>${15%0}或${15 mod 0}</td>
<td>将抛出异常：java.lang.ArithmeticException: / by zero</td>
</tr>
</tbody></table>
<h2 id="2-3-关系和逻辑运算符"><a href="#2-3-关系和逻辑运算符" class="headerlink" title="2.3 关系和逻辑运算符"></a>2.3 关系和逻辑运算符</h2><p>在EL中，通过逻辑运算符和关系运算符可以实现逻辑关系运算。</p>
<p>关系运算符用于实现对两个表达式的比较，进行比较的表达式可以是数值型，也可以是字符串型。</p>
<p>而逻辑运算符，则常用于对boolean型数据进行操作。</p>
<p>逻辑运算符和关系运算符经常一同使用。</p>
<h2 id="2-4-关系运算符"><a href="#2-4-关系运算符" class="headerlink" title="2.4 关系运算符"></a>2.4 关系运算符</h2><img src="/2020/04/28/JSP%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AEL%EF%BC%89/2.png" class="">

<h2 id="2-5-逻辑运算符"><a href="#2-5-逻辑运算符" class="headerlink" title="2.5 逻辑运算符"></a>2.5 逻辑运算符</h2><img src="/2020/04/28/JSP%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AEL%EF%BC%89/3.png" class="">

<h2 id="2-6-条件运算符"><a href="#2-6-条件运算符" class="headerlink" title="2.6 条件运算符"></a>2.6 条件运算符</h2><p>在EL中进行简单的条件运算，可以通过条件运算符实现。EL的条件运算符唯一的优点在于其非常简单和方便，和Java语言里的用法完全一致。</p>
<p>语法格式：<font color="red">${条件表达式 ? 表达式1 : 表达式2}</font></p>
<p>参数：</p>
<ul>
<li>条件表达式：用于指定一个条件表达式，该表达式的值为boolean型。可以由关系运算符、逻辑运算符和empty运算符组成。</li>
<li>表达式1：用于指定当条件表达式的值为<strong>true</strong>时，将要返回的值。</li>
<li>表达式2：用于指定当条件表达式的值为<strong>false</strong>时，将要返回的值。</li>
</ul>
<p>例子：</p>
<pre><code>${applicationScope.citys[&quot;2&quot;]==&quot;wuhan&quot;?&quot;ok&quot;:&quot;error&quot;}</code></pre><h2 id="2-7-在EL中判断对象中是否为空"><a href="#2-7-在EL中判断对象中是否为空" class="headerlink" title="2.7 在EL中判断对象中是否为空"></a>2.7 在EL中判断对象中是否为空</h2><p>在EL中，判断对象是否为空，可以通过empty运算符实现，该运算符是一个前缀（prefix）运算符，即empty运算符位于操作数前方，用来确定一个对象或变量是否为null或空。</p>
<p>empty运算符的格式：<font color="red">${empty expression}</font></p>
<p>参数说明：</p>
<ul>
<li>expression：用于指定要判断的变量或对象。</li>
</ul>
<h1 id="3-EL的隐含对象"><a href="#3-EL的隐含对象" class="headerlink" title="3 EL的隐含对象"></a><span id="3">3 EL的隐含对象</span></h1><h2 id="3-1-pageContext对象"><a href="#3-1-pageContext对象" class="headerlink" title="3.1 pageContext对象"></a>3.1 pageContext对象</h2><p>等价于 page 环境类 javax.servlet.jsp.PageContext 的实例，用来提供访问不同的请求参数。</p>
<p>页面上下文对象为pageContext，用于访问JSP内置对象（例如request、response、out、session、exception、page等，但不能用于获取<font color="red">application、config和pageContext对象</font>）和servletContext。</p>
<p>在获取到这些内置对象后，就可以获取其属性值。这些属性与对象的getXXX()方法相对应，在使用时，<font color="red">去掉方法名中的get，并将首字母改为小字即可。 </font></p>
<p>例子：</p>
<pre><code>${pageContext.request.serverPort}
${pageContext.response.contentType}
${pageContext.out.bufferSize}
${pageContext.session.maxInactiveInterval}
${pageContext.servletContext.contextPath}</code></pre><h2 id="3-2-访问环境信息的隐含对象"><a href="#3-2-访问环境信息的隐含对象" class="headerlink" title="3.2 访问环境信息的隐含对象"></a>3.2 访问环境信息的隐含对象</h2><h3 id="3-2-1-默认变量-param-、-paramValues"><a href="#3-2-1-默认变量-param-、-paramValues" class="headerlink" title="3.2.1 默认变量 param 、 paramValues"></a>3.2.1 默认变量 param 、 paramValues</h3><p>param 、 paramValues：这两个默认变量包含请求参数的集合， param 表明请求包含的参数为<font color="red">单一控件</font>， paramValues 表明请求包含的参数为<font color="red">控件数组</font>。</p>
<p>例子：提交请求的页面和接受的页面</p>
<pre><code class="jsp">&lt;%@ page contentType=&quot;text/html; charset=UTF-8&quot;%&gt; 
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt; 
&lt;html&gt; 
  &lt;body&gt; 
     &lt;form action=&quot;SampleJsp.jsp&quot;&gt; 
     &lt;input type=&quot;text&quot; name=&quot;sampleValue&quot; value=&quot;10&quot;&gt; 
     &lt;input type=&quot;text&quot; name=&quot;sampleValue&quot; value=&quot;11&quot;&gt; 
     &lt;input type=&quot;text&quot; name=&quot;sampleValue&quot; value=&quot;12&quot;&gt; 
     &lt;input type=&quot;text&quot; name=&quot;sampleSingleValue&quot; value=&quot;SingleValue&quot;&gt; 
     &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt; 
     &lt;/form&gt; 
  &lt;/body&gt; 
 &lt;/html&gt;</code></pre>
<p>在这个页面中定义了两组控件，控件名为“ sampleValue ”的是一套控件数组，控件名为“ sampleSingleValue ”的是单一控件，通过递交将请求参数传送到 SampleJsp.jsp</p>
<pre><code class="jsp">&lt;%@ page contentType=&quot;text/html; charset=UTF-8&quot;%&gt; 
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt; 
&lt;html&gt; 
  &lt;body&gt; 
     ${paramValues.sampleValue[2]} &lt;br&gt; 
     ${param.sampleSingleValue} &lt;br&gt; 
  &lt;/body&gt; 
&lt;/html&gt;</code></pre>
<p>这是请求转发到的页面，通过 EL 表达式的 paramValues 变量得到控件数组中最后一个控件的递交参数，通过 EL 表达式的 param 变量得到单一控件的递交参数。控件数组参数的 EL 表达式使用“ [] ”来指定数组下标。</p>
<p>【结果：】本示例将显示控件数组中最后一个控件的值“ 12 ”和单一控件的值“ SingleValue ”。</p>
<h3 id="3-2-2-默认变量-header-、-headerValues"><a href="#3-2-2-默认变量-header-、-headerValues" class="headerlink" title="3.2.2 默认变量 header 、 headerValues"></a>3.2.2 默认变量 header 、 headerValues</h3><p>header 、 headerValues：这两个默认变量包含请求参数头部信息的集合， header 变量表示单一头部信息， headerValues 则表示数组型的头部信息。</p>
<h3 id="3-2-3-默认变量-initParam"><a href="#3-2-3-默认变量-initParam" class="headerlink" title="3.2.3 默认变量 initParam"></a>3.2.3 默认变量 initParam</h3><p>包含所有应用程序初始化参数的集合。<br><strong>${initParam.参数名}</strong></p>
<h3 id="3-2-4-默认变量-cookie"><a href="#3-2-4-默认变量-cookie" class="headerlink" title="3.2.4 默认变量 cookie"></a>3.2.4 默认变量 cookie</h3><p>包含所有请求的 cookie 集合，集合中的每个对象对应 javax.servlet.http.Cookie 。<br><strong>${cookie.<font color="red">cookie的key.value</font>}</strong></p>
<h2 id="3-3-访问作用域范围的隐含对象"><a href="#3-3-访问作用域范围的隐含对象" class="headerlink" title="3.3 访问作用域范围的隐含对象"></a>3.3 访问作用域范围的隐含对象</h2><p>在EL中提供了4个用于访问作用域范围的隐含对象，即pageScope、requestScope、sessionScope和applicationScope。</p>
<p>例子1：</p>
<pre><code>&lt;jsp:useBean id=&quot;produce&quot; class=&quot;com.lyq.bean.Produce&quot; scope=&quot;page&quot;&gt;&lt;/jsp:useBean&gt;
&lt;jsp:setProperty property=&quot;*&quot; name=&quot;produce&quot; /&gt;

${pageScope.produce.name}
${pageScope.produce.price}
${pageScope.produce.count}
${pageScope.produce.factoryAdd}</code></pre><p>例子2：</p>
<pre><code>&lt;%request.setAttribute(&quot;username&quot;,&quot;mr&quot;); %&gt;

${requestScope.username}</code></pre><p>例子3：</p>
<pre><code>&lt;%session.setAttribute(&quot;username&quot;,&quot;mr&quot;); %&gt;

${sessionScope.username}</code></pre><p>例子4：</p>
<pre><code>&lt;%application.setAttribute(&quot;username&quot;,&quot;mr&quot;); %&gt;

${applicationScope.username}</code></pre><h1 id="4-定义和使用EL函数"><a href="#4-定义和使用EL函数" class="headerlink" title="4 定义和使用EL函数"></a><span id="4">4 定义和使用EL函数</span></h1><p>函数的定义和使用分为以下3个步骤：</p>
<ol>
<li>编写一个Java类，并在该类中编写<strong>公用的静态方法</strong>，用于实现自定义EL函数的具体功能。</li>
<li>编写标签库描述文件，对函数进行声明。该文件的扩展名为<strong>.tld</strong>，被保存到Web应用的WEB-INF文件夹下。</li>
<li>在JSP页面中引用标签库，并调用定义的EL函数，实现相应的功能。</li>
</ol>
<p>例子：</p>
<p>【新建ChangeMethod类】</p>
<pre><code class="java">package com.itzcn.method;

public class ChangeMethod {
    public static String toUpper(String param){
        return param.toUpperCase();
    }
    public static String toLower(String param){
        return param.toLowerCase();
    }
}</code></pre>
<p>【在WEB-INF下新建function.tld文件】</p>
<img src="/2020/04/28/JSP%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AEL%EF%BC%89/4.png" class="">

<pre><code class="jsp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;taglib version=&quot;2.0&quot; &gt;
&lt;tlib-version&gt;1.0&lt;/tlib-version&gt;
&lt;jsp-version&gt;1.2&lt;/jsp-version&gt;
&lt;short-name&gt;fn&lt;/short-name&gt;

&lt;function&gt;
     &lt;name&gt;toUpper&lt;/name&gt;
     &lt;function-class&gt;com.itzcn.method.ChangeMethod&lt;/function-class&gt;
     &lt;function-signature&gt;java.lang.String toUpper(java.lang.String)&lt;/function-signature&gt;
&lt;/function&gt;

&lt;function&gt;
    &lt;name&gt;toLower&lt;/name&gt;
    &lt;function-class&gt;com.itzcn.method.ChangeMethod&lt;/function-class&gt;
    &lt;function-signature&gt;java.lang.String toLower(java.lang.String)&lt;/function-signature&gt;
&lt;/function&gt;
&lt;/taglib&gt;</code></pre>
<p>【index.jsp】</p>
<pre><code class="jsp">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%@taglib prefix=&quot;fn&quot; uri=&quot;/WEB-INF/function.tld&quot; %&gt;&lt;!-- 与 上面的.tld文件对应--&gt;
&lt;%
String path = request.getContextPath();
String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;
%&gt;
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;base href=&quot;&lt;%=basePath%&gt;&quot;&gt;

    &lt;title&gt;My JSP &#39;index.jsp&#39; starting page&lt;/title&gt;
    &lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;
    &lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;
    &lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;    
    &lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&gt;
    &lt;meta http-equiv=&quot;description&quot; content=&quot;This is my page&quot;&gt;
    &lt;!--
    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot;&gt;
    --&gt;
  &lt;/head&gt;

  &lt;body&gt;
  &lt;form action=&quot;index.jsp&quot; method=&quot;post&quot;&gt;
  &lt;input type=&quot;text&quot; name=&quot;ss&quot;&gt;
  &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;提交&quot;&gt;
  &lt;/form&gt;    
  &lt;%request.setCharacterEncoding(&quot;UTF-8&quot;); %&gt;

  ${param.ss}
  ${fn:toUpper(param.ss)}
  ${fn:toLower(param.ss)}
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>【结果：】</p>
<img src="/2020/04/28/JSP%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9AEL%EF%BC%89/5.png" class="">]]></content>
      <categories>
        <category>JSP</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP（第五章：Servlet）</title>
    <url>/2020/04/27/JSP%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AServlet%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/04/27/JSP（第五章：Servlet）/#1">1 Servlet基础</a></p>
<p><a href="/2020/04/27/JSP（第五章：Servlet）/#2">2 Servlet技术开发</a></p>
<p><a href="/2020/04/27/JSP（第五章：Servlet）/#3">3 Servlet的典型应用</a></p>
<p><a href="/2020/04/27/JSP（第五章：Servlet）/#4">4 Servlet例子</a></p>
<p><a href="/2020/04/27/JSP（第五章：Servlet）/#5">5 Servlet过滤器</a></p>
</blockquote>
<h1 id="1-Servlet基础"><a href="#1-Servlet基础" class="headerlink" title="1 Servlet基础"></a><span id="1">1 Servlet基础</span></h1><p>Servlet是按照Servlet规范编写的Java类，使用Java Servlet接口(API)，它可以处理Web应用中的相关请求。<br>Servlet是一种服务器端的Java应用程序，它的功能就是处理客户端请求，并做出响应。</p>
<h2 id="1-1-model-2-模式"><a href="#1-1-model-2-模式" class="headerlink" title="1.1 model 2 模式"></a>1.1 model 2 模式</h2><p>model 2 模式=JSP+Servlet+JavaBean</p>
<ul>
<li>Controller：应用程序中用户交互部分（Servlet）</li>
<li>Model：应用程序数据逻辑部分（JavaBeans）</li>
<li>View：数据显示部分（JSP）</li>
</ul>
<a id="more"></a>

<img src="/2020/04/27/JSP%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AServlet%EF%BC%89/1.png" class="">

<img src="/2020/04/27/JSP%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AServlet%EF%BC%89/2.png" class="">

<p>优点——职责清晰，较适合于大型项目架构</p>
<p>缺点——分层较多，不适合小型项目开发</p>
<h2 id="1-2-Servlet的功能"><a href="#1-2-Servlet的功能" class="headerlink" title="1.2 Servlet的功能"></a>1.2 Servlet的功能</h2><ol>
<li>创建并返回动态JSP页面</li>
<li>创建HTML或JSP中的片段</li>
<li>与服务器资源通信</li>
<li>处理多个客户的请求</li>
<li>图像转换</li>
<li>用户合法性认证</li>
</ol>
<h2 id="1-3-Servlet的特点"><a href="#1-3-Servlet的特点" class="headerlink" title="1.3 Servlet的特点"></a>1.3 Servlet的特点</h2><ol>
<li>可移植性</li>
<li>功能强大</li>
<li>性能高</li>
<li>安全性</li>
<li>效率</li>
<li>节省投资</li>
<li>灵活性和扩张扩展性</li>
</ol>
<h2 id="1-4-Servlet的生命周期"><a href="#1-4-Servlet的生命周期" class="headerlink" title="1.4 Servlet的生命周期"></a>1.4 Servlet的生命周期</h2><img src="/2020/04/27/JSP%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AServlet%EF%BC%89/3.png" class="">

<p>Servlet的生命周期分为三个阶段。</p>
<h3 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h3><p>init()方法：创建和初始化它在处理请求时需要用到的资源。</p>
<p>Tomcat服务器会装入Servlet:</p>
<ol>
<li>可以配置启动服务器时自动装入Servlet</li>
<li>客户机首次向Servlet发出请求，创建一个Servlet实例，调用init()方法</li>
</ol>
<p><strong>仅执行一次，以后就不再执行。</strong></p>
<h3 id="2-处理请求"><a href="#2-处理请求" class="headerlink" title="2.处理请求"></a>2.处理请求</h3><p>service()方法，从请求对象获得请求信息，处理该请求并用响应对象的方法将响应传回客户机。<br>对于到达服务器的客户机请求，服务器创建特定于请求的一个请求对象和一个响应对象。<br>service()方法可以调用doGet()或者doPost()等方法来处理请求。</p>
<h3 id="3-终止"><a href="#3-终止" class="headerlink" title="3.终止"></a>3.终止</h3><p>destroy()方法标志Servlet生命周期的结束。仅执行一次。</p>
<img src="/2020/04/27/JSP%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AServlet%EF%BC%89/4.png" class="">

<h1 id="2-Servlet技术开发"><a href="#2-Servlet技术开发" class="headerlink" title="2 Servlet技术开发"></a><span id="2">2 Servlet技术开发</span></h1><h2 id="2-1-Servlet核心"><a href="#2-1-Servlet核心" class="headerlink" title="2.1 Servlet核心"></a>2.1 Servlet核心</h2><img src="/2020/04/27/JSP%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AServlet%EF%BC%89/5.png" class="">

<p>HttpServlet是GenericServlet的子类，所以从HttpServlet继承最合适。<br>HttpServlet为Servlet做出实现，并提供了Http请求的处理方法。</p>
<h3 id="2-1-1-Servlet接口"><a href="#2-1-1-Servlet接口" class="headerlink" title="2.1.1 Servlet接口"></a>2.1.1 Servlet接口</h3><ol>
<li>init()：初始化Servlet类</li>
<li>service()：响应客户端请求</li>
<li>destroy()：摧毁Servlet实例以便收回占有的资源</li>
</ol>
<h3 id="2-1-2-HttpServletRequest接口"><a href="#2-1-2-HttpServletRequest接口" class="headerlink" title="2.1.2 HttpServletRequest接口"></a>2.1.2 HttpServletRequest接口</h3><ol>
<li>getContextPath()：返回上下文路径。</li>
<li>getCookies()：返回HTTP请求中的所有的Cookie。</li>
<li>getMethod()：返回HTTP请求方式，如post，或get。</li>
<li>getQueryString()：返回HTTP请求中的查询字符串。</li>
<li>getRequestURI()：返回主机名到请求参数之间部分的字符串。</li>
</ol>
<h3 id="2-1-3-HttpServletResponse接口"><a href="#2-1-3-HttpServletResponse接口" class="headerlink" title="2.1.3 HttpServletResponse接口"></a>2.1.3 HttpServletResponse接口</h3><ol>
<li>addCookie(Cookie)：增加一个cookie到响应中</li>
<li>sendRedirect()：重定向</li>
<li>sendError()：向客户端发送错误信息</li>
</ol>
<h3 id="2-1-4-HttpServlet抽象类"><a href="#2-1-4-HttpServlet抽象类" class="headerlink" title="2.1.4 HttpServlet抽象类"></a>2.1.4 HttpServlet抽象类</h3><ol>
<li>一般通过继承HttpServlet抽象类重写它的doGet()和doPost()方法就可以实现自己的Servlet。</li>
</ol>
<blockquote>
<p> HttpServletRequest：封装了客户端到服务器端一系列的请求。<br>HttpServletResponse：封装了服务器端返回给客户端的对象。</p>
</blockquote>
<h2 id="2-2-Servlet的配置问题"><a href="#2-2-Servlet的配置问题" class="headerlink" title="2.2 Servlet的配置问题"></a>2.2 Servlet的配置问题</h2><ol>
<li>web.xml中配置servlet是Servlet 3.0之前的配置方式</li>
<li>Servlet 3.0可以通过注解方式配置</li>
</ol>
<p>开发Servlet3的程序需要一定的环境支持。Servlet3是Java EE6规范的一部分，MyEclipse10和Tomcat7都提供了对Java EE6规范的支持。<br>Tomcat需要Tomcat7才支持Java EE6，Tomcat7需要使用JDK6。</p>
<h2 id="2-3-表单的action属性设置"><a href="#2-3-表单的action属性设置" class="headerlink" title="2.3 表单的action属性设置"></a>2.3 表单的action属性设置</h2><p><strong>第一种方式——绝对路径</strong><br>action=”/ch6_example4/AddServlet”<br>ch6_example4为工程名<br><strong>第二种方式——绝对路径</strong><br>action=”&lt;%=request.getContextPath()%&gt;/AddServlet”<br><strong>第三种方式——相对路径</strong><br>action=”my/HelloWorldServlet”<br>/my/HelloWorldServlet<br>注意：AddServlet前不要加/<br>因为/代表根目录，加/后对于Tomcat而言代表webApps那个目录，没有项目名</p>
<h1 id="3-Servlet的典型应用"><a href="#3-Servlet的典型应用" class="headerlink" title="3 Servlet的典型应用"></a><span id="3">3 Servlet的典型应用</span></h1><h2 id="3-1-读取表单数据"><a href="#3-1-读取表单数据" class="headerlink" title="3.1 读取表单数据"></a>3.1 读取表单数据</h2><p>getParameter()——获取到客户端通过表单或url请求参数发送过来的参数值<br>getParameterValues()——如果参数出现一次以上，则调用该方法，并返回多个值，如复选框<br>getParameterNames()——如果想要得到当前请求中的所有参数的完成列表，则调用该方法<br>getParameterMap()——将参数封装成Map类型</p>
<h2 id="3-2-实现页面转发"><a href="#3-2-实现页面转发" class="headerlink" title="3.2 实现页面转发"></a>3.2 实现页面转发</h2><p><strong>RequestDispatcher接口：</strong></p>
<p><strong>forward(ServletRequest,ServletResponse)</strong>——用于将Servlet传递给服务器上另外的Servlet、JSP页面或者HTML文件。再forward()方法调用之后，原来在响应缓存中的没有提交的内容自动清除！<font color="red">原来的Servlet终止！</font></p>
<p><strong>include(ServletRequest,ServletResponse)</strong>——与forward()方法一样，但Servlet对该请求做出的响应将进入原来的响应对象中，<font color="red">原来的Servlet还可以继续输出响应信息</font>。</p>
<h2 id="3-3-读取当前页面的绝对路径"><a href="#3-3-读取当前页面的绝对路径" class="headerlink" title="3.3 读取当前页面的绝对路径"></a>3.3 读取当前页面的绝对路径</h2><pre><code class="java">PrintWriter out = response.getWriter();
ServletContext context=this.getServletContext();
out.println(&quot;真实路径为：&quot;+context.getRealPath(&quot;&quot;));
【输出为：】
C:\Users\Administrator\Workspaces\MyEclipse 2016 CI\.metadata\.me_tcat7\webapps\ch6_example5
</code></pre>
<h2 id="3-4-Servlet操作Cookie"><a href="#3-4-Servlet操作Cookie" class="headerlink" title="3.4 Servlet操作Cookie"></a>3.4 Servlet操作Cookie</h2><p>Cookie是由服务器端生成，发送给<strong>浏览器</strong>，浏览器会将Cookie的key/value保存到某个目录下的<font color="red"><strong>文本文件</strong></font>内，下次请求同一网站时就发送该Cookie给<strong>服务器</strong>（前提是浏览器设置为启用cookie）。</p>
<p><font color="red">Cookie:服务器端写到客户端的文本信息，是以<strong>名-值-对</strong>的形式。</font></p>
<p>服务器可以利用Cookies包含信息的任意性来筛选并经常性维护这些信息，以判断在HTTP传输中的状态。Cookies最典型的应用是判定注册用户是否已经登录网站，用户可能会得到提示，是否在下一次进入此网站时保留用户信息以便简化登录手续，这些都是Cookies的功用。另一个重要应用场合是“购物车”之类处理。用户可能会在一段时间内在同一家网站的不同页面中选择不同的商品，这些信息都会写入Cookies，以便在最后付款时提取信息。</p>
<p>注意HTTP协议是无连接的，含义就是当客户端从服务器端得到某个文件的内容时，连接就会中断，相当于socket的close方法。但是考虑购物网站，当你在一个页面购买了东西，连接就断了，当你又访问另外一个页面去结账时，这时就不知道购买的东西是什么了。这时的解决办法就是cookie。也就是当你购买了某种商品后，服务器就在客户端记录下相应的信息来，这就是cookie。<br><strong>但是要遵循两个原则：<br>(1)只允许写文本文档，不允许写其他类型的文件，避免那些恶意的程序。<br>(2)客户端可以阻止服务器写入。</strong></p>
<h1 id="4-Servlet例子"><a href="#4-Servlet例子" class="headerlink" title="4 Servlet例子"></a><span id="4">4 Servlet例子</span></h1><h2 id="4-1【User-java】"><a href="#4-1【User-java】" class="headerlink" title="4.1【User.java】"></a>4.1【User.java】</h2><pre><code class="java">package my.bean;

public class User {
    private String name;
    private int age;
    private String sex;
    private String address;
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public int getAge() {
        return age;
    }
    public void setAge(int age) {
        this.age = age;
    }
    public String getSex() {
        return sex;
    }
    public void setSex(String sex) {
        this.sex = sex;
    }
    public String getAddress() {
        return address;
    }
    public void setAddress(String address) {
        this.address = address;
    }

}</code></pre>
<h2 id="4-2【AddServlet-java】"><a href="#4-2【AddServlet-java】" class="headerlink" title="4.2【AddServlet.java】"></a>4.2【AddServlet.java】</h2><pre><code class="java">package my.servlet;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import my.bean.User;

/**
 * Servlet implementation class AddServlet
 */
@WebServlet(&quot;/AddServlet&quot;)
public class AddServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    /**
     * @see HttpServlet#HttpServlet()
     */
    public AddServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

    /**
     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // TODO Auto-generated method stub
        response.getWriter().append(&quot;Served at: &quot;).append(request.getContextPath());
    }

    /**
     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        request.setCharacterEncoding(&quot;UTF-8&quot;);
        response.setContentType(&quot;text/html&quot;);

        String name=request.getParameter(&quot;name&quot;);
        String ageStr=request.getParameter(&quot;age&quot;);
        String sex=request.getParameter(&quot;sex&quot;);
        String address=request.getParameter(&quot;address&quot;);

        String regex=&quot;^\\+?[1-9][0-9]*$&quot;;
        int age=0;
        if(ageStr.matches(regex)) {//判断是否满足正则表达式
            age=Integer.parseInt(ageStr);
        }

        User user=new User();
        user.setName(name);
        user.setAge(age);
        user.setSex(sex);
        user.setAddress(address);

        ServletContext application=getServletContext();

        List&lt;User&gt; lt=(List&lt;User&gt;)application.getAttribute(&quot;users&quot;);
        if(lt==null) {
            lt=new ArrayList&lt;User&gt;();
        }
        lt.add(user);
        application.setAttribute(&quot;users&quot;, lt);

        //转发
        request.getRequestDispatcher(&quot;/list.jsp&quot;).forward(request, response);
    }
}</code></pre>
<h2 id="4-3【index-jsp】"><a href="#4-3【index-jsp】" class="headerlink" title="4.3【index.jsp】"></a>4.3【index.jsp】</h2><pre><code class="jsp">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action=&quot;AddServlet&quot; method=&quot;post&quot;&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td&gt;姓名&lt;/td&gt;
                &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;年龄&lt;/td&gt;
                &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;age&quot;&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;性别&lt;/td&gt;
                &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot; checked=&quot;checked&quot;&gt;男&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot;&gt;女&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;地址&lt;/td&gt;
                &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;address&quot;&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;添加&quot;&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<h2 id="4-4【list-jsp】"><a href="#4-4【list-jsp】" class="headerlink" title="4.4【list.jsp】"></a>4.4【list.jsp】</h2><pre><code class="jsp">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%@ page import=&quot;java.util.*,my.bean.*&quot; %&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;table border=&quot;1&quot;&gt;
    &lt;% List &lt;User&gt; lt=(List&lt;User&gt;)application.getAttribute(&quot;users&quot;);%&gt;
        &lt;% if(lt!=null){ 
            for(User user:lt){ %&gt;
                &lt;tr&gt;
                    &lt;td&gt;&lt;%=user.getName() %&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;%=user.getSex() %&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;%=user.getAge() %&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;%=user.getAddress() %&gt;&lt;/td&gt;
                &lt;/tr&gt;
    &lt;% }} %&gt;
    &lt;/table&gt;
&lt;//body&gt;
&lt;/html&gt;</code></pre>
<h2 id="4-5-效果图"><a href="#4-5-效果图" class="headerlink" title="4.5 效果图"></a>4.5 效果图</h2><img src="/2020/04/27/JSP%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AServlet%EF%BC%89/6.png" class="">

<p>服务器不关闭，可以一直添加信心。</p>
<h1 id="5-Servlet过滤器"><a href="#5-Servlet过滤器" class="headerlink" title="5 Servlet过滤器"></a><span id="5">5 Servlet过滤器</span></h1><h2 id="5-1-过滤器简介"><a href="#5-1-过滤器简介" class="headerlink" title="5.1 过滤器简介"></a>5.1 过滤器简介</h2><p>Servlet过滤器与Servlet十分相似，但它具有拦截客户端（浏览器）请求的功能，Servlet过滤器可以改变请求中的内容，来满足实际开发中的需要。对于程序开发人员而言，过滤器实质就是在Web应用服务器上的一个Web应用组件，用于<strong>拦截客户端</strong>（浏览器）与<strong>目标资源的请求</strong>，并对这些请求进行一定过滤处理再发送给目标资源，过滤器的处理方式如下图所示。</p>
<img src="/2020/04/27/JSP%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AServlet%EF%BC%89/7.png" class="">

<h2 id="5-2-过滤器的核心对象"><a href="#5-2-过滤器的核心对象" class="headerlink" title="5.2 过滤器的核心对象"></a>5.2 过滤器的核心对象</h2><p>过滤器对象放置在javax.servlet包中，其名称为<strong>Filter</strong>，它是一个接口。除这个接口外，与过滤器相关的对象还有<strong>FilterConfig对象</strong>与<strong>FilterChain对象</strong>，这两个对象也同样是接口对象，位于javax.servlet包中，分别为过滤器的配置对象与过滤器的传递工具。</p>
<img src="/2020/04/27/JSP%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AServlet%EF%BC%89/8.png" class="">

<p>创建一个过滤器对象需要实现javax.servlet.Filter接口，同时实现Filter接口的三个方法。</p>
<h2 id="5-3-过滤器应用"><a href="#5-3-过滤器应用" class="headerlink" title="5.3 过滤器应用"></a>5.3 过滤器应用</h2><h3 id="1-字符编码过滤器（注解方式）"><a href="#1-字符编码过滤器（注解方式）" class="headerlink" title="1.字符编码过滤器（注解方式）"></a>1.字符编码过滤器（注解方式）</h3><pre><code class="java">package my.pack;
import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;

// 字符编码过滤器
@WebFilter(filterName=&quot;AMyFilter&quot;,urlPatterns = &quot;/*&quot;)//urlPatterns指定过滤器对谁起作用，/*表示全部
//@WebInitParam指定初始化的参数
public class MyCharactorFilter implements Filter {
    // 字符编码
    public  void destroy() {
    }
    public void doFilter(ServletRequest request, ServletResponse response,
            FilterChain chain) throws IOException, ServletException {
        // 设置request的编码格式    
        request.setCharacterEncoding(&quot;utf-8&quot;);
        response.setContentType(&quot;text/html&quot;);

        System.out.println(&quot;类名：MyCharactorFilter=注释名：AMyFilter&quot;);
        // 传递给下一过滤器
        chain.doFilter(request, response);    
    }
    public void init(FilterConfig filterConfig) throws ServletException {
    }
}</code></pre>
<h3 id="2-记录访客数量（注解方式）"><a href="#2-记录访客数量（注解方式）" class="headerlink" title="2.记录访客数量（注解方式）"></a>2.记录访客数量（注解方式）</h3><h4 id="2-1【CountFilter-java】"><a href="#2-1【CountFilter-java】" class="headerlink" title="2.1【CountFilter.java】"></a>2.1【CountFilter.java】</h4><pre><code class="java">package my.pack;

import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.annotation.WebInitParam;
import javax.servlet.http.HttpServletRequest;
@WebFilter(filterName = &quot;BMyFilter&quot;, urlPatterns = &quot;/*&quot;,//urlPatterns指定过滤器对谁起作用，/*表示全部
initParams = {@WebInitParam(name = &quot;count&quot;,value=&quot;10000&quot;)})
//@WebInitParam指定初始化的参数
public class CountFilter implements Filter{

    //来访数量
    private int count;

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        //获取初始化参数
        String param=filterConfig.getInitParameter(&quot;count&quot;);
        //将字符串转换为int
        count=Integer.valueOf(param);
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse resoinse, FilterChain chain)
            throws IOException, ServletException {
        //访问数量自增
        count++;
        //将ServletRequest转换成HttpServletReuqest
        HttpServletRequest req =(HttpServletRequest) request;
        //获取ServletContext的全局对象
        ServletContext context=req.getServletContext();
        //将来访数量放入到ServletContext中
        context.setAttribute(&quot;count&quot;, count);

        System.out.println(&quot;类名：CountFilter=注解名：BMyFilter&quot;);

        //向下传递过滤器（！必须写！）
        chain.doFilter(request, resoinse);    
    }    
}</code></pre>
<h4 id="2-2【index-jsp】"><a href="#2-2【index-jsp】" class="headerlink" title="2.2【index.jsp】"></a>2.2【index.jsp】</h4><pre><code class="jsp">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h2&gt;
        欢迎光临,&lt;br&gt;
        您是本站的第【&lt;%=application.getAttribute(&quot;count&quot;) %&gt;】为访客！
    &lt;/h2&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<h4 id="2-3-效果图"><a href="#2-3-效果图" class="headerlink" title="2.3 效果图"></a>2.3 效果图</h4><img src="/2020/04/27/JSP%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AServlet%EF%BC%89/9.png" class="">

<p>刷新页面数字+1</p>
<h2 id="5-4-过滤器执行顺序"><a href="#5-4-过滤器执行顺序" class="headerlink" title="5.4 过滤器执行顺序"></a>5.4 过滤器执行顺序</h2><p><font color="red">过滤器运行顺序是按照 <strong>过滤器类名</strong> 的次序</font>，并且注释名不能决定。</p>
<img src="/2020/04/27/JSP%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AServlet%EF%BC%89/10.png" class="">]]></content>
      <categories>
        <category>JSP</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP（第四章：JavaBean）</title>
    <url>/2020/04/27/JSP%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9AJavaBean%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/04/27/JSP（第四章：JavaBean）/#1">1 JavaBean概述</a></p>
<p><a href="/2020/04/27/JSP（第四章：JavaBean）/#2">2 JavaBean种类</a></p>
<p><a href="/2020/04/27/JSP（第四章：JavaBean）/#3">3 获取JavaBean属性信息</a></p>
</blockquote>
<h1 id="1-JavaBean概述"><a href="#1-JavaBean概述" class="headerlink" title="1 JavaBean概述"></a><span id="1">1 JavaBean概述</span></h1><p>纯JSP开发模式：</p>
<img src="/2020/04/27/JSP%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9AJavaBean%EF%BC%89/1.png" class="">

<p>JSP+JavaBean开发模式：</p>
<img src="/2020/04/27/JSP%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9AJavaBean%EF%BC%89/2.png" class="">

<a id="more"></a>

<h1 id="2-JavaBean种类"><a href="#2-JavaBean种类" class="headerlink" title="2 JavaBean种类"></a><span id="2">2 JavaBean种类</span></h1><p>JavaBean : 支持组件的功能。Java中的组件叫JavaBean。Java(咖啡)Bean(豆)。狭义的JavaBean是具有一个界面形式的体现；广义的JavaBean是普通的Java类。<br>满足两点要求：<br>（1）属性名第一个字母都是小写的，private的；<br>（2）一般具有getters和setters方法。<br>原因就是符合面向对象的特性，所以属性是私有的，别人不能访问，从而隐藏细节。Getters是读取属性的值，setters是修改属性的值。<br>一般web中使用的JavaBean不具有图形界面的表现，一般是用来实现某一业务逻辑或者取得特定结果。</p>
<h2 id="2-1-例：封装邮箱地址的JavaBean"><a href="#2-1-例：封装邮箱地址的JavaBean" class="headerlink" title="2.1 例：封装邮箱地址的JavaBean"></a>2.1 例：封装邮箱地址的JavaBean</h2><p>【Email.java】</p>
<pre><code class="java">package com.lyq.bean;

import java.io.Serializable;

public class Email implements Serializable {
    //  serialVersionUID 值
    private static final long serialVersionUID = 1L;
    // Email地址
    private String mailAdd;
    // 是否是一个标准的Email地址
    private boolean eamil;
    /**
     * 默认无参的构造方法
     */
    public Email() {
    }
    /**
     * 构造方法
     * @param mailAdd Email地址
     */
    public Email(String mailAdd) {
        this.mailAdd = mailAdd;
    }
    /**
     * 是否是一个标准的Email地址
     * @return 布尔值
     */
    public boolean isEamil() {
        // 正则表达式，定义邮箱格式
        String regex = &quot;\\w+([-+.&#39;]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*&quot;; 
        // matches()方法可判断字符串是否与正则表达式匹配
        if (mailAdd.matches(regex)) { 
            // eamil为真
            eamil = true;
        }
        // 返回eamil
        return eamil;
    }
    public String getMailAdd() {
        return mailAdd;
    }
    public void setMailAdd(String mailAdd) {
        this.mailAdd = mailAdd;
    }
}</code></pre>
<p>【index.jsp】</p>
<pre><code class="jsp">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action=&quot;result.jsp&quot; method=&quot;post&quot;&gt;
        &lt;table align=&quot;center&quot; width=&quot;300&quot; border=&quot;1&quot; height=&quot;150&quot;&gt;
            &lt;tr&gt;
                &lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt;
                    &lt;b&gt;邮箱认证系统&lt;/b&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td align=&quot;right&quot;&gt;邮箱地址：&lt;/td&gt;
                &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;mailAdd&quot;/&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt;
                    &lt;input type=&quot;submit&quot; /&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>【result.jsp】</p>
<pre><code class="jsp">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;

&lt;%@page import=&quot;com.lyq.bean.Email&quot;%&gt;&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div align=&quot;center&quot;&gt;
        &lt;%
            // 获取邮箱地址
            String mailAdd = request.getParameter(&quot;mailAdd&quot;);
            // 实例化Email,并对mailAdd赋值
            Email email = new Email(mailAdd);
            // 判断是否是标准的邮箱地址
            if(email.isEamil()){
                out.print(mailAdd + &quot; &lt;br&gt;是一个标准的邮箱地址！&lt;br&gt;&quot;);
            }else{
                out.print(mailAdd + &quot; &lt;br&gt;不是一个标准的邮箱地址！&lt;br&gt;&quot;);
            }
        %&gt;
        &lt;a href=&quot;index.jsp&quot;&gt;返回&lt;/a&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>【结果：】<img src="/2020/04/27/JSP%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9AJavaBean%EF%BC%89/3.png" class=""></p>
<h1 id="3-获取JavaBean属性信息"><a href="#3-获取JavaBean属性信息" class="headerlink" title="3 获取JavaBean属性信息"></a><span id="3">3 获取JavaBean属性信息</span></h1><p>&lt;jsp:useBean&gt;在JSP中使用JavaBean。<br>一般来说，JSP或者Servlet里面的JavaBean具有的特点是：<br>（1）属性名第一个字母都是小写<br>（2）每个属性有对应的getter和setter方法。<br>此外，Bean的特点还有：<br>必须要有一个不带参数的构造器，<br>在JSP元素创建Bean时会调用空构造器。</p>
<pre><code class="jsp">【格式1：】
&lt;jsp:useBean id=””  scope=””   class=””   type=””/&gt;
【格式2：】
&lt;jsp:useBean…&gt;
    &lt;jsp:setProperty name=&quot;produce&quot; property=&quot;price&quot; value=&quot;888&quot; &gt;
        &lt;!--相当于 produce.setXXX(888)--&gt;
    &lt;jsp:getProperty name=&quot;produce&quot; property=&quot;price&quot; /&gt;
        &lt;!--相当于produce.getPrice()--&gt;
&lt;/jsp:useBean&gt;</code></pre>
<p>jsp:useBean各个参数的含义：<br><strong>id</strong>——对象实例名称<br><strong>scope</strong>——Bean作用范围，默认是page，包括page,request,session,application<br><strong>class</strong>——Bean的类名称<br><strong>type</strong>——Bean实例类型，可以是本类，或其父类，或其实现的接口，默认为本类 （多态）</p>
<blockquote>
<p><font color="red">page:</font>仅涵盖使用JavaBean的页面。每次访问页面时，重新生成一个。<br><font color="red">request:</font>有效范围仅限于使用JavaBean的请求，跳转生成另一个reques就无效。<br><font color="red">session:</font>有效范围在用户整个连接过程中，整个会话阶段均有效；即刷新页面依然存在。<br><font color="red">application：</font>有效范围涵盖整个应用程序，也就是对整个网站均有效。相当于把Bean对象放在了ServletContext中。即打开另一页面也存在。</p>
</blockquote>
<h2 id="3-1-例子"><a href="#3-1-例子" class="headerlink" title="3.1 例子"></a>3.1 例子</h2><p>【Produce.java】</p>
<pre><code class="java">package my.model;

public class Produce {
    private String name;
    private double price;
    private int count;
    private String factoryAdd;
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public double getPrice() {
        return price;
    }
    public void setPrice(double price) {
        this.price = price;
    }
    public int getCount() {
        return count;
    }
    public void setCount(int count) {
        this.count = count;
    }
    public String getFactoryAdd() {
        return factoryAdd;
    }
    public void setFactoryAdd(String factoryAdd) {
        this.factoryAdd = factoryAdd;
    }

}</code></pre>
<p>【login.jsp】</p>
<pre><code class="jsp">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action=&quot;index.jsp&quot; method=&quot;post&quot;&gt;
        &lt;table align=&quot;center&quot; width=&quot;400&quot; height=&quot;200&quot; border=&quot;1&quot;&gt;
            &lt;tr&gt;
                &lt;td align=&quot;center&quot; colspan=&quot;2&quot; height=&quot;40&quot;&gt;&lt;b&gt;添加产品信息&lt;/b&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td align=&quot;right&quot;&gt;名称：&lt;/td&gt;
                &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;name2&quot;&gt;&lt;/td&gt;&lt;!--注意这的名字是name2不是name --&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td align=&quot;right&quot;&gt;价格：&lt;/td&gt;
                &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;price2&quot;&gt;&lt;/td&gt;&lt;!--注意这的名字是price2不是price --&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td align=&quot;right&quot;&gt;数量：&lt;/td&gt;
                &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;count&quot;&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td align=&quot;right&quot;&gt;地址：&lt;/td&gt;
                &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;factoryAdd&quot;&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td align=&quot;center&quot; colspan=&quot;2&quot; height=&quot;40&quot;&gt;&lt;input type=&quot;submit&quot;&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>【index.jsp】</p>
<pre><code class="jsp">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;!-- 让服务器传过来的request能识别中文 --&gt;
&lt;%request.setCharacterEncoding(&quot;UTF-8&quot;); %&gt;
&lt;!-- id：使用这个JavaBean创建的一个对象名，相当于Produce produce = new Produce() --&gt;
&lt;jsp:useBean id=&quot;produce&quot; class=&quot;my.model.Produce&quot;&gt;&lt;/jsp:useBean&gt;
&lt;!-- 表单的属性名和JavaBean的属性名相同 --&gt;
&lt;jsp:setProperty property=&quot;*&quot; name=&quot;produce&quot;/&gt;
&lt;!-- param令表单中的price2就JavaBean中price --&gt;
&lt;jsp:setProperty property=&quot;price&quot; name=&quot;produce&quot;  param=&quot;price2&quot;/&gt;
&lt;!-- 有一个就够了，这个没有用无效 --&gt;
&lt;jsp:setProperty property=&quot;*&quot; name=&quot;produce&quot;/&gt;
&lt;jsp:setProperty property=&quot;factoryAdd&quot; name=&quot;produce&quot; value=&quot;北京&quot;/&gt;
&lt;div&gt;
    &lt;ul&gt;
        &lt;li&gt;商品名称：&lt;jsp:getProperty property=&quot;name&quot; name=&quot;produce&quot;/&gt;&lt;/li&gt;&lt;!-- form中为name，结果NULL，因为表单数据名为name2 --&gt;
        &lt;li&gt;价格：&lt;jsp:getProperty property=&quot;price&quot; name=&quot;produce&quot;/&gt;&lt;/li&gt;&lt;!-- form中为price2，结果正确 --&gt;
        &lt;li&gt;数量：&lt;jsp:getProperty property=&quot;count&quot; name=&quot;produce&quot;/&gt;&lt;/li&gt;&lt;!-- form中为count，结果正确（推荐） --&gt;
        &lt;li&gt;厂址：&lt;jsp:getProperty property=&quot;factoryAdd&quot; name=&quot;produce&quot;/&gt;&lt;/li&gt;&lt;!-- 结果为 北京 --&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>【结果：】<img src="/2020/04/27/JSP%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9AJavaBean%EF%BC%89/4.png" class=""></p>
]]></content>
      <categories>
        <category>JSP</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP（第三章：JSP内置对象）</title>
    <url>/2020/04/26/JSP%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9AJSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/04/26/JSP（第三章：JSP内置对象）/#1">1 out对象</a></p>
<p><a href="/2020/04/26/JSP（第三章：JSP内置对象）/#2">2 request对象</a></p>
<p><a href="/2020/04/26/JSP（第三章：JSP内置对象）/#3">3 response对象</a></p>
<p><a href="/2020/04/26/JSP（第三章：JSP内置对象）/#4">4 session对象</a></p>
<p><a href="/2020/04/26/JSP（第三章：JSP内置对象）/#5">5 pageContext对象</a></p>
<p><a href="/2020/04/26/JSP（第三章：JSP内置对象）/#6">6 application对象</a></p>
<p><a href="/2020/04/26/JSP（第三章：JSP内置对象）/#7">7 config对象</a></p>
<p><a href="/2020/04/26/JSP（第三章：JSP内置对象）/#8">8 cookie对象</a></p>
</blockquote>
<p>内置对象：不加声明就可以在JSP页面脚本中使用的成员变量，使用这些对象可以更容易收集客户端发送的请求信息，响应客户端的请求及存储客户信息。</p>
<p>分别为：request、response、out、session、application、config、pageContext、page、exception、cookie</p>
<a id="more"></a>

<h1 id="1-out对象"><a href="#1-out对象" class="headerlink" title="1 out对象"></a><span id="1">1 out对象</span></h1><pre><code class="jsp">&lt;%
out.println(&quot;hello&quot;);//没有pre不会，不会换行
out.println(&quot;world&quot;);
%&gt;
【结果：hello world】
&lt;pre&gt;
&lt;%
out.println(&quot;hello&quot;);//会换行
out.println(&quot;world&quot;);
%&gt;
&lt;/pre&gt;
【  结果：hello
         world   】</code></pre>
<h1 id="2-request对象"><a href="#2-request对象" class="headerlink" title="2 request对象"></a><span id="2">2 request对象</span></h1><p>request对象的存活范围：<font color="red">对象的存活范围内，当客户端向服务器端发送一个请求，服务器向客户端返回一个响应后，该请求对象就被<strong>销毁</strong>了</font>。之后再向服务器端发送新的请求时，服务器会创建新的request对象，该request对象与之前的request对象没有任何关系，因此也无法获得在之前的request对象中所存放的任何数据。</p>
<p>request对象代表的是来自客户端的请求，例如在 form表单中填写的信息等，是最常用的对象</p>
<h2 id="2-1-request方法："><a href="#2-1-request方法：" class="headerlink" title="2.1 request方法："></a>2.1 request方法：</h2><p>request的setAttribute与getAttribute方法一般都是成对出现的，首先通过setAttribute方法设置属性与属性值，然后通过getAttribute方法根据属性获取到与该属性对应的对象值。</p>
<p><font color="red">setAttribute</font>与<font color="red">getAttribute</font>方法都是在服务器端内部执行的，客户端不知道服务器端是否执行过这两个方法。</p>
<p>request的getParameter方法的作用是获取到客户端通过表单或url请求参数发送过来的参数值，是客户端与服务器端之间的交互，服务器端要想获取到客户端发送过来的数据，就需要使用getParameter方法来获取。</p>
<p><font color="red">没有与getParameter方法对应的setParameter方法。</font></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>getParameter(String)</td>
<td>返回客户端向服务器端传送的参数值</td>
</tr>
<tr>
<td>getParameterNames()</td>
<td>获得客户端传送给服务器端的所有参数的名字，结果是一个枚举类型的数据(Enumeration)</td>
</tr>
<tr>
<td>getParameterValues(String)</td>
<td>获得指定参数的所有值，返回String[]</td>
</tr>
<tr>
<td>getMethod()</td>
<td>返回客户端向服务器端传送数据的方法</td>
</tr>
<tr>
<td>getRequestURL()</td>
<td>获得发出请求字符串的客户端地址</td>
</tr>
<tr>
<td>getRemoteAddr()</td>
<td>获取客户端的IP地址</td>
</tr>
<tr>
<td>getRemoteHost()</td>
<td>获取客户端的机器名称</td>
</tr>
<tr>
<td>getServerName()</td>
<td>获取服务器的名字</td>
</tr>
<tr>
<td>getServletName()</td>
<td>客户端所请求的脚本文件路径</td>
</tr>
<tr>
<td>getServerPort()</td>
<td>获取服务器端的端口</td>
</tr>
</tbody></table>
<h2 id="2-2-处理中文："><a href="#2-2-处理中文：" class="headerlink" title="2.2 处理中文："></a>2.2 处理中文：</h2><p>1.获取访问请求参数时乱码——对单个请求参数进行设置</p>
<pre><code class="jsp">&lt;%Stringmyname=new String(request.getParameter(&quot;name&quot;).getBytes(&quot;ISO-8859-1&quot;),&quot;UTF-8&quot;);%&gt;</code></pre>
<p>2.获取表单提交的信息乱码——对请求对象的所有参数进行设置<br><font color="red">注意：一定要在页面中没有调用任何request对象的方法之前使用</font></p>
<pre><code class="jsp">&lt;%request.setCharacterEncoding(&quot;UTF-8&quot;);%&gt;</code></pre>
<h1 id="3-response对象"><a href="#3-response对象" class="headerlink" title="3 response对象"></a><span id="3">3 response对象</span></h1><p>response:表示返回给客户端的响应。对应类javax.servlet.http.HttpServletResponse经常用于设置Http标题、添加cookie、设置响应内容的类型和状态、发送Http重定向和编码URL。</p>
<h2 id="3-1-response常用方法："><a href="#3-1-response常用方法：" class="headerlink" title="3.1 response常用方法："></a>3.1 response常用方法：</h2><p><strong>addCookie(Cookie):</strong>——添加一个cookie对象。用于在客户端保存特定的信息<br><strong>addHeader(String,String):</strong>——添加http头信息，该Header信息将发送到客户端<br><strong>ontainsHeader(String):</strong>——判断指定名字的HTTP文件头是否存在<br><strong>sendError(int,String):</strong>——向客户端发送错误的信息<br><strong>sendRedirect(String):</strong>——重定向JSP文件。注意和&lt;jsp:forward&gt;的区别<br><strong>setContentType(String):</strong>——设置MIME类型与编码方式</p>
<h2 id="3-2-处理重定向"><a href="#3-2-处理重定向" class="headerlink" title="3.2 处理重定向"></a>3.2 处理重定向</h2><p>当你访问第一个页面的时候，页面要求你重新访问另外一个页面，因此客户端浏览器需要访问另外一个页面的地址。<font color="red">因此<strong>地址栏改变</strong>，且两个页面使用的是<strong>不同的request</strong>。</font></p>
<img src="/2020/04/26/JSP%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9AJSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%EF%BC%89/1.jpg" class="">

<h1 id="4-session对象"><a href="#4-session对象" class="headerlink" title="4 session对象"></a><span id="4">4 session对象</span></h1><p> session对象代表服务器与客户端所建立的会话，<font color="red">当需要在不同的JSP页面中保留客户信息的情况下使用</font>，比如在线购物、客户轨迹跟踪等。</p>
<p>HTTP是无状态协议；Web Server对每一个客户端请求都没有历史记忆；session用来保存客户端状态信息。</p>
<p>浏览器不关闭，session对象会一直存在（姑且这样认为），且session对象只有一个。如果浏览器关闭重启，会创建新的session对象。</p>
<p><font color="red">Cookie是记录在客户端，session是记录在服务器端。</font>但是cookie记录在客户端，用户可以设置不允许写入cookie，用户也可以删除cookie或者修改cookie，不够可靠。</p>
<p>Session是写在服务器端内存中的内容，当写session的时候会为客户端的浏览器记录一个唯一的编号，同时为session也赋予同样的号码。当用户访问第二个页面的时候，服务器端会根据浏览器的编号去找同一个编号对应的session。这个编号叫sessionid。</p>
<img src="/2020/04/26/JSP%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9AJSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%EF%BC%89/2.jpg" class="">

<h2 id="4-1-session常用方法："><a href="#4-1-session常用方法：" class="headerlink" title="4.1 session常用方法："></a>4.1 session常用方法：</h2><p><strong>setAttribute()方法和getAttribute()方法</strong>——实现创建及获取客户的会话<br><strong>removeAttribute(String name)</strong>——对于存储在session会话中的对象，如果想将其从session会话中移除<br><strong>invalidate()</strong>——销毁session<br><strong>getLastAccessedTime()</strong>——返回客户端最后一次与会话相关联的请求时间<strong>getMaxInactiveInterval()</strong>——以秒为单位返回一个会话内两个请求最大时间间隔<br><strong>setMaxInactiveInterval()</strong>——以秒为单位设置session的有效时间<br><strong>getId()</strong>——返回session的ID</p>
<h2 id="4-2-session例子"><a href="#4-2-session例子" class="headerlink" title="4.2 session例子"></a>4.2 session例子</h2><pre><code class="jsp">【index.jsp】
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Forward Example&lt;/title&gt;
    &lt;/head&gt;

    &lt;body&gt;
      &lt;form id=&quot;form1&quot; action=&quot;session.jsp&quot;&gt;
      &lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;

      &lt;input type=&quot;submit&quot; name=&quot;Submit&quot; value=&quot;ok&quot;/&gt;

      &lt;/form&gt;

    &lt;/body&gt;
&lt;/html&gt;

【session.jsp】
  &lt;body&gt;
    &lt;%
       String name=request.getParameter(&quot;name&quot;);
       session.setAttribute(&quot;name&quot;,name);

     %&gt;

    &lt;form name=&quot;form2&quot; action=&quot;result.jsp&quot;&gt;
    your address is:
    &lt;input type=&quot;text&quot; name=&quot;address&quot;/&gt;

     &lt;input type=&quot;submit&quot; name=&quot;Submit&quot; value=&quot;ok&quot;/&gt;
    &lt;/form&gt;
  &lt;/body&gt;

【result.jsp】
  &lt;body&gt;
    &lt;%String name=(String)session.getAttribute(&quot;name&quot;); 
      String solution=request.getParameter(&quot;address&quot;);
    %&gt;

    your name is:
    &lt;%=name %&gt;
    your address is:
    &lt;%=solution %&gt;
  &lt;/body&gt;
【结果：result.jsp里显示了index.jsp的name和session.jsp的address】</code></pre>
<h1 id="5-pageContext对象"><a href="#5-pageContext对象" class="headerlink" title="5 pageContext对象"></a><span id="5">5 pageContext对象</span></h1><p>pageContext对象可以存取关于JSP执行期间所要用到的属性和方法。<br>可以获取JSP内置对象：<br>getSession()：返回session对象<br>getServletConfig()：返回config对象<br>getServletContext()：返回application对象</p>
<h1 id="6-application-对象"><a href="#6-application-对象" class="headerlink" title="6 application 对象"></a><span id="6">6 application 对象</span></h1><p>application对象在整个应用区域中都有效。<br>application对象可以是ServletContext类型的。<br>application的存活范围比request和session都要大。<br><font color="red">只要服务器没有关闭，application对象中的数据就会一直存在，在整个服务器的运行过程当中，application对象只有一个，它会被所有的用户共享。</font><br>application适用于在同一个应用程序中的各个用户共享数据。</p>
<h2 id="6-1-application常用方法"><a href="#6-1-application常用方法" class="headerlink" title="6.1 application常用方法"></a>6.1 application常用方法</h2><p><strong>getAttributeNames()</strong>——获得所有application对象使用的属性名。<br><strong>getAttribute(String name)</strong>——从application对象中获取指定对象名。<br><strong>setAttribute(String key,Object obj)</strong>——使用指定名称和指定对象在application对象中进行关联。<br><strong>removeAttribute(String name)</strong>——从application对象中去掉指定名称的属性。<br><strong>getRealPath()</strong>——可以获取资源在服务器上的物理路径（绝对路径），常用来获取上传文件时要存储文件的路径。</p>
<h2 id="6-2-application例子"><a href="#6-2-application例子" class="headerlink" title="6.2 application例子"></a>6.2 application例子</h2><pre><code class="jsp">【index.jsp】
&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;Gb2312&quot;%&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Forward Example&lt;/title&gt;
    &lt;/head&gt;

    &lt;body&gt;
    &lt;%
        if(application.getAttribute(&quot;counter&quot;) == null)
        {
            application.setAttribute(&quot;counter&quot;, &quot;1&quot;);
        }
        else
        {
            String strnum = null;
            strnum = application.getAttribute(&quot;counter&quot;).toString();
            int icount = 0;
            icount = Integer.valueOf(strnum).intValue();
            icount++;
            application.setAttribute(&quot;counter&quot;, Integer.toString(icount));

        }

    %&gt;
        您是第&lt;%=application.getAttribute(&quot;counter&quot;) %&gt;位访问者！
  &lt;/body&gt;
&lt;/html&gt;
【结果：刷新页面counter增加1】</code></pre>
<h1 id="7-config对象"><a href="#7-config对象" class="headerlink" title="7 config对象"></a><span id="7">7 config对象</span></h1><p>config对象是ServletConfig类型，包含初始化参数以及一些实用方法。<br><font color="red">在初始化参数中可以读取web.xml文件中的环境设置和服务器配置信息。</font></p>
<h2 id="7-1-config常用方法"><a href="#7-1-config常用方法" class="headerlink" title="7.1 config常用方法"></a>7.1 config常用方法</h2><p><strong>getServletName()</strong>——返回Servlet的名称<br><strong>getInitParameterNames()</strong>——返回Servlet程序初始化所有的参数名<br><strong>getInitParameter(String)</strong>——返回Servlet程序初始参数的值</p>
<h1 id="8-cookie对象"><a href="#8-cookie对象" class="headerlink" title="8 cookie对象"></a><span id="8">8 cookie对象</span></h1><p>Cookie是由服务器端生成，发送给<strong>浏览器</strong>，浏览器会将Cookie的key/value保存到某个目录下的<font color="red"><strong>文本文件</strong></font>内，下次请求同一网站时就发送该Cookie给<strong>服务器</strong>（前提是浏览器设置为启用cookie）。</p>
<p>Cookie:服务器端写到客户端的文本信息，是以<font color="red"><strong>名-值-对</strong></font>的形式。</p>
<p>服务器可以利用Cookies包含信息的任意性来筛选并经常性维护这些信息，以判断在HTTP传输中的状态。Cookies最典型的应用是判定注册用户是否已经登录网站，用户可能会得到提示，是否在下一次进入此网站时保留用户信息以便简化登录手续，这些都是Cookies的功用。另一个重要应用场合是“购物车”之类处理。用户可能会在一段时间内在同一家网站的不同页面中选择不同的商品，这些信息都会写入Cookies，以便在最后付款时提取信息。</p>
<p>注意HTTP协议是无连接的，含义就是当客户端从服务器端得到某个文件的内容时，连接就会中断，相当于socket的close方法。但是考虑购物网站，当你在一个页面购买了东西，连接就断了，当你又访问另外一个页面去结账时，这时就不知道购买的东西是什么了。这时的解决办法就是cookie。也就是当你购买了某种商品后，服务器就在客户端记录下相应的信息来，这就是cookie。<br><strong>但是要遵循两个原则：<br>(1)只允许写文本文档，不允许写其他类型的文件，避免那些恶意的程序。<br>(2)客户端可以阻止服务器写入。</strong></p>
<h2 id="8-1-cookie常用方法"><a href="#8-1-cookie常用方法" class="headerlink" title="8.1 cookie常用方法"></a>8.1 cookie常用方法</h2><p><strong>getCookies()</strong>——即可获取到所有cookie对象的集合<br><strong>getName()</strong>——可以获取到指定名称的cookie<br><strong>getValue()</strong>——即可获取到cookie对象的值<br><strong>addCookie()方法</strong>——将一个cookie对象发送到客户端使用了response对象的</p>
<pre><code class="jsp">【login.jsp】
&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;GB2312&quot;%&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Forward Example&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;%
    Cookie[] cookies=request.getCookies();
    String user=&quot;&quot;;
    if(cookies!=null){
       for(int i=0;i&lt;cookies.length;i++){
          if(cookies[i].getName().equals(&quot;mrCookie&quot;)){
              user=cookies[i].getValue();
          }
       }      
    }
    if(&quot;&quot;.equals(user)){
    %&gt;
      &lt;form id=&quot;form1&quot; action=&quot;deal.jsp&quot;&gt;
      &lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;
      &lt;input type=&quot;submit&quot; name=&quot;Submit&quot; value=&quot;ok&quot;/&gt;    
      &lt;/form&gt;     
      &lt;%
      }else{%>     
              欢迎<%=user %>再次光临       
     <%} %&gt;
    &lt;/body&gt;
&lt;/html&gt;


【deal.jsp】
&lt;body&gt;
    &lt;%
    String user=request.getParameter(&quot;name&quot;);    
    Cookie cookie=new Cookie(&quot;mrCookie&quot;,user);
    cookie.setMaxAge(60*60*24*30);
    response.addCookie(cookie);
    %&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;window.location.href=&quot;login.jsp&quot;&lt;/script&gt;
&lt;/body&gt;
【结果：添加姓名XX后，显示“欢迎XX再次光临”】</code></pre>
]]></content>
      <categories>
        <category>JSP</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>UML（第六章：状态图、活动图）</title>
    <url>/2020/04/24/UML%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="6-1-行为模型概述"><a href="#6-1-行为模型概述" class="headerlink" title="6.1 行为模型概述"></a>6.1 行为模型概述</h1><h2 id="6-1-1-行为模型"><a href="#6-1-1-行为模型" class="headerlink" title="6.1.1 行为模型"></a>6.1.1 行为模型</h2><p><strong>行为模型包括：</strong>状态模型、活动模型、交互模型</p>
<p><strong>状态模型</strong>——关注一个对象的生命周期内的状态及状态变迁，以及引起状态变迁的事件和对象在状态中的动作等。（状态图）</p>
<p><strong>活动模型</strong>——用于描述对象的一个活动到另一个活动的控制流、活动的序列、工作的流程和并发的处理行为等。（活动图）</p>
<p><strong>交互模型</strong>——强调对象间的合作关系与时间顺序，通过对象间的消息传递来完成系统的交互。（顺序图、协作图）</p>
<p><strong>状态模型涉及一个对象，活动模型和交互模型涉及多个对象</strong></p>
<a id="more"></a>

<h2 id="6-1-2-事件驱动"><a href="#6-1-2-事件驱动" class="headerlink" title="6.1.2 事件驱动"></a>6.1.2 事件驱动</h2><p>根据当前事件及对以前事件的响应结果决定对当前事件的响应的软件对象的动态行为，称为事件驱动。</p>
<p>最适合描述这类动态行为的建模手段是<strong>状态图</strong>。</p>
<p><strong>状态图</strong>是展示状态与状态转换的图模型。</p>
<h1 id="6-2-状态图"><a href="#6-2-状态图" class="headerlink" title="6.2 状态图"></a>6.2 状态图</h1><p>例子：电话机</p>
<img src="/2020/04/24/UML%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%EF%BC%89/1.png" class="">

<p>例子：借书证</p>
<img src="/2020/04/24/UML%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%EF%BC%89/2.png" class="">

<h2 id="6-2-1-状态图的概念"><a href="#6-2-1-状态图的概念" class="headerlink" title="6.2.1 状态图的概念"></a>6.2.1 状态图的概念</h2><p><strong>UML中的状态图(statechart diagram)</strong>主要用于描述一个对象在其生存期间的动态行为，表现一个对象所经历的状态序列，引起状态转移的事件，以及因状态转移而伴随的动作。</p>
<p><strong>状态图</strong>描述了一个实体基于事件反应的动态行为，显示了该实体是如何根据当前所处的状态对不同的事件做出反应的。</p>
<p><strong>状态图中，动作可以与状态相关也可以与转移相关。</strong></p>
<p>如果动作与状态相关，则对象在进入一个状态时将触发某一动作，而不管是从哪个状态转入这个状态的。</p>
<p>如果动作与转移相关，则对象在不同的状态之间转移时，将触发相应的动作。</p>
<p><strong>状态图所描述的对象往往具有多个属性，</strong>一般状态图应该在具有以下两个特性的属性上建模：</p>
<ol>
<li>属性拥有较少的可能取值；</li>
<li>属性在这些值之间的转移有一定的限制。</li>
</ol>
<h2 id="6-2-2-状态图的建模元素"><a href="#6-2-2-状态图的建模元素" class="headerlink" title="6.2.2 状态图的建模元素"></a>6.2.2 状态图的建模元素</h2><p>状态图中的建模元素：<strong>状态、转移、事件、动作</strong></p>
<p><strong>状态</strong>指在对象的生命期中的某个条件或状况。状态具有一定的时间稳定性，在此期间对象将满足某些条件、执行某些活动或等待某些事件。<strong>可以认为“状态”对应某些变量或属性取了特定值。</strong> <strong>状态</strong>描述了一个对象在其生命周期中的一个时间段。</p>
<p><strong>转移</strong>是两个状态之间的一种关系，表示在指定的事件发生后，在特定的<strong>警戒条件</strong>满足时，对象执行指定的动作，并从起始状态进入目标状态。</p>
<p><strong>事件</strong>是对一个可观察的事情的类型描述。事件产生的原因有调用、满足条件的状态的出现、到达时间点或经历某一时间段、发送信号等。</p>
<h3 id="1-状态"><a href="#1-状态" class="headerlink" title="1 状态"></a>1 状态</h3><blockquote>
<p>可以用3种附加的方式进行进一步的说明：</p>
<ol>
<li>在某些方面相似的一组对象值；</li>
<li>对象执行持续活动时的一段时间；</li>
<li>一个对象等待事件发生时的一段时间。</li>
</ol>
</blockquote>
<p>所有对象都具有状态，状态是对象执行了一系列活动的结果，当某个事件发生后，对象的状态将发生变化。<br>处于相同状态的对象对同一事件做出相同的反应。<br>处于不同状态的对象会通过不同的动作对同一个事件做出不同的反应。</p>
<blockquote>
<p>一个状态有以下几个部分：</p>
<ol>
<li>状态名(name)</li>
<li>状态变量(state variable)</li>
<li>进入/退出动作(entry/exit action)</li>
<li>内部转移(internal transition)</li>
<li>子状态(substate)</li>
<li>延迟事件(deferred event)</li>
</ol>
</blockquote>
<p>可以细分为不同的类型：初态、终态、中间状态、组合状态、历史状态等。<br>一个状态图只能有一个初态，终态可以有一个或多个，也可以没有终态。<br><strong>初态：</strong>代表状态图的起始位置，是一个伪状态，仅表示一个和中间状态有连接的假状态。对象不可能保持在初态，要有一个输出转移(无触发转移)。<strong>在UML规范中，初态用实心圆表示。</strong></p>
<p><strong>终态：</strong>一个状态图的终点。可以保持在终态，不可能有任何形式的转出转移，目的是描述对象的状态变化的结束。<strong>在UML规范中，终态用实心圆的圆圈表示。</strong></p>
<p>其余的状态都是<strong>中间状态</strong>。包括3个区域：名字域、变量域、内部转移域。</p>
<h3 id="2-状态的组成"><a href="#2-状态的组成" class="headerlink" title="2 状态的组成"></a>2 状态的组成</h3><img src="/2020/04/24/UML%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%EF%BC%89/4.png" class="">

<h4 id="（1）状态名"><a href="#（1）状态名" class="headerlink" title="（1）状态名"></a>（1）状态名</h4><p>状态名——状态的标识符。由一个字符串构成，每个单词的首字母大写，用以标识不同的状态。<br>可省略(匿名状态)</p>
<h4 id="（2）-状态变量"><a href="#（2）-状态变量" class="headerlink" title="（2） 状态变量"></a>（2） 状态变量</h4><p>状态变量——进行计数的内部变量</p>
<h4 id="（3）入口-出口动作-进入-退出动作"><a href="#（3）入口-出口动作-进入-退出动作" class="headerlink" title="（3）入口/出口动作(进入/退出动作)"></a>（3）入口/出口动作(进入/退出动作)</h4><p>入口/出口动作(进入/退出动作)——转入状态时必须执行的动作/转出状态时必须执行的动作</p>
<p>进入一个状态时执行的操作称为入口动作。常用来进行状态所需要的内部初始化。<br>离开一个状态时执行的操作称为出口动作。常用来进行状态所需的善后处理。<br>将入口/出口动作声明为特殊的动作，可以使状态的定义不依赖于状态的转移，起到封装的作用</p>
<p>入口/出口动作(进入/退出动作)——转入状态时必须执行的动作/转出状态时必须执行的动作<br><font color="red">入口：entry/动作</font><br><font color="red">出口：exit/动作</font></p>
<h4 id="（4）内部转移"><a href="#（4）内部转移" class="headerlink" title="（4）内部转移"></a>（4）内部转移</h4><p>内部转移——不导致状态发生变化的动作<br>有一个起始状态，但没有目标状态。<br>其激发规则同改变状态的转移的激发规则。<br>转移激发的结果不改变本状态。<br>如果一个内部转移带有动作，它也要被执行，但没有状态发生改变，不需要执行入口和出口动作。</p>
<h4 id="（5）自身转移"><a href="#（5）自身转移" class="headerlink" title="（5）自身转移"></a>（5）自身转移</h4><p>一个自身转移会激发状态上的入口和出口动作的执行。<br>自身转移从一个状态出发后又回到自身状态。<br>自身转移不等价于内部转移。<br>自身转移可以强制地从嵌套状态中退出，但内部转移不能。</p>
<h3 id="3-组成状态-子状态"><a href="#3-组成状态-子状态" class="headerlink" title="3 组成状态/子状态"></a>3 组成状态/子状态</h3><p>状态图中的有些状态，它们所要执行的一系列动作，和/或要响应的一些事件，可以进一步地描述成若干更小规模的(内部)状态。这些状态称为<strong>子状态，用以描述一个状态内部的状态变化过程。</strong></p>
<h4 id="（1）子状态"><a href="#（1）子状态" class="headerlink" title="（1）子状态"></a>（1）子状态</h4><p>子状态——包含在某一个状态内部的状态</p>
<h4 id="（2）组合状态"><a href="#（2）组合状态" class="headerlink" title="（2）组合状态"></a>（2）组合状态</h4><p>组合状态——一个状态内部存在一个子状态的变化过程</p>
<p>如图：汽车行驶的状态,更加容易识别出这些子状态的串行/并行情况</p>
<img src="/2020/04/24/UML%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%EF%BC%89/6.png" class="">

<h4 id="（3）简单状态"><a href="#（3）简单状态" class="headerlink" title="（3）简单状态"></a>（3）简单状态</h4><p>简单状态——不包含子状态的状态</p>
<h4 id="（4）串行子状态"><a href="#（4）串行子状态" class="headerlink" title="（4）串行子状态"></a>（4）串行子状态</h4><p>串行子状态——or关系。说明在某一时刻仅可到达一个子状态。具有or关系的子状态称为串行子状态。</p>
<h4 id="（5）并行子状态"><a href="#（5）并行子状态" class="headerlink" title="（5）并行子状态"></a>（5）并行子状态</h4><p>并行子状态——and关系。说明在某一时刻可同时到达多个子状态。具有and关系的子状态称为并行子状态。</p>
<h4 id="（6）历史状态"><a href="#（6）历史状态" class="headerlink" title="（6）历史状态"></a>（6）历史状态</h4><p>历史状态——是一个特殊的子状态（伪状态），记录了组合状态被转出时的活跃子状态。其目的是当再次进入组合状态时，可直接进入这个子状态，而不是在此组合从状态的初态开始。</p>
<p>历史状态——注意转入转移的箭头所指的部位。如果指向整个组合状态的外沿，则表示进入初态。如果指向历史状态的符号，则表示进入上次转出时的子状态。<br>在UML中，历史状态用H，H*<br>H：浅历史状态的符号，表示只记住最外层组合状态的历史；<br>H*：深历史状态的符号，表示可记住任何深度的组合状态的历史。<br>如果一个组合状态到达了其终态，则会丢失历史状态中的信息，就好像没有进入过这个组合状态一样。</p>
<img src="/2020/04/24/UML%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%EF%BC%89/5.png" class="">

<h3 id="4-转移"><a href="#4-转移" class="headerlink" title="4 转移"></a>4 转移</h3><p>转移是两个状态之间的一种关系，表示在指定的事件发生后，在特定的警戒条件满足时，对象执行指定的动作，并从起始状态进入目标状态。<br>起始状态和目标状态相同的转移称为<strong>自身转移</strong>；<br>否则，称为<strong>一般转移</strong>。<br>在UML中，转移是<strong>一条带箭头的实线</strong>，箭头指向目标状态。</p>
<blockquote>
<p>转移的语法格式:<br>event-signature ‘[‘guard-condition’]’ ‘/’ action<br>单引号引起来的是字符，必须出现在转移的描述中。<br>event-signature——事件特征标记<br>guard-condition——警戒条件<br>action——要执行的动作</p>
<p>event-signature——事件特征标记<br>event-name ‘(‘comma-separated-parameter-list ‘)’</p>
</blockquote>
<p>一般状态之间的转移是由事件触发的，因此应该在转移上标出触发转移的事件表达式。<br>如果转移尚未表明事件，则表示在起始状态的内部活动执行完毕后自动触发转移。<br>对于一个给定的状态，最终只能产生一个转移，因此，从相同的状态出来的、事件相同的几个转移之间的条件应该是互斥的。</p>
<h3 id="5-转移的组成"><a href="#5-转移的组成" class="headerlink" title="5 转移的组成"></a>5 转移的组成</h3><p>转移由五个部分组成：起始状态、目标状态、触发事件、警戒条件和转移动作</p>
<img src="/2020/04/24/UML%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%EF%BC%89/4.png" class="">

<h4 id="（1）起始状态"><a href="#（1）起始状态" class="headerlink" title="（1）起始状态"></a>（1）起始状态</h4><p>转移被激发前对象所处的状态是转移的<strong>起始状态</strong>，起始状态也是被转移影响的状态。</p>
<h4 id="（2）目标状态"><a href="#（2）目标状态" class="headerlink" title="（2）目标状态"></a>（2）目标状态</h4><p>转移完成后对象所处的状态是转移的<strong>目标状态</strong>。目标状态是转移完成后被激活的状态。</p>
<h4 id="（3）触发事件"><a href="#（3）触发事件" class="headerlink" title="（3）触发事件"></a>（3）触发事件</h4><p><strong>触发事件</strong>是状态在某个转移的起始状态下能接受的一个事件，此事件的发生使得转移的激发成为可能。事件发生在时间的一个点上。描述的是引发状态所在对象的动作的事件。</p>
<p>如果对象没有空闲时间处理事件，就将事件保存起来。</p>
<p>对象一次只处理一个事件。</p>
<p>如果事件有参数，则这些参数可以被转移所用，也可以被警戒条件或动作的表达式所用。</p>
<p>触发事件可以是信号、调用或时间段等。</p>
<h4 id="（4）警戒条件"><a href="#（4）警戒条件" class="headerlink" title="（4）警戒条件"></a>（4）警戒条件</h4><p><strong>警戒条件</strong>是一个布尔表达式，只有当转移的触发事件发生后，此表达式才被求值，并且在其值为真时，转移才被激发。</p>
<p>从一个状态引起的多个转移可以有同样的触发事件，但是每个转移必须具有不同的警戒条件。</p>
<p>当其中一个警戒条件满足时，触发事件才会引起相应的转移。</p>
<h4 id="（5）转移的分叉"><a href="#（5）转移的分叉" class="headerlink" title="（5）转移的分叉"></a>（5）转移的分叉</h4><p>对于一个给定的状态，最终只能产生一个转移，因此从相同的状态出来的、事件相同的几个转移之间的条件应该是互斥的</p>
<img src="/2020/04/24/UML%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%EF%BC%89/3.png" class="">

<h3 id="5-事件"><a href="#5-事件" class="headerlink" title="5  事件"></a>5  事件</h3><p>事件是对一个在时间和空间上占有一定位置的有意义的事情的详细说明。<br>事件是对一个可观察的事情的类型描述，这种事情的发送可以引发状态的转移。<br>事件是一种类型，而不是这种类型的实例。<br>事件产生的原因有调用、满足条件的状态的出现、到达时间点或经历某一时间段、发送信号等。</p>
<h4 id="（1）调用事件"><a href="#（1）调用事件" class="headerlink" title="（1）调用事件"></a>（1）调用事件</h4><p>表示的是对操作的调用，指的是一个对象对调用的接收，这个对象用状态的转移而不是用固定的处理过程实现操作。<br>格式：event-name ‘(‘comma-separated-parameter-list ‘)’</p>
<h4 id="（2）变化事件"><a href="#（2）变化事件" class="headerlink" title="（2）变化事件"></a>（2）变化事件</h4><p>一个布尔表达式变量的值发生变化，使得布尔表达式的值相应地变化，从而满足某些条件，则这种事件称为变化事件。<br>无论布尔表达式的值何时由假变为真，变化事件都发生。<br>变化事件隐含一个对条件的连续测试。<br>变化事件用when表示。</p>
<h4 id="（3）时间事件"><a href="#（3）时间事件" class="headerlink" title="（3）时间事件"></a>（3）时间事件</h4><p>满足某一时间表达式的情况的出现。<br>时间事件关键字：after   或 when</p>
<h4 id="（4）信号事件"><a href="#（4）信号事件" class="headerlink" title="（4）信号事件"></a>（4）信号事件</h4><p>信号：就是由一个对象异步地发送、并由另一个对象（即状态图所对应的对象）接收的已命名的实体。<br>信号事件：表示一个对象接收到了另一个对象显示信号这种情况。</p>
<p>信号，可以作为两个对象之间的通信媒介。发生对象明确地创建并初始化一个信号实例。并把它发送到一个对象或者对象集合。<br>信号可以在类图中被声明为类元，并用构造型&lt;&lt;signal&gt;&gt;表示。<br>信号有明确的参数列表，信号的参数被声明为属性。</p>
<h4 id="（5）信号事件与调用事件比较"><a href="#（5）信号事件与调用事件比较" class="headerlink" title="（5）信号事件与调用事件比较"></a>（5）信号事件与调用事件比较</h4><p>信号事件，是异步事件。<br>调用事件，是同步事件。<br>信号事件对应一个已命名的实体，这个实体不是状态图所对象的对象，调用事件对应状态图所对应的对象的一个操作的调用。<br>作为一个命名的实体，信号可以有属性，可以被继承(即泛化)</p>
<h3 id="6-信号"><a href="#6-信号" class="headerlink" title="6 信号"></a>6 信号</h3><p>在接收对象的状态图中，能够触发一个状态转移的消息称为信号。<br>在面向对象领域中，发送一个信号就等于创建一个信号实例，并将这个信号实例传送给接收对象。</p>
<p>信号为分异步单路通信和双路通信。<br>异步单路通信模型中，发送者是独立的，不用等待接收者如何处理信号。<br>在双路通信模型中，需要用到多少路信号，至少要在每个方向上有一个信号。</p>
<p>发送一个信号等同于初始化一个信号对象，然后把它发送到目标对象的集合。目标对象集合里的每个对象可能被独立地激发零个或多个转移。<br>信号也有自己的属性。所有的信号共享隐式的操作：发送。如果将信号看成是一个类，则可以建立信号之间的泛化关系。</p>
<h2 id="6-2-3-状态图的建模步骤"><a href="#6-2-3-状态图的建模步骤" class="headerlink" title="6.2.3 状态图的建模步骤"></a>6.2.3 状态图的建模步骤</h2><h4 id="1、识别需要绘制状态图的对象"><a href="#1、识别需要绘制状态图的对象" class="headerlink" title="1、识别需要绘制状态图的对象"></a>1、识别需要绘制状态图的对象</h4><p>状态图应该用于复杂状态的对象，而不必用于具有复杂行为的对象。对于有复杂行为的对象，使用活动图会更加合适。</p>
<h4 id="2、识别状态空间"><a href="#2、识别状态空间" class="headerlink" title="2、识别状态空间"></a>2、识别状态空间</h4><p>1)识别对象在问题域中的生命周期。分为直线式和循环式；<br>2)确定对象生命周期阶段划分策略。<br>3)重新按阶段描述对象生命周期，得到候选状态。<br>4)识别对象在每个候选状态下的动作，并对状态空间进行调整。<br>5)分析每个状态的确定因素(对象的数据属性)。<br>6)检查对象状态的确定性和状态间的互斥性。</p>
<h4 id="3、识别状态间的转移"><a href="#3、识别状态间的转移" class="headerlink" title="3、识别状态间的转移"></a>3、识别状态间的转移</h4><p>1)状态之间通过转移连接在一起<br>2)寻找一些明显的事件（调用事件、变化事件、时间事件、信号事件）<br>3)信号的特征：一个信号类的实例（实体），该信号类具有泛化（继承）关系图</p>
<h4 id="4、绘制并审查状态图"><a href="#4、绘制并审查状态图" class="headerlink" title="4、绘制并审查状态图"></a>4、绘制并审查状态图</h4><p>1)检查该对象的接口所期望的所有事件是否都被状态所处理；<br>2)检查在状态中提到的所有动作是否被闭合对象的关系和操作所支持；<br>3)通过状态，跟踪检查事件的顺序和对它们的响应，尤其要注意寻找那些未到达的状态和导致状态图不能走通的状态。<br>4)重新安排各状态后，按所期望的顺序再次检查，以确保没有改变该对象的语义。</p>
<h2 id="6-2-4-状态图的工具支持"><a href="#6-2-4-状态图的工具支持" class="headerlink" title="6.2.4 状态图的工具支持"></a>6.2.4 状态图的工具支持</h2><p><strong>正向工程</strong>指根据状态图生成代码；</p>
<p><strong>逆向工程</strong>指从源代码逆向得到状态图。</p>
<h2 id="6-2-5-状态图例子"><a href="#6-2-5-状态图例子" class="headerlink" title="6.2.5 状态图例子"></a>6.2.5 状态图例子</h2><ul>
<li>一个Employee类的动态行为包括：Apply, Employed, Leave of Absence, Terminated, Retired.</li>
<li>Apply状态信息：在这个状态下进行面试，出现雇佣hire事件时退出此状态。</li>
<li>Employed状态信息：该状态按工资的支付方式分类有3个子状态：Hourly,Salaried和commissioned。其支付方式可随时改变。当进入/退出子状态时建立/删除支付方式分类。</li>
<li>Leave of Absence状态信息：雇员在任何雇佣子状态下最长可请假1年。如果他返回到Employed状态的同样支付方式子状态，则结束此状态。</li>
<li>Terminated状态信息：在任何Employed子状态下，雇员可以被开除，或辞职。此状态结束时，要做雇员记录。(employee record)</li>
<li>Retired状态信息：雇员在65岁时退休。在此状态下计算养老金信息。</li>
<li>根据上述描述，建立Employee类的状态图。</li>
</ul>
<img src="/2020/04/24/UML%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%EF%BC%89/7.png" class="">

<h1 id="6-3-活动图"><a href="#6-3-活动图" class="headerlink" title="6.3 活动图"></a>6.3 活动图</h1><p>可以用于描述系统的工作流程和并发行为。可看作<strong>状态图的特殊形式</strong>。一个活动结束后将立即进入下一个活动。</p>
<p>包括的建模元素有：活动、分支、泳道、分叉、汇合、对象流和信号等</p>
<h2 id="6-3-1活动图的建模元素"><a href="#6-3-1活动图的建模元素" class="headerlink" title="6.3.1活动图的建模元素"></a>6.3.1活动图的建模元素</h2><h3 id="1-活动"><a href="#1-活动" class="headerlink" title="1 活动"></a>1 活动</h3><p>表示的是某流程中的任务的执行，它可以表示某算法过程中语句的执行。</p>
<p>一个活动是一个对象的某个方法中的部分（或全部）语句的执行。</p>
<p>区分<strong>动作状态(action state)</strong>、<strong>活动状态(activity state)</strong></p>
<p><font color="red">动作状态的活动</font>是原子的，不可分解，没有内部转移、没有内部活动。其所占用的时间可以忽略。</p>
<p><font color="red">活动状态的活动</font>是非原子的，可分解。其工作需要一定的时间。用于描述复杂性的计算或持续事件的执行。</p>
<h3 id="2-分支"><a href="#2-分支" class="headerlink" title="2 分支"></a>2 分支</h3><p>对于同一个触发事件，可以根据不同的警戒条件转向不同的活动，每个可能的转移是一个分支。</p>
<img src="/2020/04/24/UML%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%EF%BC%89/8.png" class="">

<h3 id="3-泳道"><a href="#3-泳道" class="headerlink" title="3 泳道"></a>3 泳道</h3><p>泳道（swimlane）是活动图中的区域划分，根据每个活动的职责对所有活动进行划分，每个泳道代表一个责任区。</p>
<p>泳道和类并不是一一对应的关系，泳道关心的是其所代表的职责，一个泳道可能由一个类实现，也可能由多个类实现。</p>
<img src="/2020/04/24/UML%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%EF%BC%89/10.png" class="">

<h3 id="4-分叉和汇合"><a href="#4-分叉和汇合" class="headerlink" title="4 分叉和汇合"></a>4 分叉和汇合</h3><p>表示系统或对象中的并发行为。</p>
<p><strong>分叉</strong>表示的是一个控制流被两个或多个控制流代替，经过分叉后，这些控制流是并发进行的。</p>
<p><strong>汇合</strong>正好与分叉相反，表示两个或多个控制流被一个控制流代替</p>
<img src="/2020/04/24/UML%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%EF%BC%89/9.png" class="">

<h3 id="5-对象流"><a href="#5-对象流" class="headerlink" title="5 对象流"></a>5 对象流</h3><p>对象可以作为活动的输入或输出。如一个活动创建对象（作为活动的输出）或使用对象（作为活动的输入）。</p>
<p>对象流是一种特殊的控制流，表示活动和对象之间的关系。</p>
<p>活动可以修改对象状态。</p>
<p>在UML规范中，活动图中的对象用矩形表示，其中包含带下划线的类名。类名下方的方括号中给出的是状态名，表明对象此时的状态。<font color="red">用带箭头的虚线表示对象流。</font></p>
<h3 id="6-信号-1"><a href="#6-信号-1" class="headerlink" title="6 信号"></a>6 信号</h3><p>同状态图中的“信号”概念。<br>信号是表示两个对象之间异步通信的方式。当一个对象接收到一个信号时，信号事件发生。</p>
<p>一般情况下，在状态图中表示信号事件，在活动图中不表示信号事件。</p>
<p>在UML中，对活动图中的信号发生和信号接收进行了图形符号的规定。<font color="red">凸五边</font>形代表信号发生，<font color="red">凹五边</font>形代表信号接收。</p>
<p>例子：在下图中，名为Order的信号被发送给外部对象:MailOrderCompany。接收从外部对象:MailOrderCompany发来的信号Goods delivered。</p>
<img src="/2020/04/24/UML%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%EF%BC%89/11.png" class="">

<h2 id="6-3-2-活动图的用途"><a href="#6-3-2-活动图的用途" class="headerlink" title="6.3.2 活动图的用途"></a>6.3.2 活动图的用途</h2><p><font color="red">活动图对表示并发行为非常有用。</font></p>
<p>活动图可以对系统的工作流程建模，即系统的业务过程建模；也可以对具体的操作建模，用于描述计算过程的细节。</p>
<h2 id="6-3-3-活动图的建模步骤"><a href="#6-3-3-活动图的建模步骤" class="headerlink" title="6.3.3 活动图的建模步骤"></a>6.3.3 活动图的建模步骤</h2><h3 id="1、定义活动图的范围。"><a href="#1、定义活动图的范围。" class="headerlink" title="1、定义活动图的范围。"></a>1、定义活动图的范围。</h3><p>首先应该明确要在什么范围内建立活动模型。是单个用例，或一个用例的一部分，或一个包含多个用例的业务流程，还是一个类的单个方法？</p>
<p>定义了所作图的范围，<font color="red">在其顶部用一个标注添加标签，指明该图的标题和唯一的标识符。</font></p>
<h3 id="2、添加起始点和结束点。"><a href="#2、添加起始点和结束点。" class="headerlink" title="2、添加起始点和结束点。"></a>2、添加起始点和结束点。</h3><h3 id="3、添加活动。"><a href="#3、添加活动。" class="headerlink" title="3、添加活动。"></a>3、添加活动。</h3><p>无论是对用例建模，还是对方法的算法建模，将相关性强的主要步骤放入到一个活动中。如果是对一个高层的业务流程建模，对每个主要流程引入一个活动，通常为一个用例或用例包。</p>
<h3 id="4、添加活动间的变迁和决策点。"><a href="#4、添加活动间的变迁和决策点。" class="headerlink" title="4、添加活动间的变迁和决策点。"></a>4、添加活动间的变迁和决策点。</h3><p>如果一个活动有多个变迁，则使用分支，必须对每个变迁加以标识。如果所建的逻辑需要做出一个决策或判断，则有可能需要检查某些事务或比较某些事务。</p>
<h3 id="5、找出可并行活动之处。"><a href="#5、找出可并行活动之处。" class="headerlink" title="5、找出可并行活动之处。"></a>5、找出可并行活动之处。</h3><p>当两个活动间没有直接的联系，而且它们都必须在第三个活动开始前结束，那它们是可以并行运行的。</p>
<h2 id="6-3-4-活动图的例子"><a href="#6-3-4-活动图的例子" class="headerlink" title="6.3.4 活动图的例子"></a>6.3.4 活动图的例子</h2><img src="/2020/04/24/UML%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%EF%BC%89/12.png" class="">

<h1 id="6-4-状态图与活动图的区别"><a href="#6-4-状态图与活动图的区别" class="headerlink" title="6.4 状态图与活动图的区别"></a>6.4 状态图与活动图的区别</h1><p><strong>状态：</strong>一个对象所处的境况。通常是执行了一个（或多个）活动后的结局。<br><strong>活动</strong>：一段程序代码的执行，对应于若干个步骤的集成。</p>
<p>不同的<strong>状态</strong>会导致不同的功能（对应于若干个活动）的执行。</p>
<p>当一个<strong>活动</strong>被执行时，对应于对象的一个<strong>方法</strong>中的若干个（或者全部的）语句的执行。<br>一个<strong>方法</strong>可能需要多个（也可以是一个）<strong>活动</strong>来完成。<br>一个<strong>活动</strong>只能属于一个<strong>方法</strong>。</p>
<p><strong>活动</strong>是一个用例的几个流程步骤的集成。<br>通常，一个用例描述对应于一个活动图。因此，一个<strong>用例</strong>对应于若干个<strong>活动</strong>。</p>
<h3 id="状态图与活动图的区别："><a href="#状态图与活动图的区别：" class="headerlink" title="状态图与活动图的区别："></a>状态图与活动图的区别：</h3><ol>
<li>两者描述重点不同。<ul>
<li>状态图描述的是一个对象的生命周期内的状态及状态之间的转移，以及引起状态转移的时间和对象在状态中的动作等。</li>
<li>活动图描述的是从活动到活动的控制流，用于描述多个对象在交互时采取的活动，它关注对象如何相互活动以完成一个事务。</li>
</ul>
</li>
<li>使用场合不同。<ul>
<li>状态图：显示一个对象在其生命周期内的行为</li>
<li>活动图：分析用例，或理解涉及多个用例的工作流程，或处理多线程应用等</li>
</ul>
</li>
<li>用途不同。<ul>
<li>状态图的主要用途是为了一个对象在其生命周期中的一组属性值对所发生的事件的反应的建模。</li>
<li>活动图的主要用途有两种：业务流程建模；为对象的特定操作建模。</li>
</ul>
</li>
<li>包含的动作的性质不同。<ul>
<li>状态图中的动作是原子计算的，不能被分解</li>
<li>活动图中的动作有动作和活动之分；前者是原子计算的，不能被分解。而后者是非原子计算的，可以被分解。</li>
</ul>
</li>
<li>包含的动作的场所不同。<ul>
<li>状态图中的动作发生在状态中或转移中。</li>
<li>活动图中的动作可以放在泳道中。</li>
</ul>
</li>
<li>包含的动作的执行条件不同。<ul>
<li>状态图中的动作的执行需要事件的触发</li>
<li>活动图中的动作的执行不需要事件的触发</li>
</ul>
</li>
<li>与对象的关系不同。<ul>
<li>状态图中可以表示对象的属性值。</li>
<li>活动图中既可以表示对象的值流，也可以表示动作的控制流。</li>
<li>对象的值流表示中既可以反映出输入输出值，又可以反映出参数传递的流动方向。</li>
</ul>
</li>
<li>在软件生命周期中的阶段位置不同。<ul>
<li>状态图只在系统设计阶段使用</li>
<li>活动图既可以在系统需求分析阶段使用，也可以在系统设计阶段使用</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（列表、元组）</title>
    <url>/2020/04/23/Python%EF%BC%88%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>组合数据类型：将多个数据组合为一个整体，同时又能访问每个数据</p>
<img src="/2020/04/23/Python%EF%BC%88%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%EF%BC%89/1.png" class="">

<hr>
<h1 id="1-列表"><a href="#1-列表" class="headerlink" title="1 列表"></a>1 列表</h1><h2 id="1-1-序列类型的索引体系"><a href="#1-1-序列类型的索引体系" class="headerlink" title="1.1 序列类型的索引体系"></a>1.1 序列类型的索引体系</h2><p>列表和字符串都是<font color="red">序列类型</font>，序列类型的数据中元素的索引号都使用相同的索引体系。 </p>
<a id="more"></a>

<p>递增序号方式： 索引号从左到右依次是  0，1，2，……</p>
<p>递减序号方式： 索引号从右到左依次是  -1，-2，-3，……</p>
<p>如图所示：<img src="/2020/04/23/Python%EF%BC%88%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%EF%BC%89/2.png" class=""></p>
<h2 id="1-2-列表的创建"><a href="#1-2-列表的创建" class="headerlink" title="1.2 列表的创建"></a>1.2 列表的创建</h2><p>方法1： 用[]创建</p>
<pre><code>list1 = [] #创建空列表
list2 = [10,20,30] #创建列表，3个元素
list3 = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</code></pre><p>方法2：用list()函数创建</p>
<pre><code>list4 = list( ) #创建空列表
list5 = list(&#39;python&#39;) #[&#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]
list6 = list(range(5)) #创建列表 [0,1,2,3,4]</code></pre><p><font color="red">用list()创建列表，可以将字符换等其他类型的数据转换为列表。</font></p>
<h2 id="1-3-删除列表"><a href="#1-3-删除列表" class="headerlink" title="1.3 删除列表"></a>1.3 删除列表</h2><p>del命令，删除变量，释放空间。</p>
<pre><code>list2 = [10,20,30]
del list2
pritn(list2)
结果：
#NameError: name &#39;list2&#39; is not defined</code></pre><p>提示：当列表中数据量很大时，才有必要在不需要时及时删除</p>
<h2 id="1-4-表元素的提取"><a href="#1-4-表元素的提取" class="headerlink" title="1.4 表元素的提取"></a>1.4 表元素的提取</h2><h3 id="1-4-1-单个元素的访问：-列表名-索引号"><a href="#1-4-1-单个元素的访问：-列表名-索引号" class="headerlink" title="1.4.1 单个元素的访问： 列表名[索引号]"></a>1.4.1 单个元素的访问： 列表名[索引号]</h3><pre><code>score_list=[80,90,70,65,85,45]  
#提取列表中索引号为 0 的元素，结果80
print(score_list[0])      
#提取列表中的最后一个元素(索引号为-1)，结果45
print(score_list[-1])
#下标超出范围，报错：IndexError: list index out of range
print(score_list[10])</code></pre><h3 id="1-4-2-提取多个元素-子列表-：切片"><a href="#1-4-2-提取多个元素-子列表-：切片" class="headerlink" title="1.4.2 提取多个元素(子列表)：切片"></a>1.4.2 提取多个元素(子列表)：切片</h3><p>格式： listname[start：end：step]；三个参数的默认值：0，lenth，1</p>
<p>功能：以step为步长，获取索引号为 <font color="red">[start ,end) </font>的元素。</p>
<p>特别注意： 索引号从start开始，到end结束，但不包括索引号为end的元素。</p>
<pre><code>score_list=[30,50,60,70,80,90,95,100]
#提取索引号 2～4 的元素,结果[60,70,80]
sc_list1=score_list[2:5]
#提取下标 2～7 之间的元素，步长为,结果[60, 80, 95]
sc_list2 = score_list[2:8:2]
#提取下标-1~-2 之间的元素，步长为-1,结果[100, 95]
sc_list3 = score_list[-1:-3:-1]</code></pre><h2 id="1-5-列表元素的添加"><a href="#1-5-列表元素的添加" class="headerlink" title="1.5 列表元素的添加"></a>1.5 列表元素的添加</h2><pre><code>方法1：list.append(x)        
#将元素x添加到列表的末尾,只能添加1个

方法2：list.insert(index,x)
#将元素 x 插入 index 指定的下标位置，原来该位置的元素及其以后的元素都后移一个位置。

方法3：list.extend(list_2)
#将列表 list_2 添加到列表 list 的末尾。

方法4： + 和 * 操作符
[1,2,3]+[4,5,6]   #结果为[1,2,3,4,5,6]
[2,3]*3   #结果为[2,3,2,3,2,3]</code></pre><p>append()、inser()、extend()、的异同点：</p>
<p><strong>共同点：</strong> 1.添加元素 2.原地操作（列表的首地址不变）</p>
<p><strong>不同点：</strong> 1.添加元素的个数或位置不同 2.效率不同；append()最快</p>
<h2 id="1-6-列表元素的删除"><a href="#1-6-列表元素的删除" class="headerlink" title="1.6 列表元素的删除"></a>1.6 列表元素的删除</h2><p>方法1：用del 命令删除指定索引号的元素</p>
<pre><code>del score_list[1] #删除索引号为1的元素</code></pre><p>方法2：用pop(n) 删除索引号为n的元素，并返回该元素，默认返回最后一个元素</p>
<pre><code>item = score_list.pop(2) #删除索引号为2的元素，并将该元素的值返回，赋给item</code></pre><p>方法3：用 remove(x)移除列表中首个值为x的元素</p>
<pre><code>score_list.remove(65) #删除列表中第一个值为65的元素</code></pre><h2 id="1-7-列表元素的修改"><a href="#1-7-列表元素的修改" class="headerlink" title="1.7 列表元素的修改"></a>1.7 列表元素的修改</h2><p>列表是可变类型，其元素是可以被修改的。 </p>
<p>方法：给元素重新赋值</p>
<pre><code>lista = [&#39;Google&#39;, &#39;山东&#39;, 1997, 2000]
lista[0]=&#39;Microsoft&#39;
print(lista)
结果：[&#39;Microsoft&#39;, &#39;山东&#39;, 1997, 2000]

str=&quot;Google&quot;
str[0]=&#39;M&#39; #报错，字符串对象不支持元素的赋值</code></pre><h2 id="1-8-列表的高级操作"><a href="#1-8-列表的高级操作" class="headerlink" title="1.8 列表的高级操作"></a>1.8 列表的高级操作</h2><p>max(list) #求列表中最大值</p>
<p>min(list) #求列表中最小值</p>
<p>sum(list) #列表元素求和</p>
<p>len(list) #求列表长度，即元素个数</p>
<p>list.index(var)#查找元素var的索引号</p>
<p>list.reverse()#列表元素逆序</p>
<p>list.sort()#升序</p>
<p>list.sort(reverse=True)#降序</p>
<h2 id="1-9-list列表化range-函数"><a href="#1-9-list列表化range-函数" class="headerlink" title="1.9 list列表化range()函数"></a>1.9 list列表化range()函数</h2><pre><code>格式1：range(end)
功能：产生[0,end) 之间、步长为1的数列 
如：list(range(10)) 结果[0,1,...,9]

格式2：range(start,end,step)
功能：产生[start,end) 之间、步长为step的数列 
如：list(range(1,5)) 结果：[1，2，3，4]</code></pre><h2 id="1-10-列表与字符串转换"><a href="#1-10-列表与字符串转换" class="headerlink" title="1.10 列表与字符串转换"></a>1.10 列表与字符串转换</h2><p>例：www.google.com转换成[‘www’,’google’,’com’]</p>
<pre><code>stra=&#39;www.google.com&#39;
#将字符串以“.”分割为多个列表元素[&#39;www&#39;,&#39;google&#39;,&#39;com&#39;]
lista=stra.split(&#39;.&#39;)
print(lista)#结果：[&#39;www&#39;, &#39;google&#39;, &#39;com&#39;]
#将列表listb中的元素用字“.”连接为一个字符
strb=&#39;.&#39;.join(lista)
print(strb)#结果：www.google.com</code></pre><h2 id="1-10-列表生成式"><a href="#1-10-列表生成式" class="headerlink" title="1.10 列表生成式"></a>1.10 列表生成式</h2><p>语法：[列表元素运算表达式 for 循环 in 列表 ]</p>
<pre><code>#例：将列表lista中的每个元素x的值加1，生成一个新的列表
[ x+1 for x in lista ]

#例：将1~10的数字平方，生成一个新的列表
data=[x*x for x in range(1,11)]
结果：[1,4,9,16,...,100]</code></pre><p>语法：[列表元素运算表达式 for 循环 if 条件]</p>
<pre><code>#例：找出列表C=[1,3,-3,4,-2,8,-7,6]中大于0的数
d=[x for x in C if x&gt;0]</code></pre><h1 id="2-元组"><a href="#2-元组" class="headerlink" title="2 元组"></a>2 元组</h1><h2 id="2-1-元组的定义"><a href="#2-1-元组的定义" class="headerlink" title="2.1 元组的定义"></a>2.1 元组的定义</h2><p> 用<font color="red">“( )”</font>括起来，中间用<font color="red">“逗号”</font>分隔，元素类型可不同；</p>
<p> 元组是<font color="red">有序序列</font>，可以通过索引号访问元素；</p>
<p> 元组是<font color="red">不可变序列</font>，元组中的元素是不能被改变的.</p>
<h2 id="2-2-元组的创建"><a href="#2-2-元组的创建" class="headerlink" title="2.2 元组的创建"></a>2.2 元组的创建</h2><p>方法1：用（）</p>
<pre><code>tup1 = ( )  #创建空元组
tup2 = ( 90, ‘hello’, 67 ) #创建三个元素的元组
tup3 = (6，)  #创建单元素元组，注意加逗号。没有逗号会是Int类型
tup4 = 1,2,3,4  #省略圆括号，系统自动转换为元组</code></pre><p>方法2：用tuple()函数，括号中只能有一个参数</p>
<pre><code>tup5 = tuple( )   #用tuple函数创建空元组
tup6 = tuple(range(5)) #使用range创建整数序列元组(0,1,2,3,4)
tup7 = tuple([1,2,3])  #将列表转换为元组 (1, 2, 3)
tup8 = tuple(‘678’)  #将字符串转换为元组(‘6’, ‘7’, ‘8’)</code></pre><p>使用tuple()创建元组，可以将列表、字符串等其他类型的数据转换为元组</p>
<h2 id="2-3-元组的删除"><a href="#2-3-元组的删除" class="headerlink" title="2.3 元组的删除"></a>2.3 元组的删除</h2><pre><code>tup1=(1,2,3)
del tup1 #整体删除</code></pre><p>元组是不可变序列，不能删除和修改单个元素</p>
<h2 id="2-4-访问元组的元素"><a href="#2-4-访问元组的元素" class="headerlink" title="2.4 访问元组的元素"></a>2.4 访问元组的元素</h2><p>方法1：通过索引号获得单个元组元素</p>
<pre><code>tup1=( 9, 87, 67, 99, 65 )
print( tup1[2] ) #输出67</code></pre><p>方法2：通过切片获得元组的多个元素（新元组）</p>
<pre><code>tup1=( 9, 87, 67, 99, 65 )
print( tup1[2:]) #输出（67, 99, 65）
print( tup1[: : 2]) #输出元组（9，67，65）</code></pre><h2 id="2-5-元组的常用操作"><a href="#2-5-元组的常用操作" class="headerlink" title="2.5 元组的常用操作"></a>2.5 元组的常用操作</h2><img src="/2020/04/23/Python%EF%BC%88%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%EF%BC%89/3.png" class="">

<hr>
<p>zip(a,b) 打包，结果为zip类型（列表a,b中对应元素打包）。</p>
<p>zip(*list) 解包，将zip后的列表数据还原，结果为zip类型。</p>
<pre><code>a=[1,2,3];b=[4,5,6]
#打包
c=list(zip(a,b))
print(c)    #结果[(1,4),(2,5),(3,6)]
#解包
k=zip(*c)
print(list(k))    #结果：[(1,2,3),(4,5,6)]
print(type(k))    #&lt;class &#39;zip&#39;&gt;</code></pre><h2 id="2-6-列表与元组的综合应用"><a href="#2-6-列表与元组的综合应用" class="headerlink" title="2.6 列表与元组的综合应用"></a>2.6 列表与元组的综合应用</h2><p>例：a[1,2,3,4,5] ；b[‘a’,’b’,’c’,’d,’e’]；如何得到c[‘a1’,’b2’,’c3’,’d4’,’e5’]]</p>
<pre><code>#快捷方法
c=[bi+str(ai) for bi,ai in zip(b,a)]

#传统方法
c=[]
for k in range[5]:
    c.append(b[k]+str(a[k]))</code></pre>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>UML（第五章：顺序图、协作图）</title>
    <url>/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/04/17/UML（第五章：顺序图、协作图）/#1">5.1 交互模型概述</a></p>
<p><a href="/2020/04/17/UML（第五章：顺序图、协作图）/#2">5.2 顺序图</a></p>
<p><a href="/2020/04/17/UML（第五章：顺序图、协作图）/#3">5.3 顺序图中的消息</a></p>
<p><a href="/2020/04/17/UML（第五章：顺序图、协作图）/#4">5.4 建立顺序图概述</a></p>
<p><a href="/2020/04/17/UML（第五章：顺序图、协作图）/#5">5.5 协作图</a></p>
<p><a href="/2020/04/17/UML（第五章：顺序图、协作图）/#6">5.6 建立协作图概述</a></p>
<p><a href="/2020/04/17/UML（第五章：顺序图、协作图）/#7">5.7 交互建模中常见的问题</a></p>
</blockquote>
<h1 id="5-1-交互模型概述"><a href="#5-1-交互模型概述" class="headerlink" title="5.1 交互模型概述"></a><span id="1">5.1 交互模型概述</span></h1><h2 id="5-1-1-静态结构和动态结构"><a href="#5-1-1-静态结构和动态结构" class="headerlink" title="5.1.1 静态结构和动态结构"></a>5.1.1 静态结构和动态结构</h2><p>所有系统均可表示为两个方面：<font color="red">静态结构</font>和<font color="red">态行为</font></p>
<p>静态结构——使用<font color="red">类图</font>，说明系统包含哪些对象类以及它们之间的关系。</p>
<p>动态行为——使用<font color="red">顺序图、协作图、状态图、活动图</font>，说明系统中的各个对象是如何交互协作来实现系统的功能，每个对象的状态变化规律。</p>
<h2 id="5-1-2-交互模型"><a href="#5-1-2-交互模型" class="headerlink" title="5.1.2 交互模型"></a>5.1.2 交互模型</h2><p>软件系统中的任务是通过对象之间的<font color="red">合作</font>来完成的。对象之间的合作是通过<font color="red">息的传递</font>实现的。</p>
<p>对象之间的合作在UML中被称为<font color="red">交互</font>。即<font color="red">交互是一组对象之间为完成某一任务（操作）而进行的一系列信息交互的行为说明</font>。</p>
<a id="more"></a>

<p>交互可以对软件系统某一任务而必须实施的动态行为进行建模。</p>
<p><font color="blue">顺序图</font>着重描述对象按照时间顺序的消息交换。</p>
<p><font color="blue">协作图</font>着重描述系统成分如何协同工作（侧重于空间的协作）。</p>
<p><font color="blue">顺序图和协作图</font>从不同的角度表达了系统中的交互及系统的行为，他们之间可以相互转化。</p>
<p>交互模型可以帮助分析人员对照检查每个用例中所描述的用户需求，审查这些需求是否已经落实到能够完成这些功能的类中去实现。</p>
<p>交互模型和类图可以相互补充。</p>
<p>交互模型描述的是对象之间的消息发送关系，而不是类之间的关系</p>
<p>交互模型中一般不会包括系统中所有类的对象，但同一个类可以有多个对象出现在交互模型中。</p>
<p>交互模型适合于描述一组对象的整体行为。其本质是对象间协作关系的模型。</p>
<p><strong>赤壁之战对象：</strong></p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/8.png" class="">

<p><strong>赤壁之战时序图：</strong></p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/7.png" class="">

<p><strong>赤壁之战协作图：</strong></p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/9.png" class="">

<h1 id="5-2-顺序图"><a href="#5-2-顺序图" class="headerlink" title="5.2 顺序图"></a><span id="2">5.2 顺序图</span></h1><p><strong>顺序图也称为时序图</strong></p>
<p>Rumbaugh对顺序图的定义是：顺序图是现实对象之间交互的图，这些对象是按照时间顺序排列的。特别地，顺序图中显示的是参与交互的对象与对象之间消息交互的顺序。</p>
<p><strong>顺序图</strong>可以用来描述场景，也可以详细表示对象之间及对象与参与者之间的交互。</p>
<p>系统开发的早期阶段，高层表达场景；系统开发的后续阶段，显示确切的对象之间的消息传递。</p>
<p><strong>顺序图是一个二维图形。</strong></p>
<p>水平方向为<strong>对象维</strong>。沿水平方向排列的是<strong>参与交互的对象</strong>（一般把表示参与者的对象放在图的两侧，主要参与者放在最左边，次要参与者放在最右边。）</p>
<p>垂直方向为<strong>时间维</strong>。沿垂直向下方向按时间递增顺序列出<strong>各对象所发出和接收的消息</strong></p>
<p>顺序图的建模元素：</p>
<ul>
<li>对象：同类图中的对象，是类的实例</li>
<li>生命线：从对象图标向下延伸的一条虚线，表示对象存在的生命期</li>
<li>控制焦点（激活期）：对象执行一个动作的时间段</li>
<li>消息：对象间的一次通信</li>
</ul>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/2.png" class="">

<h2 id="5-2-1-对象"><a href="#5-2-1-对象" class="headerlink" title="5.2.1 对象"></a>5.2.1 对象</h2><p>在水平方向上的对象并不都是处于一排的，而是错落有致的。</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/1.png" class="">

<h2 id="5-2-2-生命线"><a href="#5-2-2-生命线" class="headerlink" title="5.2.2 生命线"></a>5.2.2 生命线</h2><p>从对象图标向下延伸的一条虚线，表示对象存在的生命期。因而可以看出是时间轴。</p>
<p>生命线表示对象在一段时间内的存在。</p>
<p>规则：</p>
<ul>
<li>图的顶部放置在所有的通信开始前就存在的对象。</li>
<li>如果一个对象在图中被创建，那么就把创建对象的消息的箭线的头部画在对象图标符号上。</li>
<li>当一个对象被删除或自我删除时，该对象用×标识，标记它的析构。</li>
</ul>
<h2 id="5-2-3-控制焦点"><a href="#5-2-3-控制焦点" class="headerlink" title="5.2.3 控制焦点"></a>5.2.3 控制焦点</h2><p>控制焦点是顺序图中表示时间段的符号，在这个时间段内，对象将执行相应的操作。控制焦点表示为在生命线上的<font color="red">小矩形</font>。</p>
<p>矩形的顶端表示活动的开始时刻。</p>
<p>矩形的末端和它的结束时刻对齐。表示活动的结束时刻。</p>
<p>控制焦点可以嵌套，即当对象调用它自己的方式或接收另一个对象的回调时，在现有的控制焦点上要表示出一个新的控制焦点。</p>
<p>§嵌套的控制焦点可以更精确地说明消息的开始和结束位置。</p>
<h2 id="5-2-4-消息"><a href="#5-2-4-消息" class="headerlink" title="5.2.4 消息"></a>5.2.4 消息</h2><p><strong>一条消息是一次对象间的通信。</strong></p>
<p>消息在顺序图中表示为从一个对象（发送者）的生命线指向另一个对象（目标）的生命线的带箭头的实线。</p>
<p>每一个消息必须有一个说明，内容包括名称和参数。</p>
<p>消息的名字应以小写字母开头。</p>
<p><strong>消息按时间顺序从顶到底垂直排列。</strong></p>
<p>带箭头的虚线用来表示过程调用的返回。</p>
<p>在过程的控制流中，可以省略返回箭线，这种用法假设在每个调用后都有一个配对的返回。</p>
<p>对于非过程控制流，如果需要的话，应该显示地标出返回消息。</p>
<h2 id="5-2-5-分支"><a href="#5-2-5-分支" class="headerlink" title="5.2.5 分支"></a>5.2.5 分支</h2><p><strong>分支是指从同一点发出多条消息并指向不同的对象。</strong></p>
<p>两种类型的分支：<strong>条件分支、并行分支</strong></p>
<p>条件分支：在复杂的业务处理过程中，要根据不同的条件进入不同的处理流程。</p>
<p>并行分支：当执行到某一点时，需要向两个或两个以上的对象发送消息。</p>
<h2 id="5-2-6-从属流"><a href="#5-2-6-从属流" class="headerlink" title="5.2.6 从属流"></a>5.2.6 从属流</h2><p><strong>从属流</strong>是指从同一点发出多条消息并指向同一个对象的不同生命线，即由于不同的条件而执行了不同的生命线分支。</p>
<h1 id="5-3-顺序图中的消息"><a href="#5-3-顺序图中的消息" class="headerlink" title="5.3 顺序图中的消息"></a><span id="3">5.3 顺序图中的消息</span></h1><h2 id="5-3-1-调用消息"><a href="#5-3-1-调用消息" class="headerlink" title="5.3.1 调用消息"></a>5.3.1 调用消息</h2><p><strong>调用消息：发送者把控制传递给消息的接收者，然后停止活动，等待消息接收者放弃或返回控制。</strong></p>
<p>调用消息可以用来表示<strong>同步</strong>的意义。</p>
<p>调用消息的接收者必须是一个被动对象，即它是一个需要通过消息驱动才能执行动作的对象。</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/3.png" class="">

<h2 id="5-3-2-异步消息"><a href="#5-3-2-异步消息" class="headerlink" title="5.3.2 异步消息"></a>5.3.2 异步消息</h2><p><strong>异步消息：发送者通过消息把信号传递给消息的接收者，然后继续自己的活动，不等待接收者返回消息或控制。</strong></p>
<p>异步消息的接收者和发送者是并发工作的。</p>
<h2 id="5-3-3-返回消息"><a href="#5-3-3-返回消息" class="headerlink" title="5.3.3 返回消息"></a>5.3.3 返回消息</h2><p><strong>返回消息：表示从过程调用返回。</strong></p>
<p>过程调用指消息名和接收消息的接收对象的方法名相同，即消息直接调用了接收对象的某个方法。</p>
<p>非过程调用指消息是事件发送（即信号），该事件的出现修改了变量的值，从而导致了接收对象的某个方法的执行。</p>
<p><strong>调用消息一定是过程调用，一定存在返回消息，可以不用画出来。</strong></p>
<p>异步消息有的是过程调用，有的是非过程调用。无论哪种情况，如果异步消息有返回消息，则一定要画出来。</p>
<p>返回消息都是异步消息，可以并发运行。</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/4.png" class="">

<h2 id="5-3-4-阻止消息"><a href="#5-3-4-阻止消息" class="headerlink" title="5.3.4 阻止消息"></a>5.3.4 阻止消息</h2><p>阻止消息：消息发送者发出消息给接收者，如果接收者无法立即接收消息，则发送者放弃这个消息。</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/5.png" class="">

<h2 id="5-3-5-超时消息"><a href="#5-3-5-超时消息" class="headerlink" title="5.3.5 超时消息"></a>5.3.5 超时消息</h2><p>超时消息：消息发送者发出消息给接收者并按指定时间等待。如果接收者无法在指定时间内接收消息，则发送者放弃这个消息。</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/6.png" class="">

<h2 id="5-3-6-消息的语法格式"><a href="#5-3-6-消息的语法格式" class="headerlink" title="5.3.6 消息的语法格式"></a>5.3.6 消息的语法格式</h2><p>[predecessor] [guard-condition] [sequence-expression] [return-value:=] message-name ([argument-list])</p>
<p>[先行消息] [警戒条件] [消息顺序项] [返回值:=] 消息名 ([参数列表])</p>
<p><strong>先行消息：predecessor</strong>——必须先发生的消息的列表，是一个用来同步线程或路径的表达式。其中，消息列表中的各消息号用逗号分隔。</p>
<p><strong>sequence-number ‘,’…’/‘</strong></p>
<p><strong>警戒条件：guard-condition</strong>——消息执行前必须满足的警戒条件。在方括号中的布尔表达式，表示只有在条件满足时才能发送消息。</p>
<p><strong>消息顺序项：sequence-expression</strong>——消息顺序项的列表。多个消息顺序项用英文点号.分割，以冒号：结束。</p>
<p><strong>消息顺序项的语法格式：[integer</strong> <strong>|</strong> <strong>name] [recurrence]</strong></p>
<ul>
<li><strong>integer</strong>——消息序号</li>
<li><strong>name</strong>——并发的控制线程名</li>
<li><strong>recurrence</strong>——表示消息是条件执行或循环执行</li>
</ul>
<p><strong>return-value</strong>——消息的返回值</p>
<p><strong>message-name</strong>——消息名</p>
<p><strong>argument-list</strong>——消息的参数列表</p>
<table>
<thead>
<tr>
<th align="center"><strong>2:display(x,y)</strong></th>
<th><strong>简单消息</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>1.3.1:p:=find(specs)</strong></td>
<td><strong>嵌套消息，消息带返回值</strong></td>
</tr>
<tr>
<td align="center"><strong>[x&lt;0]4:invert(x,color)</strong></td>
<td><strong>警戒条件消息或条件发送消息</strong></td>
</tr>
<tr>
<td align="center"><strong>4.2[x&gt;y]:invert(x,color)</strong></td>
<td><strong>条件发送消息</strong></td>
</tr>
<tr>
<td align="center"><strong>3.1*:update()</strong></td>
<td><strong>循环发送消息</strong></td>
</tr>
<tr>
<td align="center"><strong>A3,B4/C2:copy(a,b)</strong></td>
<td><strong>线程间同步</strong></td>
</tr>
<tr>
<td align="center"><strong>1.1a,1.1b/1.2:continue()</strong></td>
<td><strong>同时发送的并发消息作为先发消息序列</strong></td>
</tr>
</tbody></table>
<h2 id="5-3-7-调用消息与异步消息的对比"><a href="#5-3-7-调用消息与异步消息的对比" class="headerlink" title="5.3.7 调用消息与异步消息的对比"></a>5.3.7 调用消息与异步消息的对比</h2><p>调用消息主要用于控制流在完成之前需要中断的情况，异步消息主要用于控制流在完成之前不需要中断的情况。</p>
<p>例：学生成绩管理系统</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/10.png" class="">

<p>在账号和密码的对错判断完成之前，对象“:Web页面”的第一个控制焦点表达的活动必须被中断。因此，“用户验证()”消息是调用消息。</p>
<p>在进行分数登记的时候，同时会写入日志文件，即分数登记操作不需要中断。也就是说，对象“:分数登记”的控制焦点表达的活动不会被中断。因此，“写入日志文件()”消息是异步消息。</p>
<h1 id="5-4-建立顺序图概述"><a href="#5-4-建立顺序图概述" class="headerlink" title="5.4 建立顺序图概述"></a><span id="4">5.4 建立顺序图概述</span></h1><h2 id="5-4-1-顺序图的建模策略"><a href="#5-4-1-顺序图的建模策略" class="headerlink" title="5.4.1 顺序图的建模策略"></a>5.4.1 顺序图的建模策略</h2><ol>
<li>按照当前交互的意图，详细审阅相关资料（如用例描述），设置交互的语境，确定将要建立的工作流。</li>
<li>通过识别对象在交互中扮演的角色，在顺序图的上部分列出所选定的一组对象，并为每个对象设置生命线。把发起交互的对象放在左边，可以是一般类、边界类、控制类、实体类。</li>
<li>对于那些在交互期间要被创建或撤销的对象，在适当的时候，用消息箭线在他们的生命线上显示地予以指明。</li>
<li>在各个对象下方的生命线上，按使用该对象操作的先后顺序排列各个代表操作的窄矩形条。</li>
<li>决定消息将以怎样或什么样的顺序在对象之间传递，选择适当的消息类型，画出箭线，并在其上标明消息名。</li>
<li>两个对象的操作执行如果属于同一个控制线程，则接收者操作的执行应在发送者发出消息之后进行，并在发送者结束之前结束。不同控制线程之间的消息有可能在接收者的某个操作的执行过程中到达。</li>
<li>如果需要表示消息的嵌套，或<strong>/</strong>和表示消息发生的时间点，则采用控制焦点。</li>
<li>如果需要，则可以对对象所执行的操作的功能及时间或空间约束进行描述。</li>
<li>如果需要，则可以为每个消息附上前置条件和后置条件。</li>
<li>如果需要可视化消息的迭代或分支，则使用迭代或分支表示法。</li>
</ol>
<h2 id="5-4-2-顺序图的建模"><a href="#5-4-2-顺序图的建模" class="headerlink" title="5.4.2 顺序图的建模"></a>5.4.2 顺序图的建模</h2><ol>
<li>根据一个用例的用例描述，找出基本事件流和可选事件流。</li>
<li>根据结构模型中确定的类，确定它在用例描述中的职责。一个职责对应该对象执行一个动作。</li>
<li>事件流的先后次序决定了消息的发送次序。一个消息导致接收消息的对象执行一个动作。</li>
<li>必要的话，表达出需要创建的对象和需要撤销的对象。</li>
<li>对于<strong>循环发送</strong>或<strong>分支发送</strong>的消息，使用消息顺序项进行表达。或者，使用交互架构表达。</li>
<li>在<strong>系统分析</strong>阶段，可以只使用一般意义下的类。在<strong>系统设计</strong>阶段，可以细分出边界类、控制类、实体类。</li>
</ol>
<h2 id="5-4-3-顺序图与用例图描述的关系"><a href="#5-4-3-顺序图与用例图描述的关系" class="headerlink" title="5.4.3 顺序图与用例图描述的关系"></a>5.4.3 顺序图与用例图描述的关系</h2><p>用例描述使用自然语言描述参与者使用系统的一项功能时，系统所执行的一系列的动作序列。</p>
<p>一个完整的消息发送序列表达了用例描述中一个事件流的具体的对象实现方案。</p>
<p>一个顺序图可以对应用例描述中的一个事件流。如果一个用例具有复杂的事件流，则需要多个顺序图进行描述。</p>
<p>通过顺序图，系统分析人员可以对照检查每个用例中所描述的用户需求，审查这些需求是否已经落实到能够完成这些功能的类中去实现，提醒分析人员去补充遗漏的类或方法，从而进一步完善类图。</p>
<h2 id="5-4-4-顺序图与类图的区别"><a href="#5-4-4-顺序图与类图的区别" class="headerlink" title="5.4.4 顺序图与类图的区别"></a>5.4.4 顺序图与类图的区别</h2><p>类图描述的是类和类之间的静态关系。通过类之间的关联关系，类图显示了信息的结构及信息间的静态联系。通过类之间的依赖关系，类图显示了类之间属性上和<strong>/</strong>或操作上的静态联系，但之中联系反映在程序代码上，不反映在类方法的调用上。</p>
<p>对象图描述的是对象之间的链的关系。描述对象之间的关联关系，不会反映对象之间消息传递的协作关系。</p>
<p>顺序图描述的是对象之间的动态关系。通过对象之间的消息传递，顺序图显示了对象方法上的调用关系和次序。</p>
<p>类图：关联关系、依赖关系</p>
<p>顺序图：协作关系</p>
<h2 id="5-4-5-顺序图"><a href="#5-4-5-顺序图" class="headerlink" title="5.4.5 顺序图"></a>5.4.5 顺序图</h2><p>例：建立银行ATM系统——取款</p>
<p>用例描述：</p>
<ol>
<li>要求用户输入取款金额</li>
<li>判断该储户的账户余额是否足额</li>
<li>若足额，则输出等额的人民币现金。修改账户余额</li>
<li>若不足额，则本次取款操作失败</li>
</ol>
<p>系统分析阶段的顺序图：</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/11.png" class="">

<p>系统设计阶段的顺序图：</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/12.png" class="">

<h1 id="5-5-协作图"><a href="#5-5-协作图" class="headerlink" title="5.5 协作图"></a><span id="5">5.5 协作图</span></h1><p><strong>协作描述实例间的关系以及在那些关系中实例所扮演的角色的静态集合。</strong></p>
<p>协作图用于描述相互合作的对象间的交互关系和链接关系。</p>
<p><strong>协作图也可以说明操作的执行、用例的执行或系统中的一次简单的交互情节。</strong></p>
<p>协作图不表示作为单独维度的时间，所以交互的顺序和并发进程、线程必须用消息顺序数来识别。</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/13.png" class="">

<h2 id="5-5-1-对象"><a href="#5-5-1-对象" class="headerlink" title="5.5.1 对象"></a>5.5.1 对象</h2><p><strong>对象：</strong>同类图中的对象，是类的实例</p>
<h2 id="5-5-2-链"><a href="#5-5-2-链" class="headerlink" title="5.5.2 链"></a>5.5.2 链</h2><p><strong>链：</strong>对象之间的连接关系</p>
<p>协作图中的对象之间关系首先是一种连接关系，这种关系可以是链，也可以是消息连接关系，或者同时具备二者。</p>
<p>链可以用于表示对象间的各种关系（组成关系链接、聚合关系链接、关联连接）</p>
<p>在链上可以添加一些修饰（角色、导航、模板信息、约束）</p>
<p>链的两端没有多重性标记。</p>
<p>对链上的角色可以附加的约束：<strong>global</strong>、<strong>local</strong>、<strong>parameter</strong>、<strong>self</strong>、<strong>vote</strong>、<strong>broadcast</strong>。</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/16.png" class="">

<h2 id="5-5-3-消息"><a href="#5-5-3-消息" class="headerlink" title="5.5.3 消息"></a>5.5.3 消息</h2><p><strong>消息：</strong>对象间的一次通信</p>
<p>协作图中消息表示为带有标签的箭头，附在连接发送者和接收者的链上。</p>
<p>链用于访问目标对象，箭头沿链指向接收者。</p>
<p>一个链上可以有多个消息，沿相同或不同的方向传递。</p>
<p>在协作图的链上，可以用带有消息描述符的消息来描述对象间的交互。</p>
<p>消息的箭头指明消息的流动方向。</p>
<p>消息描述符说明要发送的消息、消息参数、消息返回值及消息的序列号等信息。</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/17.png" class="">

<h2 id="5-5-4-对象生命周期"><a href="#5-5-4-对象生命周期" class="headerlink" title="5.5.4 对象生命周期"></a>5.5.4 对象生命周期</h2><p>对象在消息交互期间被创建，在对象名之后标以{new}结束。</p>
<p>对象在交互期间被撤销，在对象名之后标以{destroy}结束。</p>
<p>一个对象先被创建，后又被撤销，称为临时对象，标以{transient}</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/18.png" class="">

<h2 id="5-5-5-多对象"><a href="#5-5-5-多对象" class="headerlink" title="5.5.5 多对象"></a>5.5.5 多对象</h2><p><strong>多对象：</strong>由多个对象组成的对象集合（属于同一个类）。当需要把消息同时发给多个对象而不是单个对象时，就要使用多对象。</p>
<p>发送到多对象的消息被传递给整个集合，而不是任何个体对象。</p>
<p>多对象用多个方框的重叠表示。</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/14.png" class="">

<h2 id="5-5-6-主动对象"><a href="#5-5-6-主动对象" class="headerlink" title="5.5.6 主动对象"></a>5.5.6 主动对象</h2><p><strong>主动对象：</strong>是一组属性和一组方法的封装体，其中至少有一个方法不需要接收消息就能主动执行（主动方法）。</p>
<p>主动对象可以在不接受外部消息的情况下，自己开始一个控制流。</p>
<p>主要用来描述控制线程或并发进程。主动对象的主动方法的每一次执行都将开启一个进程或线程。</p>
<p>UML中用加粗的边框表示。</p>
<p>在Rose中是在对象名的左下方加active说明表示。</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/15.png" class="">

<hr>
<p>例：在一个统计销售的管理系统中，需要实现对每个销售员的订单和预算进行统计工作。</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/19.png" class="">

<h1 id="5-6-建立协作图的概述"><a href="#5-6-建立协作图的概述" class="headerlink" title="5.6 建立协作图的概述"></a><span id="6">5.6 建立协作图的概述</span></h1><p>协作图可以用于表示系统中的操作执行、用例执行或一个简单的交互场景。</p>
<p><strong>一个协作图只描述一个控制流。</strong></p>
<p>在<strong>系统分析阶段</strong>，可以只使用一般意义下的类。在<strong>系统设计阶段</strong>，可以细分出边界类、控制类、实体类。</p>
<h2 id="5-6-1-协作图的建模："><a href="#5-6-1-协作图的建模：" class="headerlink" title="5.6.1 协作图的建模："></a>5.6.1 协作图的建模：</h2><ol>
<li>明确交互语境。确定协作图中包含的元素或类。</li>
<li>通过识别对象在交互中扮演的角色，把它们作为图的顶点放在协作图中，将较重要的对象放在图中央，再放置邻近的对象。</li>
<li>如果对象的类之间有关联，可能就要在对象之间建立链，以说明这些对象是有联系的。</li>
<li>从引起这些交互的消息开始，将随后的每个消息附到适当的链上，并设置其顺序号。</li>
<li>如果需要表示消息的嵌套，则用*Dewey进制数表示法。</li>
<li>如果需要对时间或空间进行说明，则用适当的时间或空间约束修饰每个消息。</li>
<li>如果需要，可以为每个消息附上前置条件和后置条件</li>
</ol>
<hr>
<p>例：建立银行ATM机系统——取款</p>
<p>系统分析阶段的协作图：</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/20.png" class="">

<p>系统设计阶段的协作图：</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/21.png" class="">

<h2 id="5-6-2-协作图与顺序图"><a href="#5-6-2-协作图与顺序图" class="headerlink" title="5.6.2 协作图与顺序图"></a>5.6.2 协作图与顺序图</h2><p>§<strong>顺序图和协作图都属于交互模型，描述对象之间的动态关系。</strong></p>
<p>顺序图强调消息的时间顺序，协作图强调的是参与交互的对象的组织。</p>
<p>顺序图中有对象生命线、控制焦点；</p>
<p>协作图中有路径、消息顺序号；</p>
<p>两者在语义上是等价的，可以互相转换，但不能完全代替。</p>
<h2 id="5-6-3-协作图与用例图"><a href="#5-6-3-协作图与用例图" class="headerlink" title="5.6.3 协作图与用例图"></a>5.6.3 协作图与用例图</h2><p><strong>一个协作图可以对应用例描述中的一个事件流。</strong></p>
<p><strong>如果一个用例具有复杂的事件流，则需要多个协作图进行描述。</strong></p>
<p>通过协作图，系统分析人员可以对照检查每个用例中所描述的用户需求，审查这些需求是否已经落实到能够完成这些功能的类中实现，提醒分析人员去补充遗漏的类或方法，从而进一步完善类图。</p>
<p>对于一个动作序列复杂的用例，其事件流可以分解为几个部分。</p>
<h2 id="5-6-4-协作图与对象图"><a href="#5-6-4-协作图与对象图" class="headerlink" title="5.6.4 协作图与对象图"></a>5.6.4 协作图与对象图</h2><p><strong>协作</strong>是指在一定的语境中一组对象以及用以实现某些行为的这些对象间的相互作用。包含了运行时的<strong>类元角色和关联角色</strong>。</p>
<p><strong>类元角色</strong>表示参与协作执行的对象的描述</p>
<p><strong>关联角色</strong>表示参与协作执行的关联的实例描述。</p>
<p>协作图就是表现对象协作关系的图。</p>
<h3 id="1-从结构上"><a href="#1-从结构上" class="headerlink" title="1 从结构上"></a>1 从结构上</h3><p>协作图和对象图都包含了对象以及它们之间的”链”连接关系。</p>
<p>协作图是一种特殊的对象图，是类图的一个实例。</p>
<p>类图描述了类固有的内置属性，而协作图描述了类实例的行为特性。</p>
<h3 id="2-从行为上"><a href="#2-从行为上" class="headerlink" title="2 从行为上"></a>2 从行为上</h3><p>协作图是在<strong>链</strong>连接上附加了消息的对象图。</p>
<p><strong>链</strong>连接反映了哪些对象之间有联系，其上附加的消息则反映了一个对象如何影响另一个对象的行为。</p>
<p>协作图与对象图的区别在于消息的存在和传递。对象图表达了所有的具有连接关系的对象间的结构形态。</p>
<p>协作图只对相互间具有交互作用的对象和对象间的关联建模，而忽略其他对象及它们之间的关联。</p>
<p>在一张协作图上，只有那些涉及协作的对象才会被表示出来。</p>
<h3 id="3-从对象的生命周期上看"><a href="#3-从对象的生命周期上看" class="headerlink" title="3. 从对象的生命周期上看"></a>3. 从对象的生命周期上看</h3><p>协作图中的对象可标识成四类：</p>
<ol>
<li>存在于整个交互作用中的对象；</li>
<li>在交互作用中创建的对象；</li>
<li>在交互作用中销毁的对象；</li>
<li>在交互作用中创建和销毁的对象。</li>
</ol>
<p>在对象图中，不存在创建/销毁的对象。</p>
<p>对象图只描述在其生存期中的对象。</p>
<p>对象图是一个静态图，协作图是一个动态图。</p>
<h1 id="5-7-交互建模中常见的问题"><a href="#5-7-交互建模中常见的问题" class="headerlink" title="5.7 交互建模中常见的问题"></a><span id="7">5.7 交互建模中常见的问题</span></h1><p>交互模型是实现<strong>用例行为描述</strong>的有力工具，但不恰当地使用交互模型也会引起许多问题。</p>
<h2 id="5-7-1-普通嵌套与递归嵌套"><a href="#5-7-1-普通嵌套与递归嵌套" class="headerlink" title="5.7.1 普通嵌套与递归嵌套"></a>5.7.1 普通嵌套与递归嵌套</h2><p>在顺序图的控制焦点上通过绘制重叠的小矩形条可以表示嵌套调用。因为是嵌套调用，所以必须是调用消息。</p>
<p>在下图中，(a)表示的是自反递归，(b)表示的是间接递归，(c)表示的是普通嵌套。</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/22.png" class="">

<h2 id="5-7-2-消息的发送顺序与嵌套顺序"><a href="#5-7-2-消息的发送顺序与嵌套顺序" class="headerlink" title="5.7.2 消息的发送顺序与嵌套顺序"></a>5.7.2 消息的发送顺序与嵌套顺序</h2><p>在协作图中必须使用消息序列号来描述消息的发送顺序和嵌套顺序。</p>
<p><strong>发送顺序：</strong>消息1，消息2，消息3。消息1发送后，可以发送消息2。在发送消息2之前，消息1是否完成无关紧要。在消息2完成之前，消息1是否完成无关紧要。</p>
<p><strong>嵌套顺序</strong>：消息1，消息1.1，消息1.2。消息1发送后，可以发送消息1.1。在消息1.1完成之前，消息1无法完成。</p>
<p>对于调用消息，因为它是同步的过程调用，外层的调用必须等到里层的调用完成且释放控制权后才能继续执行至完成。可以使用消息序列号的嵌套表示方式来描述消息的发送顺序。</p>
<p>例：销售合同中处理付款单的交互过程</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/23.png" class="">

<h2 id="5-7-3-条件消息与循环消息的表示"><a href="#5-7-3-条件消息与循环消息的表示" class="headerlink" title="5.7.3 条件消息与循环消息的表示"></a>5.7.3 条件消息与循环消息的表示</h2><h3 id="条件发送"><a href="#条件发送" class="headerlink" title="条件发送"></a>条件发送</h3><p>表示消息的<strong>条件发送</strong>，可以有下面4中方法：</p>
<ol>
<li>在消息的描述符中加上警戒条件。</li>
<li>在消息顺序表达式中加上条件子句。</li>
<li>使用交互架构。</li>
<li>绘制多个顺序图或协作图。</li>
</ol>
<p>有时候用多个顺序图或协作图来描述不同的条件下发送不同的消息更方便理解。</p>
<h3 id="循环发送"><a href="#循环发送" class="headerlink" title="循环发送"></a>循环发送</h3><p>表示消息的<strong>循环发送</strong>，可以有下面2中方法：</p>
<ol>
<li>在消息顺序表达式中加上循环子句。</li>
<li>使用交互架构。</li>
</ol>
<p>当要描述多个消息构成循环体，反复发送的场景时，需要使用交互架构。</p>
<h2 id="5-7-4-顺序图中的交互架构"><a href="#5-7-4-顺序图中的交互架构" class="headerlink" title="5.7.4 顺序图中的交互架构"></a>5.7.4 顺序图中的交互架构</h2><p>在顺序图中表达消息的循环发送或分支条件发送，可以使用交互架构。</p>
<p><strong>交互架构</strong>(interactive frame)是一种标记顺序图片段的方法。包含分成若干片段的一个顺序图的某一区域，用边框包围这个区域，在其左上角添加一个内含操作符的间隔区。构成一个局部整体。</p>
<p>loop:循环</p>
<p>alt：分支条件</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/24.png" class="">

<h2 id="5-7-5-调用消息与事件消息"><a href="#5-7-5-调用消息与事件消息" class="headerlink" title="5.7.5 调用消息与事件消息"></a>5.7.5 调用消息与事件消息</h2><p>在交互图中，消息可以是<strong>操作调用</strong>，或者是<strong>信号</strong>。</p>
<p>前者对应接收消息的对象的一个方法的调用，后者对应一个事件的发生。当然，事件的发生在很多情况下都会激活接收消息的对象的一个方法的执行。</p>
<p>在消息是非循环发送的情况下，两者没有太大的区别，都是<strong>只</strong>激活接收消息的对象的某个方法的<strong>一次执行</strong>。</p>
<p>但是，在消息是循环发送的情况下，两者有本质的区别。</p>
<p>调用消息会导致接收消息的对象的某个方法的<strong>多次执行</strong>；而事件消息只会导致接收消息的对象的某个方法的<strong>一次执行</strong>。</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/25.png" class="">

<h2 id="5-7-6-顺序图中的时间约束"><a href="#5-7-6-顺序图中的时间约束" class="headerlink" title="5.7.6 顺序图中的时间约束"></a>5.7.6 顺序图中的时间约束</h2><p>利用UML的扩展机制——约束{constraint}可以表示时间约束。</p>
<p>在下图钟，C1的对象在a时刻点发出消息，必须在b时刻点收到消息，且a和b之间的时间间隔小于2s。</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/26.png" class="">

<h2 id="5-7-7-顺序图的两种形式"><a href="#5-7-7-顺序图的两种形式" class="headerlink" title="5.7.7 顺序图的两种形式"></a>5.7.7 顺序图的两种形式</h2><p>顺序图有两种形式：实例形式、一般形式</p>
<p>实例形式的顺序图详细描述了一个特定的场景，它说明一次可能的交互。实例形式的顺序图中没有任何条件、分支和循环。</p>
<p>一般形式的顺序图描述一个场景中所有可能的选择，它可以包含条件、分支和循环。</p>
<h2 id="5-7-8-协作图的两种形式"><a href="#5-7-8-协作图的两种形式" class="headerlink" title="5.7.8 协作图的两种形式"></a>5.7.8 协作图的两种形式</h2><p>协作图有两种形式：描述符形式、实例形式</p>
<p><strong>描述符形式</strong>的协作图描述了类元角色以及它们之间的关系（称为关联角色）。类元和关系没有指定实例，只用角色来代表特例。</p>
<p><strong>实例形式</strong>的协作图描述了类元实例（即对象）以及它们之间的关系（称为链连接）。必须制定类元实例和关联实例。</p>
<p>在不考虑消息的前提下，实例形式的协作图是一种类型的对象图，描述符形式的协作图是一种以角色代表对象的对象图。</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/27.png" class="">

<h2 id="5-7-9-用例实现的类图与协作图"><a href="#5-7-9-用例实现的类图与协作图" class="headerlink" title="5.7.9 用例实现的类图与协作图"></a>5.7.9 用例实现的类图与协作图</h2><p>例：大学课程注册系统中用例AddCourse实现</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/28.png" class="">

<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/29.png" class="">

<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/30.png" class="">

<h2 id="5-7-10-协作图中的多对象"><a href="#5-7-10-协作图中的多对象" class="headerlink" title="5.7.10 协作图中的多对象"></a>5.7.10 协作图中的多对象</h2><p>多对象代表一组对象，它提供在协作图中表示对象集合的方法。发送到多对象的消息被传递给整个集合，而不是任何个体对象。</p>
<p>在下图中，多对象Student之外，必须增加一个对象，表示多对象的一个实例。</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/31.png" class="">

<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/32.png" class="">

<h2 id="5-7-11-协作图中的主动对象"><a href="#5-7-11-协作图中的主动对象" class="headerlink" title="5.7.11 协作图中的主动对象"></a>5.7.11 协作图中的主动对象</h2><p>主动对象是指它不需要消息的刺激就可以自行执行某个方法。</p>
<p>在实时监控系统中，存在多个传感器，它们可能同一时刻在工作。因此，存在多个控制线程的并发执行。</p>
<p>在协作图中，可以将线程或进程建模为主动对象。多个主动对象可以并发执行。</p>
<p>例：在下图中，报警硬件由四个部件组成——控制盒、报警器、火警传感器、安全传感器。打开控制盒，可以看到每个传感器有一个控制卡。</p>
<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/33.png" class="">

<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/34.png" class="">

<img src="/2020/04/17/UML%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%A1%BA%E5%BA%8F%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%EF%BC%89/35.png" class="">]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>软件项目管理（第五章：IT项目时间管理）</title>
    <url>/2020/04/17/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/04/17/软件项目管理（第五章：IT项目时间管理）/#1">5.1 项目时间管理概述</a></p>
<p><a href="/2020/04/17/软件项目管理（第五章：IT项目时间管理）/#2">5.2 活动定义</a></p>
<p><a href="/2020/04/17/软件项目管理（第五章：IT项目时间管理）/#3">5.3 活动排序</a></p>
<p><a href="/2020/04/17/软件项目管理（第五章：IT项目时间管理）/#4">5.4 活动资源估计</a></p>
<p><a href="/2020/04/17/软件项目管理（第五章：IT项目时间管理）/#5">5.5 活动持续时间估计</a></p>
<p><a href="/2020/04/17/软件项目管理（第五章：IT项目时间管理）/#6">5.6 编制项目进度计划</a></p>
<p><a href="/2020/04/17/软件项目管理（第五章：IT项目时间管理）/#7">5.7 IT项目进度控制</a></p>
</blockquote>
<h1 id="5-1-项目时间管理概述"><a href="#5-1-项目时间管理概述" class="headerlink" title="5.1 项目时间管理概述"></a><span id="1">5.1 项目时间管理概述</span></h1><h2 id="5-1-1项目进度及项目进度管理"><a href="#5-1-1项目进度及项目进度管理" class="headerlink" title="5.1.1项目进度及项目进度管理"></a>5.1.1项目进度及项目进度管理</h2><p>项目进度管理就是采用科学的方法确定项目工期、进度，编制进度计划和资源供应计划，进行进度控制，在与质量、费用目标协调的基础上，实现项目的进度目标。</p>
<h2 id="5-1-2-项目进度管理过程"><a href="#5-1-2-项目进度管理过程" class="headerlink" title="5.1.2 项目进度管理过程"></a>5.1.2 项目进度管理过程</h2><ol>
<li>活动定义：确定完成项目各项可交付成果而需要开展的具体活动。</li>
<li>活动排序：识别和记录计划活动之间相互逻辑关系的过程。</li>
<li>活动资源估算：估算完成各项计划活动所需资源类型和数量的过程。</li>
<li>活动历时估算：估计完成单项计划活动开展的具体活动时间。</li>
<li>项目进度安排：分析计划活动顺序、计划活动持续时间、资源要求和进度制约因素，制订项目进度表的过程。</li>
<li>项目进度控制：控制项目进度变更的过程。</li>
</ol>
<a id="more"></a>

<h2 id="5-1-3-IT项目时间管理的特点"><a href="#5-1-3-IT项目时间管理的特点" class="headerlink" title="5.1.3 IT项目时间管理的特点"></a>5.1.3 IT项目时间管理的特点</h2><ol>
<li>时间管理是一个动态过程。</li>
<li>项目进度计划和控制是一个复杂的系统工程。</li>
<li>时间管理有明显的阶段性。</li>
<li>时间管理风险性大。</li>
</ol>
<h1 id="5-2-活动定义"><a href="#5-2-活动定义" class="headerlink" title="5.2 活动定义"></a><span id="2">5.2 活动定义</span></h1><h2 id="5-2-1-活动的定义"><a href="#5-2-1-活动的定义" class="headerlink" title="5.2.1 活动的定义"></a>5.2.1 活动的定义</h2><p>项目活动定义是一个过程，它涉及确认和描述一些特定的活动，是指为完成项目而必须进行的具体的工作。</p>
<p>活动定义将项目工作分解为更小、更易管理的工作包（也叫活动或任务），这些小的活动应该是能够保障完成交付产品的、可实施的详细任务，完成了这些活动就意味着完成了<strong>WBS</strong>中的项目细目。</p>
<p>例如，将软件测试工作划分为：制订测试计划、编写测试用例、安装测试环境、测试程序、质量评价等活动。</p>
<h2 id="5-2-2-项目活动的特征"><a href="#5-2-2-项目活动的特征" class="headerlink" title="5.2.2 项目活动的特征"></a>5.2.2 项目活动的特征</h2><ul>
<li>对于需要执行的活动，它应以动词或形容词加名词的方式描述。</li>
<li>如果一个资源分配给一项活动，应该由一个人管理交付输出。</li>
<li>每一项活动要定义好一个开始点。</li>
<li>通常一项活动存在一个有形的输出或完成的产品。</li>
<li>活动在逻辑上应与WBS元素相符。</li>
<li>对于每项活动要有充足的控制量和时间。</li>
<li>开始和结束点必须充分定义，并能汇报活动的开始和完成。</li>
<li>活动反映了除细微或偶发的活动外的项目目标的重要工作。</li>
</ul>
<h2 id="5-2-3-项目活动定义过程"><a href="#5-2-3-项目活动定义过程" class="headerlink" title="5.2.3 项目活动定义过程"></a>5.2.3 项目活动定义过程</h2><h3 id="1-活动定义的依据"><a href="#1-活动定义的依据" class="headerlink" title="1. 活动定义的依据"></a>1. 活动定义的依据</h3><ul>
<li>工作分解结构</li>
<li>范围的叙述</li>
<li>历史资料</li>
<li>约束因素</li>
<li>假设前提</li>
</ul>
<h3 id="2-活动定义的输出"><a href="#2-活动定义的输出" class="headerlink" title="2. 活动定义的输出"></a>2. 活动定义的输出</h3><ol>
<li>活动清单</li>
<li>详细说明</li>
<li>更新了的工作分解结构</li>
</ol>
<img src="/2020/04/17/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89/1.png" class="">

<h1 id="5-3-活动排序"><a href="#5-3-活动排序" class="headerlink" title="5.3 活动排序"></a><span id="3">5.3 活动排序</span></h1><h2 id="5-3-1-活动排序的依据"><a href="#5-3-1-活动排序的依据" class="headerlink" title="5.3.1 活动排序的依据"></a>5.3.1 活动排序的依据</h2><p>活动之间的关系主要有：</p>
<ol>
<li>强制依赖关系</li>
<li>软逻辑关系</li>
<li>外部依赖关系</li>
</ol>
<p>排序的方法：前导图（单代号网络图）、箭线头（双代号网络图）</p>
<h3 id="1-前导图（单代号网络图）"><a href="#1-前导图（单代号网络图）" class="headerlink" title="1. 前导图（单代号网络图）"></a>1. 前导图（单代号网络图）</h3><p><strong><font color="red">注意：</font></strong></p>
<ul>
<li>一个网络图只有<font color="red">一个</font>开始点和<font color="red">一个</font>结束点。</li>
<li>网络图是有方向的，不应该出现循环回路。</li>
<li>网络图中不能出现无箭头箭线和双箭头箭线。</li>
<li>网络图中不能出现无节点的箭线。</li>
<li>在同一个网络图中的所有节点，不能出现相同的编号。</li>
</ul>
<img src="/2020/04/17/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89/2.png" class="">

<img src="/2020/04/17/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89/3.png" class="">

<img src="/2020/04/17/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89/4.png" class="">

<p>上图还应标出各个节点所需要的时间</p>
<h3 id="2-箭线图（双代号网络图）"><a href="#2-箭线图（双代号网络图）" class="headerlink" title="2. 箭线图（双代号网络图）"></a>2. 箭线图（双代号网络图）</h3><p><strong><font color="red">注意：</font></strong></p>
<ul>
<li>在一个图中的所有节点，不能出现相同的编号。</li>
<li>任意两项活动的紧前事件和紧后事件至少有一个不相同，节点序号沿箭线方向越来越大。</li>
<li>流入（流出）同一节点的活动，均有共同的后继活动（或先行活动）。</li>
</ul>
<img src="/2020/04/17/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89/5.png" class="">

<img src="/2020/04/17/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89/6.png" class="">

<h1 id="5-4-活动资源估计"><a href="#5-4-活动资源估计" class="headerlink" title="5.4 活动资源估计"></a><span id="4">5.4 活动资源估计</span></h1><h2 id="5-4-1-IT项目资源分类"><a href="#5-4-1-IT项目资源分类" class="headerlink" title="5.4.1 IT项目资源分类"></a>5.4.1 IT项目资源分类</h2><ol>
<li>项目环境资源</li>
<li>可重用资源</li>
<li>人力资源</li>
</ol>
<h2 id="5-4-2-资源估算的主要依据"><a href="#5-4-2-资源估算的主要依据" class="headerlink" title="5.4.2 资源估算的主要依据"></a>5.4.2 资源估算的主要依据</h2><ol>
<li>工作分解结构WBS</li>
<li>项目进度要求</li>
<li>历史资料</li>
<li>资源库描述</li>
<li>组织策略</li>
</ol>
<h2 id="5-4-3-资源估算的过程"><a href="#5-4-3-资源估算的过程" class="headerlink" title="5.4.3 资源估算的过程"></a>5.4.3 资源估算的过程</h2><ol>
<li><p>资源需求分析</p>
<ul>
<li><p>工作量计算。</p>
</li>
<li><p>确定实施方案。</p>
</li>
<li><p>估计人员需求量。</p>
</li>
<li><p>估计设备、材料需求量。</p>
</li>
<li><p>确定资源的使用时间。</p>
</li>
</ul>
</li>
<li><p>资源供给分析</p>
</li>
<li><p>资源成本比较与资源组合</p>
</li>
<li><p>资源分配与计划编制</p>
</li>
</ol>
<img src="/2020/04/17/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89/10.png" class="">

<h2 id="5-4-4-编制资源计划的方法与工具"><a href="#5-4-4-编制资源计划的方法与工具" class="headerlink" title="5.4.4 编制资源计划的方法与工具"></a>5.4.4 编制资源计划的方法与工具</h2><h3 id="1-德尔菲（专家）评估法"><a href="#1-德尔菲（专家）评估法" class="headerlink" title="1. 德尔菲（专家）评估法"></a>1. 德尔菲（专家）评估法</h3><p>具体做法：</p>
<ol>
<li>设计调查表</li>
<li>选择应答的专家</li>
<li>征询专家的意见</li>
</ol>
<p>特点：经济学、匿名性、客观性</p>
<h3 id="2-资源统计法"><a href="#2-资源统计法" class="headerlink" title="2. 资源统计法"></a>2. 资源统计法</h3><h3 id="3-项目资源计划的常用工具"><a href="#3-项目资源计划的常用工具" class="headerlink" title="3. 项目资源计划的常用工具"></a>3. 项目资源计划的常用工具</h3><ul>
<li>资源矩阵</li>
<li>资源甘特图</li>
<li>资源负荷图</li>
<li>资源曲线图</li>
<li>资源累计需求曲线</li>
</ul>
<h1 id="5-5-活动持续时间估计"><a href="#5-5-活动持续时间估计" class="headerlink" title="5.5 活动持续时间估计"></a><span id="5">5.5 活动持续时间估计</span></h1><h2 id="5-5-1-历时估计的依据"><a href="#5-5-1-历时估计的依据" class="headerlink" title="5.5.1 历时估计的依据"></a>5.5.1 历时估计的依据</h2><ol>
<li>工作活动的详细清单</li>
<li>项目约束和假设前提</li>
<li>资源需求</li>
<li>资源能力</li>
<li>历史信息</li>
<li>项目成本和风险分析等</li>
</ol>
<h2 id="5-5-2-历时估计的方法"><a href="#5-5-2-历时估计的方法" class="headerlink" title="5.5.2 历时估计的方法"></a>5.5.2 历时估计的方法</h2><ol>
<li>专家判断</li>
<li>类比估计</li>
<li>单一时间估计法</li>
<li>3个时间估计法</li>
</ol>
<h2 id="5-5-3-软件项目的工作量估算"><a href="#5-5-3-软件项目的工作量估算" class="headerlink" title="5.5.3 软件项目的工作量估算"></a>5.5.3 软件项目的工作量估算</h2><ol>
<li>软件项目工作量的度量</li>
<li>软件项目工作量估算的其他构成因素<ol>
<li>用于各模块、子系统、软件系统与硬件、网络系统之间集成的测试、调试等的工作量。</li>
<li>用于编写用户文档和设计文档的工作量。</li>
<li>用于需求管理、配置管理、质量管理、风险管理等支持过程的工作量。</li>
<li>用于项目管理的工作量。</li>
</ol>
</li>
<li>软件项目工作量估算的其他影响因素<ol>
<li>复杂程度</li>
<li>人为因素</li>
<li>工程因素</li>
<li>意外事件</li>
</ol>
</li>
<li>软件项目工作量的估算方式<ol>
<li>类比估算法</li>
<li>基于定额的进度估算法</li>
<li>基于承诺的进度估算发</li>
</ol>
</li>
</ol>
<h1 id="5-6-编制项目进度计划"><a href="#5-6-编制项目进度计划" class="headerlink" title="5.6 编制项目进度计划"></a><span id="6">5.6 编制项目进度计划</span></h1><h2 id="5-6-1-项目进度计划"><a href="#5-6-1-项目进度计划" class="headerlink" title="5.6.1 项目进度计划"></a>5.6.1 项目进度计划</h2><h3 id="1-编制进度计划的目的"><a href="#1-编制进度计划的目的" class="headerlink" title="1. 编制进度计划的目的"></a>1. 编制进度计划的目的</h3><p>制订项目的详细进度计划，明确每项活动的起止时间，控制时间和节约时间。</p>
<p>协调资源，使资源在需要的时候可以获得。</p>
<p>预测在不同时间上所需的资源的级别，以便赋予项目的不同优先级。</p>
<p>为项目的跟踪控制提供基础。</p>
<p>满足严格的完工时间约束。</p>
<h3 id="2-IT项目进度计划的内容"><a href="#2-IT项目进度计划的内容" class="headerlink" title="2. IT项目进度计划的内容"></a>2. IT项目进度计划的内容</h3><ol>
<li>IT项目综合进度计划。</li>
<li>IT项目采购进度计划。</li>
<li>IT项目实施进度计划。</li>
<li>IT项目验收进度计划。</li>
<li>IT项目维护进度计划。</li>
</ol>
<h3 id="3-编制进度计划的注意事项"><a href="#3-编制进度计划的注意事项" class="headerlink" title="3. 编制进度计划的注意事项"></a>3. 编制进度计划的注意事项</h3><p>编制进度计划时应该强调现实性、指导性和可操作性，编制好的进度计划还需要注意以下问题：</p>
<ul>
<li>不要忽略损失的时间。</li>
<li>明确项目工作实施顺序和时间。</li>
<li>把握计划的粗细程度。</li>
</ul>
<h2 id="5-6-2-进度计划编制的依据"><a href="#5-6-2-进度计划编制的依据" class="headerlink" title="5.6.2 进度计划编制的依据"></a>5.6.2 进度计划编制的依据</h2><ol>
<li>项目网络图。</li>
<li>项目活动工期的估算文件。</li>
<li>项目的资源要求和共享说明。</li>
<li>项目作业的各种约束条件。</li>
<li>项目活动的提前和滞后要求。</li>
<li>对于IT项目还应考虑生产率问题。</li>
</ol>
<h3 id="1-项目进度计划编制的步骤"><a href="#1-项目进度计划编制的步骤" class="headerlink" title="1. 项目进度计划编制的步骤"></a>1. 项目进度计划编制的步骤</h3><ol>
<li>选择模板。</li>
<li>确定任务。</li>
<li>确定时间值。</li>
<li>进行资源分配计划评审。*</li>
<li>画出网络计划图。</li>
</ol>
<h3 id="2-制定项目进度计划的方法"><a href="#2-制定项目进度计划的方法" class="headerlink" title="2. 制定项目进度计划的方法"></a>2. 制定项目进度计划的方法</h3><ol>
<li>系统分析法。</li>
<li>资源平衡法。</li>
<li>项目管理软件是广泛应用于项目工期计划编制的一种辅助方法。</li>
</ol>
<h2 id="5-6-3-计划编制技术"><a href="#5-6-3-计划编制技术" class="headerlink" title="5.6.3 计划编制技术"></a>5.6.3 计划编制技术</h2><h3 id="1-甘特图"><a href="#1-甘特图" class="headerlink" title="1.甘特图"></a>1.甘特图</h3><p>甘特图（Gantt Chart或Bar Chart）是表示项目各阶段任务开始时间与结束时间的图形，它把计划和进度安排组织在一起。</p>
<img src="/2020/04/17/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89/7.png" class="">

<img src="/2020/04/17/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89/8.png" class="">

<h3 id="2-里程碑图"><a href="#2-里程碑图" class="headerlink" title="2. 里程碑图"></a>2. 里程碑图</h3><img src="/2020/04/17/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89/9.png" class="">

<h3 id="3-关键路径法"><a href="#3-关键路径法" class="headerlink" title="3. 关键路径法"></a>3. 关键路径法</h3><p><strong>（1）活动时间计算方法</strong></p>
<ol>
<li>活动最早开始时间（<strong>ES</strong>）</li>
<li>活动最早结束时间（<strong>EF</strong>）</li>
<li>活动最迟结束时间（<strong>LF</strong>）</li>
<li>活动最迟开始时间（<strong>LS</strong>）</li>
</ol>
<img src="/2020/04/17/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89/11.png" class="">

<p><strong>（2）分析关键途径的方发</strong></p>
<p><strong>（3）活动的机动活动</strong></p>
<img src="/2020/04/17/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89/12.png" class="">

<h3 id="4-计划评审技术"><a href="#4-计划评审技术" class="headerlink" title="4. 计划评审技术"></a>4. 计划评审技术</h3><ol>
<li>活动的时间估计</li>
<li>活动工期的概率分布</li>
</ol>
<h4 id="计划评审技术（PERT）"><a href="#计划评审技术（PERT）" class="headerlink" title="计划评审技术（PERT）"></a>计划评审技术（PERT）</h4><p>1、乐观时间(optimistic time)–任何事情都顺利的情况，完成某项工作的时间。 </p>
<p>2、最可能时间(most likely time)–正常情况下，完成某项工作的时间。</p>
<p>3、悲观时间(pessimistic time)–最不利的情况，完成某项工作的时间。</p>
<img src="/2020/04/17/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89/15.png" class="">

<p><strong>例题：</strong></p>
<img src="/2020/04/17/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89/16.png" class="">

<p>期望时间=（8+24+4<em>10）/6+（1+9+4</em>5）/6 = 17<br>标准差=（24-8）/6+(9-1)/6=4</p>
<p>1R=13~21:68.3%<br>2R=9~24:95.5%<br>3R=5~27:99.7%</p>
<p>因为在17天完成概率为50%；在13~21的概率：68.3%/2=34.15%<br>所以在20天完成的概率：50%+34.15%=84.15%</p>
<h2 id="5-6-4-进度计划编制结果"><a href="#5-6-4-进度计划编制结果" class="headerlink" title="5.6.4 进度计划编制结果"></a>5.6.4 进度计划编制结果</h2><ol>
<li>项目进度计划书。</li>
<li>项目进度计划的支持细节。</li>
<li>项目进度管理的计划安排。</li>
<li>更新后的项目资源需求。</li>
</ol>
<h1 id="5-7-IT项目进度控制"><a href="#5-7-IT项目进度控制" class="headerlink" title="5.7 IT项目进度控制"></a><span id="7">5.7 IT项目进度控制</span></h1><h2 id="5-7-1-IT项目进度控制"><a href="#5-7-1-IT项目进度控制" class="headerlink" title="5.7.1 IT项目进度控制"></a>5.7.1 IT项目进度控制</h2><ul>
<li>项目组内控制</li>
<li>企业控制</li>
<li>用户方控制</li>
<li>第三方控制</li>
</ul>
<h3 id="1-项目进度控制的依据"><a href="#1-项目进度控制的依据" class="headerlink" title="1. 项目进度控制的依据"></a>1. 项目进度控制的依据</h3><ol>
<li>项目进度计划文件。</li>
<li>项目工期计划实施情况报告。</li>
<li>项目变更的请求。</li>
<li>项目进度管理的计划安排。</li>
</ol>
<h3 id="2-项目计划进度控制的流程"><a href="#2-项目计划进度控制的流程" class="headerlink" title="2. 项目计划进度控制的流程"></a>2. 项目计划进度控制的流程</h3><img src="/2020/04/17/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89/13.png" class="">

<h3 id="3-项目执行信息的收集"><a href="#3-项目执行信息的收集" class="headerlink" title="3. 项目执行信息的收集"></a>3. 项目执行信息的收集</h3><p>在整体报告期内，需要收集以下数据和信息：</p>
<ol>
<li>实际执行的数据。</li>
<li>有关项目范围、进度计划和预算变更的信息。</li>
</ol>
<p>信息数据收集的方法有以下几种：</p>
<ol>
<li>发生概率统计法。</li>
<li>原始数据记录法。</li>
<li>经验法。</li>
<li>指标法。</li>
<li>口头测定方式。</li>
</ol>
<h3 id="4-项目进度分析"><a href="#4-项目进度分析" class="headerlink" title="4. 项目进度分析"></a>4. 项目进度分析</h3><p>项目的进展情况报告主要反映在以下几个方面：</p>
<ol>
<li>项目进展简介。</li>
<li>项目近期趋势。</li>
<li>预算情况。</li>
<li>困难与危机。</li>
<li>人、事表扬等。</li>
</ol>
<h2 id="5-7-2-进度控制的工具和方法"><a href="#5-7-2-进度控制的工具和方法" class="headerlink" title="5.7.2 进度控制的工具和方法"></a>5.7.2 进度控制的工具和方法</h2><h3 id="1-各种进度控制报告和报表"><a href="#1-各种进度控制报告和报表" class="headerlink" title="1. 各种进度控制报告和报表"></a>1. 各种进度控制报告和报表</h3><ol>
<li>项目执行状态报告。</li>
<li>重大突发性事件或例外报告。</li>
<li>特别分析报告。</li>
<li>关键点检查报告。</li>
<li>项目变更申请报告。</li>
<li>项目管理报告。</li>
<li>项目进度控制总结等。</li>
</ol>
<h3 id="2-甘特图检查法"><a href="#2-甘特图检查法" class="headerlink" title="2. 甘特图检查法"></a>2. 甘特图检查法</h3><h3 id="3-S形曲线检查法"><a href="#3-S形曲线检查法" class="headerlink" title="3. S形曲线检查法"></a>3. S形曲线检查法</h3><ol>
<li>实际工程进展速度。</li>
<li>项目实际进度超前或拖后的时间。</li>
<li>工程量的完成情况。</li>
<li>后续工程进度预测。</li>
</ol>
<img src="/2020/04/17/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89/14.png" class="">

<h3 id="5-7-3-项目进度优化与控制"><a href="#5-7-3-项目进度优化与控制" class="headerlink" title="5.7.3 项目进度优化与控制"></a>5.7.3 项目进度优化与控制</h3><h3 id="1-工期优化"><a href="#1-工期优化" class="headerlink" title="1. 工期优化"></a>1. 工期优化</h3><p>工期优化的步骤：</p>
<ul>
<li>计算网络计划中的时间参数，并找出关键线路和关键活动。</li>
<li>按规定工期要求确定应压缩的时间。</li>
<li>分析各关键活动可能的压缩时间。</li>
<li>确定将压缩的关键活动，调整其持续时间，并重新计算网络计划的计算工期。</li>
<li>当计算工期仍大于规定工期时，则重复上述步骤，直到满足工期要求或工期不能再压缩为止。</li>
<li>当所有关键活动的持续时间均压缩到极限，仍不满足工期要求时，应对计划的原技术、组织方案进行调整，或对规定工期重新审定。</li>
</ul>
<h3 id="2-赶工"><a href="#2-赶工" class="headerlink" title="2. 赶工"></a>2. 赶工</h3><h3 id="3-对后续活动及工期影响的分析"><a href="#3-对后续活动及工期影响的分析" class="headerlink" title="3. 对后续活动及工期影响的分析"></a>3. 对后续活动及工期影响的分析</h3><ol>
<li>当进度偏差体现为某项工作的实际进度超前时，根据网络计划技术原理可知，非关键工作提前非但不能缩短工期，可能还会导致资源使用发生变化，管理稍有疏忽甚至可能打乱整个原定计划，给管理者的协调工作带来麻烦。</li>
<li>当进度偏差体现为某项工作滞后，是否对进度计划做出调整的具体情形分述如下。</li>
</ol>
<h3 id="4-动态调整与优化控制"><a href="#4-动态调整与优化控制" class="headerlink" title="4. 动态调整与优化控制"></a>4. 动态调整与优化控制</h3><p>基本的调整方法有：</p>
<ol>
<li>快速跟进也叫并行方式，对于一个正常进行的工作可考虑按照并行方式进行。</li>
<li>赶工。</li>
<li>关键任务的调整。</li>
<li>改变活动间的逻辑关系。</li>
<li>改变活动持续时间。</li>
<li>非关键工作的调整。</li>
<li>增减工作项目。</li>
<li>资源调整。</li>
<li>重新编制计划。</li>
</ol>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（程序控制2）</title>
    <url>/2020/04/16/Python%EF%BC%88%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B62%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/04/16/Python（程序控制2）/#1">1 for循环结构</a></p>
<p><a href="/2020/04/16/Python（程序控制2）/#1">2 break、continue、pass</a></p>
<p><a href="/2020/04/16/Python（程序控制2）/#3">3 循环嵌套</a></p>
</blockquote>
<h1 id="1-for循环结构"><a href="#1-for循环结构" class="headerlink" title="1 for循环结构"></a><span id="1">1 for循环结构</span></h1><h2 id="1-1-for循环语句"><a href="#1-1-for循环语句" class="headerlink" title="1.1 for循环语句"></a>1.1 for循环语句</h2><pre><code>for 变量 in 序列：
    循环体</code></pre><p>形如以上格式的<code>for</code>语句可以遍历（逐个访问）序列中的元素。每次循环调取序列中的一个元素分配给变量并执行一次循环体（语句块），直到遍历整个序列中的所有元素为止。</p>
<p><strong>序列</strong>是指一种基本的数据结构，序列可以是一个<font color="red">字符串、列表、元组、文件等</font>。</p>
<a id="more"></a>

<p>例：</p>
<pre><code>for c in &quot;China&quot;:
    print ( c )
结果：China</code></pre><p>例：</p>
<pre><code>mylist=[&quot;Hello&quot;,123,&quot;python&quot;,30]
for item in mylist:
    print(item,end=&quot;&quot;)
结果：Hello123python30</code></pre><h2 id="1-2-range函数"><a href="#1-2-range函数" class="headerlink" title="1.2 range函数"></a>1.2 range函数</h2><pre><code>range(stop)range(start, stop[, step])</code></pre><p>参数含义：</p>
<p><strong>start</strong>：计数从start开始。默认为0。</p>
<p><strong>stop</strong>：计数到stop结束，但，不包括stop。要点：遵循左闭右开原则</p>
<p><strong>step</strong>：每次跳跃的间距。默认为1。<font color="red">注意：step参数必须是非零整数，否则会抛出VauleError异常。</font></p>
<img src="/2020/04/16/Python（程序控制2）/1.png">

<p>例：</p>
<pre><code>for i in range(3):    #没有3
    print(i,end=&quot;&quot;)
结果：012
for i in range(1,6,2):#从1开始结束于6但不包括6，步长为2
    print(i,end=&quot;&quot;)
结果：135
for i in range(5,1,-1):#从5开始结束于1但不包括1，步长为-1
    print(i,end=&quot;&quot;)
结果：5432</code></pre><p>例：计算1+2+3+…+100</p>
<pre><code>s=0
for i in range(1,101):
    s=s+i
print(s)
结果：5050</code></pre><h1 id="2-break、continue、pass"><a href="#2-break、continue、pass" class="headerlink" title="2 break、continue、pass"></a><span id="2">2 break、continue、pass</span></h1><p><strong>breank：</strong>用来结束当前<font color="red">整个循环</font>，执行循环后的语句</p>
<p><strong>continue：</strong>用来结束<font color="red">当次循环</font>，不在执行循环体中剩余语句，然后继续进行下一轮循环</p>
<p>breank和continue用来辅助控制循环执行。breank和continue可以与for和while循环搭配使用。</p>
<h2 id="2-1-break"><a href="#2-1-break" class="headerlink" title="2.1 break"></a>2.1 break</h2><p>break用来在while循环或for循环中终止循环语句。实现打破最小封闭for或while循环的功能。</p>
<p>注意：如果使用嵌套循环，break将停止执行本层循环。</p>
<p>实例：</p>
<pre><code>a= 5
while a&gt; 0: 
    a = a -1 
    if a == 3:      # 当变量 a 等于 5 时退出循环
        break
    print (&#39;当前变量值 :&#39;, a) 
结果：
当前变量值 : 4</code></pre><h2 id="2-2-continue"><a href="#2-2-continue" class="headerlink" title="2.2 continue"></a>2.2 continue</h2><p>continue 语句作用是结束本次循环，即告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。</p>
<p>实例：</p>
<pre><code>a= 5
while a&gt; 0: 
    a = a -1 
    if a == 3:      # 当变量 a 等于 5 时退出循环
        continue
    print (&#39;当前变量值 :&#39;, a) 
结果：
当前变量值 : 4
当前变量值 : 2
当前变量值 : 1
当前变量值 : 0</code></pre><h2 id="2-3-pass"><a href="#2-3-pass" class="headerlink" title="2.3 pass"></a>2.3 pass</h2><p><code>pass</code>出现时，程序不做任何事情，一般用做占位语句，为保持程序结构的完整性。</p>
<p>在程序设计时，暂时不能确定如何实现或为以后软件升级预留空间时等，可使用”pass”占位使程序可以正常运行。</p>
<pre><code>for c in &quot;Python&quot;:
    if c==&quot;h&quot;:
        pass    
        print(&quot;这是pass块&quot;)
    print(&quot;当前字母：&quot;,c)
结果：
当前字母： P
当前字母： y
当前字母： t
这是pass块
当前字母： h
当前字母： o
当前字母： n</code></pre><h1 id="3-循环嵌套"><a href="#3-循环嵌套" class="headerlink" title="3 循环嵌套"></a><span id="3">3 循环嵌套</span></h1><p>Python 语言允许在一个循环体里面嵌入另一个完整的循环结构，称为循环的嵌套。</p>
<p>双层循环是常用格式。</p>
<p>while语句和for语句可以互相嵌套。如在while循环中可以嵌入for循环， 反之，你可以在for循环中嵌入while循环。</p>
<p>如：</p>
<pre><code> for &lt;变量&gt; in &lt;序列&gt;:
     for &lt;变量&gt; in &lt;序列&gt;:
        &lt;循环体&gt; 
    &lt;循环体&gt;</code></pre><p>或：</p>
<pre><code>while &lt;条件&gt;:  
    while &lt;条件&gt;:
           &lt;循环体&gt;
       &lt;循环体&gt;</code></pre><p>例子：编写一个能输出<code>n*n</code>(<code>n</code>小于等于<code>9</code>)乘法表结果的小程序</p>
<pre><code>n=9
for i in range(1,n+1):
    s=&quot;&quot;
    for j in range(1,i+1):
        s=s+str(j*i)+&quot;,&quot;
    print(s[0:-1])
结果：
1
2,4
3,6,9
4,8,12,16
5,10,15,20,25
6,12,18,24,30,36
7,14,21,28,35,42,49
8,16,24,32,40,48,56,64
9,18,27,36,45,54,63,72,81</code></pre>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（程序控制1）</title>
    <url>/2020/04/15/Python%EF%BC%88%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B61%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/04/15/Python（程序控制1）/#1">1 选择结构</a></p>
<p><a href="/2020/04/15/Python（程序控制1）/#2">2 while循环结构</a></p>
<p><a href="/2020/04/15/Python（程序控制1）/#3">3 水仙花、百鸡</a></p>
</blockquote>
<p><strong>计算机程序的三种基本结构</strong></p>
<p>　　按照计算机程序执行的逻辑流程，可以将计算机程序分为三种基本结构，即：顺序结构、选择结构、循环结构。</p>
<h1 id="1-选择结构"><a href="#1-选择结构" class="headerlink" title="1 选择结构"></a><span id="1">1 选择结构</span></h1><p>分为：单分支结构（if语句）、分支结构（if_else语句）、多分支结构（if_elif_else语句）</p>
<h2 id="1-1-单分支结构（if语句）"><a href="#1-1-单分支结构（if语句）" class="headerlink" title="1.1 单分支结构（if语句）"></a>1.1 单分支结构（if语句）</h2><p>if语句是Python语言中实现单分支判断的专用语句，其基本语法格式如下：</p>
<p><strong>注意：if条件后要有<font color="red">冒号 ：</font></strong></p>
<pre><code>if 表达式:
    语句块        #必须缩进，一般缩进4个空格</code></pre><a id="more"></a>

<p>例：如果程序代码中的语法错误数目为0，就输出“程序开始运行”；否则，什么也不执行。</p>
<pre><code class="python">errro=int(input(&quot;请输入语法错误的数目：&quot;))
if error==0:
    print(&quot;程序开始运行！&quot;)</code></pre>
<h2 id="1-2-分支结构（if-else语句）"><a href="#1-2-分支结构（if-else语句）" class="headerlink" title="1.2 分支结构（if_else语句）"></a>1.2 分支结构（if_else语句）</h2><p>if_else语句是Python语言中实现二分支判断的专用语句，其基本语法格式如下：</p>
<pre><code>if 表达式: 
    语句块 1     #语句块1和语句块2缩进要“相同”
else: 
    语句块 2    #语句块1和语句块2缩进要“相同”</code></pre><p>例：如果输入的年龄大于等于18岁，就输出“你是成年人啦！”；否则，输出“你还是未成年人！”。</p>
<pre><code>age=int(input(&quot;请输入你的年龄：&quot;))
if age&gt;=18:
    print(&quot;你是成年人啦！&quot;)
else:
    print(&quot;你还是未成年人！&quot;)</code></pre><p>例：火车站行李的收费标准：50Kg及以内为0.95元/kg，超过50Kg部分为1.9元/kg。编程实现根据行李重量计算对应的行李费</p>
<pre><code>weight=eval(input(&quot;请输入行李的重量：&quot;))#eval根据输入转换相应数据类型
if weight&gt;=50:
    pay=50*0.95+(weight-50)*1.9
else:
    pay=weight*0.95
print(&quot;行李重量：{0},行李费：{1}&quot;.format(weight,pay))</code></pre><h2 id="1-3-多分支结构（if-elif-else语句）"><a href="#1-3-多分支结构（if-elif-else语句）" class="headerlink" title="1.3 多分支结构（if_elif_else语句）"></a>1.3 多分支结构（if_elif_else语句）</h2><p>if_elif_else语句是Python语言中实现多分支判断的专用语句，其基本语法格式如下：　　</p>
<pre><code>if 表达式 1: 
    语句块 1 
elif 表达式 2:   
    语句块 2 
elif 表达式 3:     
    语句块 3
……
else:             #（可以省略）若没有else，且没有满足条件，则输出0个语句。
    语句块 n </code></pre><p>例：输入一个学生的成绩x（百分制），输出对应的等级（五级制）。</p>
<pre><code>x=eval(input(&quot;请输入学生成绩：&quot;))
if x&gt;=90:
    level=&quot;优秀&quot;
elif x&gt;=80:
    level=&quot;良好&quot;
elif x&gt;=70:
    level=&quot;中等&quot;
elif x&gt;=60:
    level=&quot;及格&quot;
else:
    level=&quot;不及格&quot;
print(&quot;学生的等级是：&quot;,level)</code></pre><h2 id="1-4-if的嵌套"><a href="#1-4-if的嵌套" class="headerlink" title="1.4 if的嵌套"></a>1.4 if的嵌套</h2><pre><code>if 表达式1: 
    if 表达式2: 
        语句块 1 
    else: 
        语句块 2 
else: 
    if 表达式3: 
        语句块 3 
    else: 
        语句块 4 </code></pre><p>例：快递公司计算快递收费标砖：首重1kg,12元。续重1.3元/公斤，不足1公斤按1公斤计算。</p>
<pre><code>weight=eval(input(&quot;请输入快递的重量：&quot;))
if weight&lt;=1:
    pay=12
else:
    weight=weight-1
    if int(weight)==weight:
        pay=12+weight*1.3
    else:
        pay=12+(int(weight)+1)*1.3
print(&quot;快递的重量：%0.2f，快递费用：%0.2f&quot;%(weight+1,pay))</code></pre><h1 id="2-while循环结构"><a href="#2-while循环结构" class="headerlink" title="2 while循环结构"></a><span id="2">2 while循环结构</span></h1><p>如果需要在满足条件的情况下重复执行一段代码，此时可以借助循环。在Python语言中，常用的循环语句有while循环和for循环。</p>
<h2 id="2-1-while循环语句"><a href="#2-1-while循环语句" class="headerlink" title="2.1 while循环语句"></a>2.1 while循环语句</h2><pre><code>while 表达式:    #任何表达式
    语句块        #任何非零、非空串、非None的值都认为为True</code></pre><p>说明：作为while循环判断条件的表达式，可以是任何形式的Python语言表达式，当表达式的结果为True或者相当为True时，条件成立且可以执行循环；当表达式的结果为False或者相当为False时，条件不成立且循环终止。另外，任何非零、或非空串、非None的表达式的值均为True。</p>
<p>例：计算1+2+3+…+100的值</p>
<pre><code>n=1;s=0
while n&lt;=100:
    s=s+n
    n=n+1
print(&quot;1+2+3+...+100=%d&quot;%(s))</code></pre><p>例：假设我国现在有人口14亿，如果年增长率为1.5%，几年后我国人口增加到或超过20亿？</p>
<pre><code>p=14;n=0
while p&lt;20:
    p=p*(1.15)
    n=n+1
print(&quot;%d年后，我国人口将达到%f亿&quot;%(n,p))</code></pre><p>例：猜数字游戏，猜对输出“恭喜你，猜对了！”，猜错了输出猜大了还是猜小了，直到猜对。</p>
<pre><code>import random
number=random.randint(1,10) #生成[1,10]的随机数，
finished=0
print(&quot;欢迎玩《猜字游戏》&quot;)
while not finished:
    guess=int(input(&quot;请输入你猜的数字：&quot;))
    if guess==number:
        print(&quot;恭喜你，猜对了！&quot;)
        finished=1
    elif guess&lt;number:
        print(&quot;猜小了&quot;)
    else:
        print(&quot;猜大了&quot;)</code></pre><h2 id="2-2-循环控制语句"><a href="#2-2-循环控制语句" class="headerlink" title="2.2 循环控制语句"></a>2.2 循环控制语句</h2><p>While循环除了可以利用循环条件控制循环体是否执行之外，在循环体内还可以利用循环控制语句提前结束一次或整个循环。常用的循环控制语句有：</p>
<ul>
<li>break</li>
<li>continue</li>
<li>sys.exit(0)        表示无异常正常结束，需要 import sys</li>
</ul>
<h2 id="2-3-无限循环"><a href="#2-3-无限循环" class="headerlink" title="2.3 无限循环"></a>2.3 无限循环</h2><p>如果While循环的条件表达式恒为True，则循环体在不受其他条件控制的情况下，将会无限次重复执行下去，此时的while循环即为循环。</p>
<p>常见的无限循环用法为：通常情况下，无限循环需要与循环控制语句联合使用，避免出现“死循环”。　</p>
<pre><code>while True:
    语句块</code></pre><p>例：</p>
<pre><code>a=0
while True:
    a=a+1
    if a==5:
        continue
    print(a,end=&quot;&quot;) #用一个空字符串，能使print不换行
    if a==10:
        break

结果：1234678910</code></pre><h2 id="2-4-while循环的嵌套"><a href="#2-4-while循环的嵌套" class="headerlink" title="2.4 while循环的嵌套"></a>2.4 while循环的嵌套</h2><p>如果while循环体里还有while循环，就称为while循环嵌套。</p>
<p>说明：</p>
<p>1）while循环嵌套一般适用于外层循环一次内层循环N次的情况；</p>
<p>（2）最内层循环体执行的次数等于每一层循环执行次数的乘积——N=N1*N2*..*Nn。</p>
<pre><code>i=1
while i&lt;=5:
    j=1
    while j&lt;=3:
        print(j,end=&#39;&#39;) #用一个空字符串，能使print不换行
        j=j+1
    print()
    i=i+1
结果：
123
123
123
123
123</code></pre><h1 id="3-循环经典问题"><a href="#3-循环经典问题" class="headerlink" title="3 循环经典问题"></a><span id="3">3 循环经典问题</span></h1><h2 id="3-1-水仙花数"><a href="#3-1-水仙花数" class="headerlink" title="3.1 水仙花数"></a>3.1 水仙花数</h2><p>定义：一个三位数，如果个位、十位、百位三次方的和正好等于该数本身</p>
<p>思路：关键是求出该三位数的个、十、百位数</p>
<pre><code>n=100
while n&lt;=999:
    temp=n
    sum=0
    while temp&gt;0:
        a=temp%10
        sum=sum+a**3
        temp=temp//10
    if n==sum:
        print(&quot;%d是一个水仙花数&quot;%(n))
    n=n+1
结果：
153是一个水仙花数
370是一个水仙花数
371是一个水仙花数
407是一个水仙花数</code></pre><h2 id="3-2-阿姆斯特朗数"><a href="#3-2-阿姆斯特朗数" class="headerlink" title="3.2 阿姆斯特朗数"></a>3.2 阿姆斯特朗数</h2><pre><code>n=1
while n&lt;=999999:  #1到100万
    k=len(str(n))   #计算n的位数 
    temp=n
    sum=0
    while temp&gt;0:
        a=temp%10
        sum=sum+a**k
        temp=temp//10
    if n==sum:
        print(&quot;%d是一个阿姆斯特朗数&quot;%(n))
    n=n+1

结果：
1是一个阿姆斯特朗数
2是一个阿姆斯特朗数
3是一个阿姆斯特朗数
4是一个阿姆斯特朗数
5是一个阿姆斯特朗数
6是一个阿姆斯特朗数
7是一个阿姆斯特朗数
8是一个阿姆斯特朗数
9是一个阿姆斯特朗数
153是一个阿姆斯特朗数
370是一个阿姆斯特朗数
371是一个阿姆斯特朗数
407是一个阿姆斯特朗数
1634是一个阿姆斯特朗数
8208是一个阿姆斯特朗数
9474是一个阿姆斯特朗数
54748是一个阿姆斯特朗数
92727是一个阿姆斯特朗数
93084是一个阿姆斯特朗数
548834是一个阿姆斯特朗数</code></pre><h2 id="百鸡问题"><a href="#百鸡问题" class="headerlink" title="百鸡问题"></a>百鸡问题</h2><p>定义：古代有一老汉想用100文钱买100只鸡。公鸡5文钱1只，母鸡3文钱1只，小鸡3只1文钱</p>
<p>分析：公鸡数目x：[0,20]；母鸡数目y：[0,33]；小鸡数目z：[0,100]；</p>
<pre><code>x=0
while x&lt;=20:
    y=0
    z=0
    while y&lt;=33:
        z=0
        while z&lt;=100:
            if x+y+z==100 and 5*x+3*y+z/3==100:
                print(&quot;公鸡%d只，母鸡%d只，小鸡%d只&quot;%(x,y,z))
            z=z+1
        y=y+1
    x=x+1

结果：
公鸡0只，母鸡25只，小鸡75只
公鸡4只，母鸡18只，小鸡78只
公鸡8只，母鸡11只，小鸡81只
公鸡12只，母鸡4只，小鸡84只</code></pre>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>软件项目管理（第四章：IT项目范围管理）</title>
    <url>/2020/04/15/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E8%8C%83%E5%9B%B4%E7%AE%A1%E7%90%86%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/04/15/软件项目管理（第四章：IT项目范围管理）/#1">4.1 项目范围管理概述</a></p>
<p><a href="/2020/04/15/软件项目管理（第四章：IT项目范围管理）/#2">4.2 项目范围规划与范围定义</a></p>
<p><a href="/2020/04/15/软件项目管理（第四章：IT项目范围管理）/#3">4.3 项目工作分解结构技术</a></p>
<p><a href="/2020/04/15/软件项目管理（第四章：IT项目范围管理）/#4">4.4 项目范围核实与控制</a></p>
</blockquote>
<h1 id="4-1-项目范围管理概述"><a href="#4-1-项目范围管理概述" class="headerlink" title="4.1 项目范围管理概述"></a><span id="1">4.1 项目范围管理概述</span></h1><h2 id="4-1-1-项目范围与范围管理"><a href="#4-1-1-项目范围与范围管理" class="headerlink" title="4.1.1 项目范围与范围管理"></a>4.1.1 项目范围与范围管理</h2><p>项目范围管理的过程包括以下内容：</p>
<ol>
<li>收集需求</li>
<li>范围定义</li>
<li>创建工作分解结构<strong>(Work Breakdown Structure，WBS)</strong></li>
<li>范围核实</li>
<li>范围变更控制</li>
</ol>
<a id="more"></a>

<h2 id="4-1-2-IT项目范围管理的重要性"><a href="#4-1-2-IT项目范围管理的重要性" class="headerlink" title="4.1.2 IT项目范围管理的重要性"></a>4.1.2 IT项目范围管理的重要性</h2><ol>
<li>提高费用、时间和资源估算的准确性。</li>
<li>确定进行测量和控制的基准。</li>
<li>有助于项目分工。</li>
</ol>
<p>即——做对的事情比把事情做好更重要</p>
<h1 id="4-2-项目范围规划与范围定义"><a href="#4-2-项目范围规划与范围定义" class="headerlink" title="4.2 项目范围规划与范围定义"></a><span id="2">4.2 项目范围规划与范围定义</span></h1><h2 id="4-2-1-项目范围规划的编制"><a href="#4-2-1-项目范围规划的编制" class="headerlink" title="4.2.1 项目范围规划的编制"></a>4.2.1 项目范围规划的编制</h2><h3 id="1-编制范围规划的依据"><a href="#1-编制范围规划的依据" class="headerlink" title="1 编制范围规划的依据"></a>1 编制范围规划的依据</h3><ol>
<li>环境因素</li>
<li>组织过程资产</li>
<li>项目章程</li>
<li>项目初步范围说明书</li>
</ol>
<h3 id="2-项目范围管理计划"><a href="#2-项目范围管理计划" class="headerlink" title="2 项目范围管理计划"></a>2 项目范围管理计划</h3><h2 id="4-2-2-收集项目需求"><a href="#4-2-2-收集项目需求" class="headerlink" title="4.2.2 收集项目需求"></a>4.2.2 收集项目需求</h2><h3 id="1-收集需求的依据"><a href="#1-收集需求的依据" class="headerlink" title="1 收集需求的依据"></a>1 收集需求的依据</h3><p>（1）项目章程（2）干系人调查表</p>
<h3 id="2-收集需求的工具与技术"><a href="#2-收集需求的工具与技术" class="headerlink" title="2 收集需求的工具与技术"></a>2 收集需求的工具与技术</h3><p>（1）访谈（2）焦点小组会议（3）引导式研讨会（4）名义小组法（5）群体决策技术（6）观察法（7）原型法</p>
<h3 id="3-收集需求的输出"><a href="#3-收集需求的输出" class="headerlink" title="3 收集需求的输出"></a>3 收集需求的输出</h3><p>需求文档内容：（将来转化为需求规格说明书）</p>
<ul>
<li>业务需求。</li>
<li>可跟踪业务目标和项目目标。</li>
<li>功能需求，描述业务流程、信息以及与产品的内在联系。</li>
<li>非功能性要求，如服务水平、合规性、安全、保障能力等。</li>
<li>质量要求。</li>
<li>验收标准。</li>
<li>体现组织指导原则的业务原则。</li>
<li>对组织内部和外部团体的影响。</li>
<li>对支持和培训的需求。</li>
<li>与需求有关的假设条件和制约因素。</li>
</ul>
<h2 id="4-2-3-项目范围定义"><a href="#4-2-3-项目范围定义" class="headerlink" title="4.2.3 项目范围定义"></a>4.2.3 项目范围定义</h2><p>范围定义：根据范围管理计划，采取一定的方法，逐步得到精确的项目范围——项目范围说明书</p>
<h3 id="1-范围定义的依据"><a href="#1-范围定义的依据" class="headerlink" title="1 范围定义的依据"></a>1 范围定义的依据</h3><ol>
<li>项目已有的各种文件</li>
<li>项目范围定义中收集的信息</li>
</ol>
<h3 id="2-范围定义的技术"><a href="#2-范围定义的技术" class="headerlink" title="2 范围定义的技术"></a>2 范围定义的技术</h3><ol>
<li>产品分析</li>
<li>范围方案识别技术</li>
<li>专家评定</li>
</ol>
<h3 id="3-IT-项目范围说明书"><a href="#3-IT-项目范围说明书" class="headerlink" title="3 IT 项目范围说明书"></a>3 IT 项目范围说明书</h3><ol>
<li>项目目标与项目范围指标。</li>
<li>产品描述。</li>
<li>项目可交付成果的规定。</li>
<li>约束条件。</li>
<li>假定。</li>
<li>项目配置关系及其管理要求。</li>
</ol>
<h2 id="4-2-4-软件项目的需求管理"><a href="#4-2-4-软件项目的需求管理" class="headerlink" title="4.2.4 软件项目的需求管理"></a>4.2.4 软件项目的需求管理</h2><h3 id="1-定义需求"><a href="#1-定义需求" class="headerlink" title="1.定义需求"></a>1.定义需求</h3><h3 id="2-需求确认"><a href="#2-需求确认" class="headerlink" title="2.需求确认"></a>2.需求确认</h3><h3 id="3-建立需求状态"><a href="#3-建立需求状态" class="headerlink" title="3.建立需求状态"></a>3.建立需求状态</h3><table>
<thead>
<tr>
<th align="center">状态值</th>
<th align="center">定义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">已建议</td>
<td align="center">该需求已被有权提出需求的人建议</td>
</tr>
<tr>
<td align="center">已批准</td>
<td align="center">该需求已被分析，估计了其对项目余下部分的影响，已用一个确定的产品版本号或创建编号分配到相关基线中，开发团队已同意实现该需求</td>
</tr>
<tr>
<td align="center">已实现</td>
<td align="center">已实现需求代码的设计、编写和单元测试</td>
</tr>
<tr>
<td align="center">已验证</td>
<td align="center">使用所选择的方法已验证了实现的需求，如测试和检测，审查该需求跟踪与测试用例相符</td>
</tr>
<tr>
<td align="center">已删除</td>
<td align="center">计划的需求已从基线中删除，但包括一个原因说明和作出决定的人员</td>
</tr>
</tbody></table>
<h3 id="4-需求评审"><a href="#4-需求评审" class="headerlink" title="4.需求评审"></a>4.需求评审</h3><ul>
<li>制订评审计划。</li>
<li>需求预审查。</li>
<li>召开评审会议。</li>
<li>调整需求文档。</li>
<li>重审需求文档。</li>
</ul>
<h3 id="5-需求承诺"><a href="#5-需求承诺" class="headerlink" title="5.需求承诺"></a>5.需求承诺</h3><img src="/2020/04/15/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E8%8C%83%E5%9B%B4%E7%AE%A1%E7%90%86%EF%BC%89/1.png" class="">

<h3 id="6-需求跟踪"><a href="#6-需求跟踪" class="headerlink" title="6.需求跟踪"></a>6.需求跟踪</h3><p>正向跟踪：每个需求都能在后续工作产品找到对应</p>
<p>逆向跟踪：每个工作产品都能在需求规格说明书中找到出处</p>
<img src="/2020/04/15/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E8%8C%83%E5%9B%B4%E7%AE%A1%E7%90%86%EF%BC%89/2.png" class="">

<p>跟踪需求的过程包括以下内容：</p>
<ul>
<li>从需求到业务需求、机会、目的和目标。</li>
<li>从需求到项目目标。</li>
<li>从需求到项目范围WBS中的可交付成果。</li>
<li>从需求到产品设计。</li>
<li>从需求到产品开发。</li>
<li>从需求到测试策略和测试脚本。</li>
<li>从宏观需求到详细需求。</li>
</ul>
<h3 id="7-需求变更控制"><a href="#7-需求变更控制" class="headerlink" title="7.需求变更控制"></a>7.需求变更控制</h3><img src="/2020/04/15/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E8%8C%83%E5%9B%B4%E7%AE%A1%E7%90%86%EF%BC%89/3.png" class="">

<h1 id="4-3-项目工作分解结构技术"><a href="#4-3-项目工作分解结构技术" class="headerlink" title="4.3 项目工作分解结构技术"></a><span id="3">4.3 项目工作分解结构技术</span></h1><h2 id="4-3-1-工作分解结构WBS"><a href="#4-3-1-工作分解结构WBS" class="headerlink" title="4.3.1 工作分解结构WBS"></a>4.3.1 工作分解结构WBS</h2><h3 id="1-图表形式"><a href="#1-图表形式" class="headerlink" title="1 图表形式"></a>1 图表形式</h3><img src="/2020/04/15/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E8%8C%83%E5%9B%B4%E7%AE%A1%E7%90%86%EF%BC%89/4.png" class="">

<h3 id="2-清单形式"><a href="#2-清单形式" class="headerlink" title="2 清单形式"></a>2 清单形式</h3><ol>
<li>需求分析计划</li>
<li>流程优化</li>
<li>编写需求说明书<ol>
<li>编写需求规格词汇表</li>
<li>绘制业务流程</li>
<li>抽象业务类</li>
<li>建立数据模型</li>
<li>将需求分析图加入规格文档</li>
</ol>
</li>
<li>需求规格测试</li>
<li>需求规格确认</li>
</ol>
<h2 id="4-3-2-工作分解的过程"><a href="#4-3-2-工作分解的过程" class="headerlink" title="4.3.2 工作分解的过程"></a>4.3.2 工作分解的过程</h2><h3 id="1-分解的标准"><a href="#1-分解的标准" class="headerlink" title="1 分解的标准"></a>1 分解的标准</h3><ul>
<li>基于成果或功能的分解方法，以完成该项目应该交付的成果为导向，确定相关的任务、工作、活动和要素。</li>
<li>基于流程的分解方法，以完成该项目所应经历的流程为导向，确定相关的任务、工作、活动和要素。</li>
</ul>
<h3 id="2-分解步骤"><a href="#2-分解步骤" class="headerlink" title="2 分解步骤"></a>2 分解步骤</h3><ol>
<li>确认并分解项目的主要要素。</li>
<li>确定分解标准。</li>
<li>确认分解是否详细，分解结果是否可以作为费用和时间估计的标准，明确责任。</li>
<li>确定项目交付成果。</li>
<li>验证分解正确性。</li>
</ol>
<h3 id="3-分解结果的检验"><a href="#3-分解结果的检验" class="headerlink" title="3 分解结果的检验"></a>3 分解结果的检验</h3><p><strong>任务分解后，需要核实分解的正确性。</strong></p>
<ul>
<li>更底层次的细目是否必要和充分？如果不必要或者不充分，这个组成要素就必须重新修改（增加、减少或修改细目）。</li>
<li>最底层的工作包是否有重复？如果存在重复现象就应该重新分解。</li>
<li>每个细目都有明确的、完整的定义吗？如果不是，这种描述需要修改或补充。</li>
<li>是否每个细目可以进行适当的估算？谁能担负起完成这个任务？如果没有，修正是必要的，目的是提供一个充分的管理控制。</li>
</ul>
<h3 id="4-任务分解的注意事项"><a href="#4-任务分解的注意事项" class="headerlink" title="4 任务分解的注意事项"></a>4 任务分解的注意事项</h3><ul>
<li>要清楚地认识到，确定项目的分解结构就是将项目的产品或服务、组织、过程这3种不同的结构综合为项目分解结构的过程，也是给项目的组织人员分派各自角色和任务的过程。应注意收集与项目相关的所有信息。</li>
<li>对于最底层的工作包，一般要有全面、详细和明确的文字说明，并汇集编制成项目工作分解结构词典，用以描述工作包、提供计划编制信息（如进度计划、成本预算和人员安排），以便于在需要时随时查阅。</li>
<li>并非工作分解结构中所有的分支都必须分解到同一水平，各分支中的组织原则可能会不同。</li>
<li>任务分解的规模和数量因项目而异，先分解大块任务，然后再细分小的任务，最低层是可控和可管理的，避免不必要的过细，最好不要超过7层。按照IT项目的平均规模来说，推荐任务分解时至少分解到一周的工作量（40个小时）。</li>
</ul>
<h1 id="4-4-项目范围核实与控制"><a href="#4-4-项目范围核实与控制" class="headerlink" title="4.4 项目范围核实与控制"></a><span id="4">4.4 项目范围核实与控制</span></h1><h2 id="4-4-1-项目范围核实"><a href="#4-4-1-项目范围核实" class="headerlink" title="4.4.1 项目范围核实"></a>4.4.1 项目范围核实</h2><ul>
<li><p>确定需要进行范围核实的时间。</p>
</li>
<li><p>识别范围核实需要哪些投入。</p>
</li>
<li><p>确定正式被接受的标准和要素。</p>
</li>
<li><p>确定范围核实会议的组织步骤。</p>
</li>
<li><p>组织范围核实会议。</p>
</li>
</ul>
<h2 id="4-4-2-项目范围控制"><a href="#4-4-2-项目范围控制" class="headerlink" title="4.4.2 项目范围控制"></a>4.4.2 项目范围控制</h2><h3 id="1-IT项目范围变更的原因分析"><a href="#1-IT项目范围变更的原因分析" class="headerlink" title="1 IT项目范围变更的原因分析"></a>1 IT项目范围变更的原因分析</h3><ul>
<li><p>项目的生命周期。</p>
</li>
<li><p>项目的组织。</p>
</li>
<li><p>项目经理的素质。</p>
</li>
</ul>
<h3 id="2-对范围变化的控制"><a href="#2-对范围变化的控制" class="headerlink" title="2 对范围变化的控制"></a>2 对范围变化的控制</h3><p>（1）范围变更控制实施的基础和前提</p>
<ul>
<li>进行工作任务分解。</li>
<li>提供项目实施进展报告。</li>
<li>提出变更要求。</li>
<li>项目管理计划。</li>
</ul>
<p>（2）范围变更控制的工具和技术</p>
<ul>
<li>范围变更控制系统。</li>
<li>偏差分析。</li>
<li>补充规划。</li>
<li>配置管理系统。</li>
</ul>
<h3 id="3-项目范围变更控制的作用"><a href="#3-项目范围变更控制的作用" class="headerlink" title="3 项目范围变更控制的作用"></a>3 项目范围变更控制的作用</h3><ul>
<li>合理调整项目范围</li>
<li>纠偏行动。</li>
<li>总结经验教训。</li>
</ul>
<h3 id="4-IT项目范围变更控制过程"><a href="#4-IT项目范围变更控制过程" class="headerlink" title="4 IT项目范围变更控制过程"></a>4 IT项目范围变更控制过程</h3><ul>
<li>提交变更请求：变更请求应被记录，并提交给CCB。</li>
<li>复审变更请求：在CCB复审会议中对变更请求进行初始复审，以确定是否为有效请求。</li>
<li>安排或分配工作：对于确认并批准的变更请求，实施工作分配和安排。</li>
<li>进行变更：对需要采取措施的地方确定应采取的具体措施。</li>
<li>核实或测试工作版本中的变更。</li>
<li>发布工作版本中的变更。</li>
<li>估计所采取的纠正措施的效果，如果所采取的纠正措施仍无法获得满意的范围调整，则重复以上步骤。</li>
</ul>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>软件项目管理（第三章：IT项目整体管理）</title>
    <url>/2020/04/08/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%95%B4%E4%BD%93%E7%AE%A1%E7%90%86%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/04/08/软件项目管理（第三章：IT项目整体管理）/#1">3.1 项目启动和可行性分析</a></p>
<p><a href="/2020/04/08/软件项目管理（第三章：IT项目整体管理）/#2">3.2 项目管理计划</a></p>
<p><a href="/2020/04/08/软件项目管理（第三章：IT项目整体管理）/#3">3.3 IT项目目标管理</a></p>
<p><a href="/2020/04/08/软件项目管理（第三章：IT项目整体管理）/#4">3.4 项目计划执行与变更控制</a></p>
<p><a href="/2020/04/08/软件项目管理（第三章：IT项目整体管理）/#5">3.5 项目收尾与验收</a></p>
</blockquote>
<h1 id="3-1-项目启动和可行性分析"><a href="#3-1-项目启动和可行性分析" class="headerlink" title="3.1 项目启动和可行性分析"></a><span id="1">3.1 项目启动和可行性分析</span></h1><h2 id="3-1-1-项目准备和启动过程"><a href="#3-1-1-项目准备和启动过程" class="headerlink" title="3.1.1 项目准备和启动过程"></a>3.1.1 项目准备和启动过程</h2><p>在项目管理中，启动阶段是<font color="red">识别和启动</font>一个新项目或项目新阶段的过程。</p>
<p>完整的项目启动过程是指从项目的产生、项目概念的开发、机会研究，然后通过可行性分析、选择、优化，确定所要进行的项目，直到最后项目的正式启动。</p>
<a id="more"></a>

<h3 id="1-项目建议书"><a href="#1-项目建议书" class="headerlink" title="1. 项目建议书"></a>1. 项目建议书</h3><ul>
<li>项目的背景。</li>
<li>项目的意义和必要性。</li>
<li>项目产品或服务的市场预测。</li>
<li>项目规模项目建设的必要条件，已具备和尚不具备的条件分析。</li>
<li>投资估算和资金筹措的设想。</li>
<li>项目经济效益、市场前景初步分。</li>
<li>其他需要说明的情况等。</li>
</ul>
<h3 id="2-项目的核准和立项"><a href="#2-项目的核准和立项" class="headerlink" title="2. 项目的核准和立项"></a>2. 项目的核准和立项</h3><p>项目只有在可行性研究或初步计划完成之后才能正式启动，一般包括编写立项报告，在通过审批后召开启动会议，项目正式启动。</p>
<p>对于一个小项目，只要可行、合法，不必经过有关部门的批准就可以实施。</p>
<p>对于大项目一般需要申报到有关部门进行核准，审批通过后才能启动。这一过程称为项目立项。</p>
<h3 id="3-项目启动"><a href="#3-项目启动" class="headerlink" title="3. 项目启动"></a>3. 项目启动</h3><h4 id="（1）立项启动准备"><a href="#（1）立项启动准备" class="headerlink" title="（1）立项启动准备"></a>（1）立项启动准备</h4><ul>
<li>项目考核管理制度。</li>
<li>项目费用管理制度。</li>
<li>项目例会管理制度。</li>
<li>项目通报制度。</li>
<li>项目计划管理制度：明确各级项目计划的制订、检查流程，如整体计划、阶段计划、周计划。</li>
<li>项目文件管理流程：明确各种文件名称的管理和制定文件的标准模板，如汇报模板、例会模板、日志、问题列表等。</li>
</ul>
<h4 id="（2）召开项目启动会议"><a href="#（2）召开项目启动会议" class="headerlink" title="（2）召开项目启动会议"></a>（2）召开项目启动会议</h4><ul>
<li>项目启动会的任务包括下面几项内容。</li>
<li>阐述项目背景、价值、目标。</li>
<li>项目交付物介绍。</li>
<li>项目组织机构及主要成员职责介绍。</li>
<li>使双方人员彼此认识，明确各个层次的接口。</li>
<li>项目初步计划与风险分析。</li>
<li>项目管理制度。</li>
<li>项目将要使用的工作方式。</li>
</ul>
<h3 id="4-指定项目章程"><a href="#4-指定项目章程" class="headerlink" title="4. 指定项目章程"></a>4. 指定项目章程</h3><h2 id="3-1-2-可行性研究"><a href="#3-1-2-可行性研究" class="headerlink" title="3.1.2 可行性研究"></a>3.1.2 可行性研究</h2><h3 id="1-可行性研究的步骤"><a href="#1-可行性研究的步骤" class="headerlink" title="1. 可行性研究的步骤"></a>1. 可行性研究的步骤</h3><h4 id="（1）初步可行性研究"><a href="#（1）初步可行性研究" class="headerlink" title="（1）初步可行性研究"></a>（1）初步可行性研究</h4><p>分析项目的前途，从而决定是否应该继续深入调查研究。</p>
<p>初步估计和确定项目中的关键技术核心问题，以确定是否有可能解决。</p>
<p>初步估计必须进行的辅助研究，以解决项目的核心问题，并判断是否具备必要的技术、实验、人力条件作为支持。</p>
<p>通过项目的初步可行性研究就应当能够回答以下一些问题：</p>
<ul>
<li>项目建设的必要性。</li>
<li>项目建设的周期。</li>
<li>项目需要投入的人力、物力和财力。</li>
<li>项目功能和目标是否可以实现。</li>
<li>项目的经济效益、社会效益是否可以保证。</li>
<li>项目从技术上、经济上是否合理等。</li>
</ul>
<h4 id="（2）详细可行性研究"><a href="#（2）详细可行性研究" class="headerlink" title="（2）详细可行性研究"></a>（2）详细可行性研究</h4><ul>
<li>概述。</li>
<li>需求确定。</li>
<li>现有资源、设施情况分析。</li>
<li>初步设计技术方案。</li>
<li>项目实施进度计划建议。</li>
<li>投资估算和资金筹措计划。</li>
<li>项目组织、人力资源、计划培训计划。</li>
<li>经济和社会效益分析。</li>
<li>合作与协作方式等。</li>
</ul>
<h3 id="2-可行性研究的主要内容"><a href="#2-可行性研究的主要内容" class="headerlink" title="2. 可行性研究的主要内容"></a>2. 可行性研究的主要内容</h3><h4 id="（1）技术可行性分析"><a href="#（1）技术可行性分析" class="headerlink" title="（1）技术可行性分析"></a>（1）技术可行性分析</h4><p>① 项目开发的技术风险。</p>
<p>② 人力资源的有效性。</p>
<p>③ 技术能力的可能性。</p>
<p>④ 设备（产品）的可用性。</p>
<h4 id="（2）经济可行性分析"><a href="#（2）经济可行性分析" class="headerlink" title="（2）经济可行性分析"></a>（2）经济可行性分析</h4><p>① 成本分析。</p>
<p>② 直接经济效益分析。</p>
<p><strong>资金折现公式为：</strong></p>
<p><font color="red">资金折现值 =资金未来值/(1 + t)<sup>T</sup>,其中，t是银行利率，T是年份。</font></p>
<p><strong>量经济效益的指标主要有以下几项:</strong></p>
<ul>
<li>纯收入</li>
<li>投资回收期：</li>
</ul>
<p><font color="red">P<sub>t</sub> = [净现金流量现值累计开始出现正值的年份]–1+[上年净现金流量现值累计的绝对值/当年净现金流量现值]</color></p>
<p>③ 间接经济（社会）效益分析。</p>
<h4 id="（3）运行环境可行性"><a href="#（3）运行环境可行性" class="headerlink" title="（3）运行环境可行性"></a>（3）运行环境可行性</h4><h4 id="（4）可行性研究报告"><a href="#（4）可行性研究报告" class="headerlink" title="（4）可行性研究报告"></a>（4）可行性研究报告</h4><h1 id="3-2-项目管理计划"><a href="#3-2-项目管理计划" class="headerlink" title="3.2 项目管理计划"></a><span id="2">3.2 项目管理计划</span></h1><h2 id="3-2-1-项目计划"><a href="#3-2-1-项目计划" class="headerlink" title="3.2.1 项目计划"></a>3.2.1 项目计划</h2><h3 id="1-项目管理计划的内容"><a href="#1-项目管理计划的内容" class="headerlink" title="1. 项目管理计划的内容"></a>1. 项目管理计划的内容</h3><p><strong>项目整体介绍包括以下内容：</strong></p>
<p>（1）项目名称。</p>
<p>（2）项目需求的简要描述。</p>
<p>（3）发起人的名称。</p>
<p>（4）项目经理与主要成员的简介。</p>
<p>（5）项目可交付成果。</p>
<p>（6）重要资料清单。</p>
<p>（7）有关定义和缩写词的说明。</p>
<p><strong>关于组织和开展项目的描述应包括以下内容：</strong></p>
<p>（1）组织结构图。</p>
<p>（2）项目责任。</p>
<p>（3）其他与组织过程有关的信息。</p>
<p><strong>关于项目运用的管理和技术方法应包括以下内容：</strong></p>
<p>（1）管理目标。</p>
<p>（2）项目控制。</p>
<p>（3）风险管理。</p>
<p>（4）项目人员配置。</p>
<p>（5）技术过程。</p>
<p><strong>在项目计划中用来描述项目任务的部分，应参考范围管理计划的内容：</strong></p>
<p>（1）主要工作包。</p>
<p>（2）主要可交付成果。</p>
<p>（3）与项目工作有关的其他信息。</p>
<p><strong>关于项目进度信息应包括以下内容：</strong></p>
<p>（1）进度概要。</p>
<p>（2）进度细要。</p>
<p>（3）与项目进度有关的其他信息。</p>
<p><strong>关于整体项目预算信息应包括以下内容：</strong></p>
<p>（1）预算概要。</p>
<p>（2）预算细要。</p>
<p>（3）与项目预算有关的其他信息。</p>
<h3 id="2-计划编制流程"><a href="#2-计划编制流程" class="headerlink" title="2. 计划编制流程"></a>2. 计划编制流程</h3><img src="/2020/04/08/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E6%95%B4%E4%BD%93%E7%AE%A1%E7%90%86%EF%BC%89/1.png" class="">

<h3 id="3-项目计划的作用"><a href="#3-项目计划的作用" class="headerlink" title="3. 项目计划的作用"></a>3. 项目计划的作用</h3><ul>
<li>确定项目的工作规范、遵循标准，成为项目实施的依据和指南。</li>
<li>明确项目组各成员及其工作责任范围，以及相应的职权。</li>
<li>使项目组成员明确自己的工作目标、工作方法、工作途径、工作期限要求。</li>
<li>保证项目进行过程中项目组成员和项目干系人之间的交流、沟通与协作，使得项目各项工作协调一致，增加客户满意度。</li>
<li>为项目的跟踪控制提供基础。</li>
<li>项目计划在项目中起到承上启下的作用，计划批准后应当作为项目的工作指南。</li>
</ul>
<h3 id="4-编制项目计划的注意事项"><a href="#4-编制项目计划的注意事项" class="headerlink" title="4. 编制项目计划的注意事项"></a>4. 编制项目计划的注意事项</h3><p>（1）注意项目计划的弹性。</p>
<p>（2）注意项目计划的层次性。</p>
<p>（3）注意计划的现实有用。</p>
<ul>
<li>充分鼓励、积极接纳项目干系人来参与项目计划的制订。</li>
<li>充分利用历史数据。</li>
</ul>
<p>（4）重视与客户的沟通。</p>
<h2 id="3-2-2-制定项目管理计划"><a href="#3-2-2-制定项目管理计划" class="headerlink" title="3.2.2 制定项目管理计划"></a>3.2.2 制定项目管理计划</h2><h3 id="1-编制项目管理计划的依据"><a href="#1-编制项目管理计划的依据" class="headerlink" title="1. 编制项目管理计划的依据"></a>1. 编制项目管理计划的依据</h3><p>（1）项目章程与其他计划编制的输出。</p>
<p>（2）企业环境因素。</p>
<p>（3）组织过程资产。</p>
<p>（4）约束条件。</p>
<p>（5）假定。</p>
<h3 id="2-制定项目管理计划的工具与技术"><a href="#2-制定项目管理计划的工具与技术" class="headerlink" title="2. 制定项目管理计划的工具与技术"></a>2. 制定项目管理计划的工具与技术</h3><p>制订项目管理计划的常用方法是<strong>专家判断法</strong>。该方法可用于：</p>
<ul>
<li>根据项目需要而“剪裁”项目管理过程；</li>
<li>编制应包括在项目管理计划中的技术与管理细节</li>
<li>确定项目所需的资源与技能水平；</li>
<li>定义项目的配置管理级别；</li>
<li>确定哪些项目文件需要经过正式的变更控制过程。</li>
</ul>
<h3 id="3-项目管理计划的输出"><a href="#3-项目管理计划的输出" class="headerlink" title="3. 项目管理计划的输出"></a>3. 项目管理计划的输出</h3><p>项目管理计划是一个文件或文件集，主要包括以下内容。</p>
<p>（1）项目所选用的生命周期以及各阶段将采用的过程。</p>
<p>（2）项目管理团队进行“裁剪”的结果，包括：</p>
<ul>
<li>项目管理团队所选择的项目管理工程</li>
<li>每个所选工程的执行水平；</li>
<li>对这些过程所需的工具与技术的描述；</li>
<li>将如何利用所选过程来管理具体项目，包括这些过程间的依赖关系和相互影响，以及这些过程的主要输入和输出。</li>
</ul>
<p>（3）如何执行工作以实现项目目标。</p>
<p>（4）变更管理计划，用来明确如何对变更进行监控。</p>
<p>（5）配置管理计划，用来明确如何开展配置管理。</p>
<p>（6）如何维护绩效测量基准的严肃性。</p>
<p>（7）干系人的沟通需求和适用的沟通技术。</p>
<p>（8）执行控制层面上的工作分解结构，作为一个基准范围文件。</p>
<p>（9）在执行控制层面上的工作分解结构之中，每个可交付成果的成本估算、计划的开始和结束时间以及职责分配。</p>
<p>（10）技术范围进度和成本绩效测量基准计划，即进度基准计划、成本基准计划（随时间的项目预算）。主要的里程碑和每个主要里程碑的实现日期。</p>
<p>（11）关键的或所需的人员及其预期的成本或工作量。</p>
<p>（12）风险管理计划，包括主要风险以及针对各个主要风险所计划的应对措施和应急费用。</p>
<p>（13）其他子计划。包括范围管理计划、进度管理计划、成本管理计划、质量管理计划、人员管理计划、沟通管理计划、风险应对计划以及采购管理计划。</p>
<h1 id="3-3-IT项目目标管理"><a href="#3-3-IT项目目标管理" class="headerlink" title="3.3 IT项目目标管理"></a><span id="3">3.3 IT项目目标管理</span></h1><h2 id="3-3-1-IT项目目标体系"><a href="#3-3-1-IT项目目标体系" class="headerlink" title="3.3.1 IT项目目标体系"></a>3.3.1 IT项目目标体系</h2><p>一般IT项目目标包括两类，一类是<strong>IT项目的功能性目标</strong>，另一类是<strong>IT项目的控制性目标</strong>。</p>
<h3 id="1-IT项目的功能性目标"><a href="#1-IT项目的功能性目标" class="headerlink" title="1. IT项目的功能性目标"></a>1. IT项目的功能性目标</h3><p>（1）商务智能化目标。</p>
<p>（2）信息资源积累与发展目标。</p>
<p>（3）管理标准化和科学化目标。</p>
<h3 id="2-IT项目的控制性目标"><a href="#2-IT项目的控制性目标" class="headerlink" title="2. IT项目的控制性目标"></a>2. IT项目的控制性目标</h3><p>（1）IT项目质量目标</p>
<p>（2）IT项目进度目标</p>
<p>（3）IT项目费用目标</p>
<p>（4）IT项目安全目标</p>
<p>（5）IT项目附加目标</p>
<h2 id="3-3-2-IT项目目标控制"><a href="#3-3-2-IT项目目标控制" class="headerlink" title="3.3.2 IT项目目标控制"></a>3.3.2 IT项目目标控制</h2><h3 id="1-IT项目质量目标控制"><a href="#1-IT项目质量目标控制" class="headerlink" title="1. IT项目质量目标控制"></a>1. IT项目质量目标控制</h3><h4 id="（1）质量目标特点"><a href="#（1）质量目标特点" class="headerlink" title="（1）质量目标特点"></a>（1）质量目标特点</h4><ul>
<li>质量的无形性。</li>
<li>质量的全过程性。</li>
<li>服务的显著性。</li>
<li>质量检验工作难度大。</li>
</ul>
<h4 id="（2）质量目标控制特点"><a href="#（2）质量目标控制特点" class="headerlink" title="（2）质量目标控制特点"></a>（2）质量目标控制特点</h4><ul>
<li>评估标准体系不健全。</li>
<li>全面、全过程、全员参与。</li>
<li>局部反馈是质量控制的主要方式。</li>
<li>IT项目质量控制的特殊性。</li>
</ul>
<h3 id="2-IT项目费用目标控制"><a href="#2-IT项目费用目标控制" class="headerlink" title="2. IT项目费用目标控制"></a>2. IT项目费用目标控制</h3><h4 id="（1）费用目标特点"><a href="#（1）费用目标特点" class="headerlink" title="（1）费用目标特点"></a>（1）费用目标特点</h4><ul>
<li>维护费用相对较高。</li>
<li>费用类别较多。</li>
<li>期间费用高于产品费用。</li>
</ul>
<h4 id="（2）费用目标控制特点"><a href="#（2）费用目标控制特点" class="headerlink" title="（2）费用目标控制特点"></a>（2）费用目标控制特点</h4><ul>
<li>人工费难以控制。</li>
<li>采用全过程费用管理方法。</li>
</ul>
<h3 id="3-IT项目进度目标控制"><a href="#3-IT项目进度目标控制" class="headerlink" title="3. IT项目进度目标控制"></a>3. IT项目进度目标控制</h3><h4 id="（1）进度目标特点"><a href="#（1）进度目标特点" class="headerlink" title="（1）进度目标特点"></a>（1）进度目标特点</h4><ul>
<li>可拆卸性。</li>
<li>无法准确衡量。</li>
<li>影响因素作用大。</li>
</ul>
<h4 id="（2）进度目标控制特点"><a href="#（2）进度目标控制特点" class="headerlink" title="（2）进度目标控制特点"></a>（2）进度目标控制特点</h4><ul>
<li>注重并行工程的使用。</li>
<li>完善的文档管理是进度管理的基础。</li>
<li>前期管理相对于重于后期管理。</li>
</ul>
<h3 id="4-IT项目安全目标控制"><a href="#4-IT项目安全目标控制" class="headerlink" title="4. IT项目安全目标控制"></a>4. IT项目安全目标控制</h3><h4 id="1-安全目标特点"><a href="#1-安全目标特点" class="headerlink" title="(1)安全目标特点"></a>(1)安全目标特点</h4><ul>
<li>受害对象是信息、数据，而非人身。</li>
<li>安全问题要发生在运营阶段。</li>
<li>安全控制主要在实施阶段。</li>
</ul>
<h4 id="2-安全目标控制特点"><a href="#2-安全目标控制特点" class="headerlink" title="(2)安全目标控制特点"></a>(2)安全目标控制特点</h4><ul>
<li>强调全面性。</li>
<li>管理重点在于建设期。</li>
</ul>
<h1 id="3-4-项目计划执行与变更控制"><a href="#3-4-项目计划执行与变更控制" class="headerlink" title="3.4 项目计划执行与变更控制"></a><span id="4">3.4 项目计划执行与变更控制</span></h1><h2 id="3-4-1-指导与管理项目执行"><a href="#3-4-1-指导与管理项目执行" class="headerlink" title="3.4.1 指导与管理项目执行"></a>3.4.1 指导与管理项目执行</h2><p>具体活动包括如下方面：</p>
<ul>
<li>开展活动来实现项目要求。</li>
<li>创造项目的可交付成果。</li>
<li>配备、培训和管理项目团队成员。</li>
<li>获取、管理和使用资源，包括工具、设备、设施等。</li>
<li>执行已计划好的方法和标准。</li>
<li>建立并管理项目团队内外的项目沟通渠道。</li>
<li>生成项目数据（如成本、进度、质量和技术、项目状态等），为预测提供基础。</li>
<li>提出变更请求，并根据项目范围、计划和环境来实施批准的变更。</li>
<li>管理风险并实施风险应对活动。</li>
<li>管理卖方和供应商。</li>
<li>收集和记录经验教训，并实施批准的过程改进活动。</li>
</ul>
<h3 id="1-项目计划执行的依据"><a href="#1-项目计划执行的依据" class="headerlink" title="1. 项目计划执行的依据"></a>1. 项目计划执行的依据</h3><ul>
<li>项目计划。</li>
<li>辅助说明。</li>
<li>批准的变更请求。</li>
<li>组织管理政策。</li>
<li>预防措施。</li>
<li>纠正措施。</li>
</ul>
<h3 id="2-项目计划执行的工具和技术"><a href="#2-项目计划执行的工具和技术" class="headerlink" title="2.项目计划执行的工具和技术"></a>2.项目计划执行的工具和技术</h3><ul>
<li>普通管理技能。</li>
<li>产品所需的技能和知识。</li>
<li>工作分配体系。</li>
<li>绩效检查例会。</li>
<li>项目管理信息系统。</li>
<li>组织管理程序。</li>
</ul>
<h3 id="3-项目计划执行的输出"><a href="#3-项目计划执行的输出" class="headerlink" title="3. 项目计划执行的输出"></a>3. 项目计划执行的输出</h3><p>可交付成果。</p>
<p>工作绩效信息。</p>
<p>变更要求。</p>
<p>项目管理计划（更新）。</p>
<p>项目文件（更新）。</p>
<h2 id="3-4-2-项目整体变更控制"><a href="#3-4-2-项目整体变更控制" class="headerlink" title="3.4.2 项目整体变更控制"></a>3.4.2 项目整体变更控制</h2><h3 id="1-整体变更控制的依据"><a href="#1-整体变更控制的依据" class="headerlink" title="1. 整体变更控制的依据"></a>1. 整体变更控制的依据</h3><ul>
<li>项目计划。</li>
<li>绩效报告。</li>
<li>变更申请。</li>
</ul>
<h3 id="2-整体变更控制的工具和技术"><a href="#2-整体变更控制的工具和技术" class="headerlink" title="2. 整体变更控制的工具和技术"></a>2. 整体变更控制的工具和技术</h3><p>（1）变更控制系统。</p>
<p>（2）配置管理。</p>
<ul>
<li>识别一个工作子项或系统物理特性和功能特征，并将其形成文档。</li>
<li>控制这些特征的任何变更。</li>
<li>记录和报告这些变更及其绩效。</li>
<li>审计这些工作和系统以证实其与需求相一致。</li>
</ul>
<p>（3）绩效测量</p>
<p>（4）补充计划编制。</p>
<p>（5）项目管理信息系统。</p>
<h3 id="3-整体变更控制的输出"><a href="#3-整体变更控制的输出" class="headerlink" title="3. 整体变更控制的输出"></a>3. 整体变更控制的输出</h3><ul>
<li>项目计划更新。</li>
<li>纠正措施。</li>
<li>经验教训。</li>
</ul>
<h1 id="3-5-项目收尾与验收"><a href="#3-5-项目收尾与验收" class="headerlink" title="3.5 项目收尾与验收"></a><span id="5">3.5 项目收尾与验收</span></h1><h2 id="3-5-1-结束项目或阶段"><a href="#3-5-1-结束项目或阶段" class="headerlink" title="3.5.1 结束项目或阶段"></a>3.5.1 结束项目或阶段</h2><h3 id="1-项目结束"><a href="#1-项目结束" class="headerlink" title="1.项目结束"></a>1.项目结束</h3><p>（1）项目成功与失败的标准。</p>
<p>（2）项目终结。</p>
<p>（3）项目终止。当出现下列条件之一时可以终止项目：</p>
<ul>
<li>项目计划中确定的可交付成果已经出现，项目的目标已经成功实现。</li>
<li>项目已经不具备实用价值。</li>
<li>由于各种原因导致项目无限期拖长。</li>
<li>项目出现了环境的变化，它负面影响项目的未来。</li>
<li>项目所有者的战略发生了变化，项目与项目所有者组织不再有战略的一致性。</li>
<li>项目已没有原来的优势，同其他更领先的项目竞争难以生存。</li>
</ul>
<h3 id="2-项目收尾过程"><a href="#2-项目收尾过程" class="headerlink" title="2. 项目收尾过程"></a>2. 项目收尾过程</h3><ul>
<li>范围确认</li>
<li>质量验收</li>
<li>费用决算</li>
<li>合同终结</li>
<li>文档验收</li>
<li>项目后评价</li>
</ul>
<h2 id="3-5-2-项目验收"><a href="#3-5-2-项目验收" class="headerlink" title="3.5.2 项目验收"></a>3.5.2 项目验收</h2><ul>
<li>开发方按合同要求完成了项目工作内容。</li>
<li>开发方按合同中有关质量、资料等条款要求进行了自检。</li>
<li>项目的进度、质量、工期、费用均满足合同的要求。</li>
<li>客户方按合同的有关条款对开发方交付的软件产品和服务进行确认。</li>
</ul>
<h3 id="1-项目范围确认"><a href="#1-项目范围确认" class="headerlink" title="1. 项目范围确认"></a>1. 项目范围确认</h3><h3 id="2-质量验收"><a href="#2-质量验收" class="headerlink" title="2. 质量验收"></a>2. 质量验收</h3><ul>
<li>项目初始阶段</li>
<li>项目规划阶段</li>
<li>项目实施阶段</li>
<li>项目收尾阶段</li>
</ul>
<h3 id="3-项目资料验收"><a href="#3-项目资料验收" class="headerlink" title="3. 项目资料验收"></a>3. 项目资料验收</h3><p>项目资料交验方按合同条款有关资料验收的范围及清单进行自检和预验收。</p>
<p>项目资料验收的组织方按合同资料清单或国际标准、国家标准的要求分项一一进行验收、立卷、归档。</p>
<p>对验收不合格或者有缺陷的项目资料，应通知相关单位采取措施进行修改或补充。</p>
<p>交接双方对项目资料验收报告进行确认和签证。</p>
<h2 id="3-5-3-项目移交与清算"><a href="#3-5-3-项目移交与清算" class="headerlink" title="3.5.3 项目移交与清算"></a>3.5.3 项目移交与清算</h2><h3 id="1-项目移交"><a href="#1-项目移交" class="headerlink" title="1. 项目移交"></a>1. 项目移交</h3><p><strong>软件项目的移交成果包括以下一些内容：</strong></p>
<ul>
<li>已经配置好的系统环境。</li>
<li>软件产品，如软件光盘介质等。</li>
<li>项目成果规格说明书。</li>
<li>系统使用手册。</li>
<li>项目的功能、性能技术规范。</li>
<li>测试报告等。</li>
</ul>
<p><strong>移交阶段具体的工作包括以下内容：</strong></p>
<ul>
<li>对项目交付成果进行测试，可以进行Alpha测试、Beta测试等各种类型的测试。</li>
<li>检查各项指标，验证并确认项目交付成果满足客户的要求。</li>
<li>对客户进行系统的培训，以满足客户了解和掌握项目结果的需要。</li>
<li>安排后续维护和其他服务工作，为客户提供相应的技术支持服务，必要时另行签定系统的维护合同。</li>
<li>签字移交。</li>
</ul>
<h3 id="2-项目清算"><a href="#2-项目清算" class="headerlink" title="2. 项目清算"></a>2. 项目清算</h3><ul>
<li>项目规划阶段已存在决策失误，如可行性研究报告依据的信息不准确，市场预测失误，重要的经济预测有偏差等诸如此类的原因造成项目决策失误。</li>
<li>项目规划、设计中出现重大技术方向性错误，造成项目的计划不可能实现。</li>
<li>项目的目标已与组织目标不能保持一致。</li>
<li>环境的变化改变了对项目产品的需求，项目的成果已不适应现实需要。</li>
<li>项目范围超出了组织的财务能力和技术能力。</li>
<li>项目实施过程中出现重大质量事故，项目继续运作的经济或社会价值基础已经不复存在。</li>
<li>项目虽然顺利进行了验收和移交，但在软件运行过程中发现项目的技术性能指标无法达到项目设计的要求，项目的经济价值或社会价值无法实现。</li>
<li>项目因为资金或人力无法近期到位，并且无法确定可能到位的具体期限，使项目无法进行下去。</li>
</ul>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（程序设计入门2）</title>
    <url>/2020/04/07/Python%EF%BC%88%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A82%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="/2020/04/07/Python（程序设计入门2）/#1">1 基本输入/输出</a></p>
<p><a href="/2020/04/07/Python（程序设计入门2）/#2">2 字符串操作</a></p>
<p><a href="/2020/04/07/Python（程序设计入门2）/#3">3 内置函数</a></p>
<h1 id="1-基本输入-输出"><a href="#1-基本输入-输出" class="headerlink" title="1 基本输入/输出"></a><span id="1">1 基本输入/输出</span></h1><h2 id="1-1-基本输入函数-input"><a href="#1-1-基本输入函数-input" class="headerlink" title="1.1 基本输入函数 input"></a>1.1 基本输入函数 input</h2><p>input用法：</p>
<p><font color="red">变量=input（提示字符串）</font></p>
<p>Python会显示提示字符串后等待用户输入，用户输入完毕（键入回车）后，将用户输入的内容以<font color="red">字符串的类型</font>给变量赋值。</p>
<h2 id="1-2-基本输出函数-print"><a href="#1-2-基本输出函数-print" class="headerlink" title="1.2 基本输出函数 print"></a>1.2 基本输出函数 print</h2><p>1、字符串原样输出</p>
<pre><code>print（&#39;字符串&#39;）</code></pre><p>2、可以使用 逗号 和 加号 使得print输出多个字符串</p>
<pre><code>&gt;&gt;&gt;print（字符串1，字符串2，字符串3）
字符串1 字符串2 字符串3</code></pre><pre><code>&gt;&gt;&gt;print（字符串1+字符串2+字符串3）
字符串1字符串2字符串3</code></pre><a id="more"></a>

<p>键盘运算输入</p>
<pre><code class="python">&gt;&gt;&gt;x=input(&quot;请输入x：&quot;)
&gt;&gt;&gt;y=input(&quot;请输入y：&quot;)
&gt;&gt;&gt;z=x+y
&gt;&gt;&gt;print(&#39;x+y=&#39;,z)
请输入x：10
请输入y：20
x+y= 1020
#输入内容默认字符串，需要int转型或float
&gt;&gt;&gt;x=int(input(&quot;请输入x：&quot;))
&gt;&gt;&gt;y=int(input(&quot;请输入y：&quot;))
&gt;&gt;&gt;z=x+y
&gt;&gt;&gt;print(&#39;x+y=&#39;,z)
请输入x：10
请输入y：20
x+y= 30</code></pre>
<p>3、对3.1415926保留四位小数输出</p>
<pre><code>&gt;&gt;&gt;print(&quot;%.4f&quot;%3.1415926)
&gt;&gt;&gt;print(&quot;{:.4f}&quot;.format(3.1415926))</code></pre><p>4、r/R</p>
<pre><code>原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 r（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</code></pre><pre><code>&gt;&gt;&gt;print(&#39;hello\nworld&#39;)#转移符原样输出
hello
world
&gt;&gt;&gt;print(r&#39;hello\nworld&#39;)#r或R原样输出
hello\nworld
&gt;&gt;&gt;print(R&#39;hello\nworld&#39;)#R原样输出
hello\nworld</code></pre><h2 id="1-3-使用占位符进行格式化"><a href="#1-3-使用占位符进行格式化" class="headerlink" title="1.3 使用占位符进行格式化"></a>1.3 使用占位符进行格式化</h2><p><font color="red">set=”分隔符”，end=”结束符”</font></p>
<pre><code>&gt;&gt;&gt;print（字符串1，字符串2，字符串3，sep=&quot;&quot;,end=&#39;\n&#39;）
字符串1字符串2字符串3

&gt;&gt;&gt;print（字符串1，字符串2，字符串3，sep=&quot;;&quot;,end=&#39;@@&#39;）
字符串1；字符串2；字符串3@@</code></pre><p><font color="red"><strong>%c</strong>字符及其ASCII码 <strong>%s</strong>字符串 <strong>%d</strong>整数 <strong>%u</strong>无符号整型 <strong>%f</strong>浮点数字 <strong>%e</strong>科学技术法浮点数</font></p>
<p><font color="blue">%%输出一个%</font></p>
<pre><code>&gt;&gt;&gt;name=&quot;TOM&quot;
&gt;&gt;&gt;age=18
&gt;&gt;&gt;print=(&quot;学生%s,今年%d岁&quot;%(name,age))#模板字符后用%作分隔符
学生TOM，今年18岁

&gt;&gt;&gt;pirnt(&quot;%.4f&quot;%3.1415926)
3.1416</code></pre><p><font color="red">format方法进行格式化</font></p>
<pre><code>&gt;&gt;&gt;print(&quot;学生{},今年{}岁&quot;.format(name,age))
学生TOM，今年18岁

&gt;&gt;&gt;str1=&quot;{}{}{}{}&quot;.format(&quot;交通&quot;,&quot;学院&quot;,&quot;信电&quot;,&quot;学院&quot;)#不指定位置
&gt;&gt;&gt;print(str1)
交通学院信电学院
&gt;&gt;&gt;str2=&quot;{0}{1}{2}{1}&quot;.format(&quot;交通&quot;,&quot;学院&quot;,&quot;信电&quot;)#指定位置
&gt;&gt;&gt;print(str2)
交通学院信电学院
#设置参数输出
&gt;&gt;&gt;print(&quot;姓名：{name},邮箱{email}&quot;.format(name=&quot;李四&quot;,email=&quot;111@qq.com&quot;))
姓名：李四，邮箱111@qq.com
&gt;&gt;&gt;pirnt(&quot;{:.4f}&quot;.format(3.1415926))
3.1416</code></pre><img src="/2020/04/07/Python%EF%BC%88%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A82%EF%BC%89/1.png" class="">

<img src="/2020/04/07/Python%EF%BC%88%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A82%EF%BC%89/2.png" class="">

<h2 id="1-4-函数"><a href="#1-4-函数" class="headerlink" title="1.4 函数"></a>1.4 函数</h2><h1 id="2-字符串操作"><a href="#2-字符串操作" class="headerlink" title="2 字符串操作"></a><span id="2">2 字符串操作</span></h1><p>字符串的存储方式：每个字符对应一个下标（索引或序号）从0开始增，倒数从-1开始减</p>
<h2 id="2-1-切片"><a href="#2-1-切片" class="headerlink" title="2.1 切片"></a>2.1 切片</h2><p>格式：s<font color="red">[m:n]</font>,实质是：<font color="red">[m:n)左闭右开</font></p>
<p>格式：s<font color="red">[star​：end：step]</font></p>
<p>表示从start提取到end-1,每间隔step（又称步长，不能为0）个字符提取一个字符</p>
<pre><code>&gt;&gt;&gt;s=&quot;a+b+c+d&quot;
&gt;&gt;&gt;print(s[::2])
abcd</code></pre><pre><code>&gt;&gt;&gt;s=&quot;abcde&quot;
&gt;&gt;&gt;print(s[1])        #第二个字符
&gt;&gt;&gt;print(s[1:3])    #s[1]~s[2]，但不含有s[3]
&gt;&gt;&gt;print(s[1:])        #从s[1]开始的后面所有子串
&gt;&gt;&gt;print(s[1:-1])    #从s[1]~[-2]子串，最后一个[-1]不包括
&gt;&gt;&gt;print(s[:])        #整个字符串
&gt;&gt;&gt;print(s[::])        #整个字符串(step=1)
b
bc
bcde
bcd
abcde
abcde</code></pre><h2 id="2-2-运算符"><a href="#2-2-运算符" class="headerlink" title="2.2 运算符"></a>2.2 运算符</h2><pre><code>&gt;&gt;&gt;a=&quot;hello&quot;
&gt;&gt;&gt;b=&quot;Python&quot;

&gt;&gt;&gt;a+b            
&#39;helloPython&#39;
&gt;&gt;&gt;a*2            
&#39;hellohello&#39;
&gt;&gt;&gt;a[1]        
&#39;e&#39;
&gt;&gt;&gt;a[1:4]
&#39;ell&#39;
&gt;&gt;&gt;&#39;H&#39; in a
False
&gt;&gt;&gt;&#39;H&#39; not in a
True</code></pre><h1 id="3-内置函数"><a href="#3-内置函数" class="headerlink" title="3 内置函数"></a><span id="3">3 内置函数</span></h1><h2 id="3-1-数学函数"><a href="#3-1-数学函数" class="headerlink" title="3.1 数学函数"></a>3.1 数学函数</h2><pre><code>&gt;&gt;&gt;print(abs(-2))            #求数值的绝对值
&gt;&gt;&gt;print(max(1,6,3))        #取较大者
&gt;&gt;&gt;print(min(7,2,3))        #取较小者
&gt;&gt;&gt;print(pow(2,3))            #返回两个数值的幂运算
&gt;&gt;&gt;print(round(65.32451,3))    #对浮点数进行四舍五入，小数第3位
&gt;&gt;&gt;print(sum([1,2,3]))        #求和
2
6
2
8
65.325
6</code></pre><p>divmod(a,b) 分别取商和余数，注意，整数、浮点型都可以。</p>
<pre><code>&gt;&gt;&gt;print(divmod(5,2))
&gt;&gt;&gt;print(divmod(5.0,2))
&gt;&gt;&gt;print(divmod(5.5,2))
(2,1)
(2.0,1.0)
(2.0,1.5)</code></pre><p>eval函数</p>
<pre><code class="python">&gt;&gt;&gt;x=input(&quot;表达式：&quot;)
&gt;&gt;&gt;y=eval(x)    #直接得出表达式结果
&gt;&gt;&gt;print(x,&#39;=&#39;,y)
表达式：2+7+(1*8)
2+7+(1*8) = 17</code></pre>
<p>交换数值</p>
<pre><code>&gt;&gt;&gt;x,y=y,x</code></pre><h2 id="3-2-字符串函数"><a href="#3-2-字符串函数" class="headerlink" title="3.2 字符串函数"></a>3.2 字符串函数</h2><pre><code>&gt;&gt;&gt;s=&#39;hello world hello!&#39;

&gt;&gt;&gt;print(s.replace(&#39;he&#39;,&#39;HE&#39;,1))#replace:不写1就全部替换
HEllo world hello!
&gt;&gt;&gt;print(s.find(&quot;or&quot;))            #find:找
7
&gt;&gt;&gt;print(s.count(&quot;he&quot;))            #count:数
2
&gt;&gt;&gt;print(s.split())                #split:分
[&#39;hello&#39;, &#39;world&#39;, &#39;hello!&#39;]</code></pre><p><strong>所有内置函数查询：</strong><a href="https://www.runoob.com/python/python-built-in-functions.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-built-in-functions.html</a></p>
<h2 id="3-3-转换函数"><a href="#3-3-转换函数" class="headerlink" title="3.3 转换函数"></a>3.3 转换函数</h2><pre><code>&gt;&gt;&gt;int()    #转换为整型
&gt;&gt;&gt;float()    #转换为小数
&gt;&gt;&gt;str()    #数字转换为String
&gt;&gt;&gt;chr()    #(0-255)返回对应字符
&gt;&gt;&gt;ord()    #返回对应的ASCII

&gt;&gt;&gt;bin(8)    #二进制
&#39;0b1000&#39;
&gt;&gt;&gt;oct(9)    #八进制
&#39;0o11&#39;
&gt;&gt;&gt;hex(15)    #十六进制
&#39;0xf&#39;

&gt;&gt;&gt;help()    #查看函数功能，如help(bin)</code></pre><pre><code>&gt;&gt;&gt;int(&#39;11&#39;,2)    #二进制11变成十进制
&gt;&gt;&gt;int(&#39;11&#39;,8)    #八进制11变成十进制
&gt;&gt;&gt;int(&#39;11&#39;,16)    #十六进制11变成十进制
3
9
17</code></pre><pre><code>&gt;&gt;&gt;chr(65)
&#39;A&#39;
&gt;&gt;&gt;chr(97)
&#39;a&#39;</code></pre>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS实用代码</title>
    <url>/2020/04/05/CSS%E5%AE%9E%E7%94%A8%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="网页全局“黑白滤镜”"><a href="#网页全局“黑白滤镜”" class="headerlink" title="网页全局“黑白滤镜”"></a>网页全局“黑白滤镜”</h2><pre><code class="css">&lt;style type=&quot;text/css&quot;&gt;
/*全局黑白字体*/
html {
filter:progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);
-webkit-filter: grayscale(1);
}
&lt;/style&gt;
</code></pre>
<h2 id="字体闪烁"><a href="#字体闪烁" class="headerlink" title="字体闪烁"></a>字体闪烁</h2><h1 class="center-text glitch" data-text="Zhy丶Blog" style="background-color: black;" >Zhy丶Blog</h1>


<pre><code>&lt;style type=&quot;text/css&quot;&gt;
/*网站标题鼠标停留闪烁*/    
.center-text{margin:auto;font-family:&#39;Ubuntu&#39;,sans-serif;font-size:80px;}
.glitch{position:relative;color:#fff;mix-blend-mode:lighten}
.glitch:before,.glitch:after{content:attr(data-text);position:absolute;top:0;width:100%;background:rgba(0,0,0,0);clip:rect(0,0,0,0)}
.glitch:before{left:-1px;text-shadow:1px 0 #ff3f1a}
.glitch:after{left:1px;text-shadow:-1px 0 #00a7e0}
.glitch:hover:before{text-shadow:4px 0 #ff3f1a;animation:glitch-loop-1 .8s infinite ease-in-out alternate-reverse}
.glitch:hover:after{text-shadow:-5px 0 #00a7e0;animation:glitch-loop-2 .8s infinite ease-in-out alternate-reverse}
@-webkit-keyframes glitch-loop-1{0%{clip:rect(36px,9999px,9px,0)}25%{clip:rect(25px,9999px,99px,0)}50%{clip:rect(50px,9999px,102px,0)}75%{clip:rect(30px,9999px,92px,0)}100%{clip:rect(91px,9999px,98px,0)}}
@keyframes glitch-loop-1{0%{clip:rect(36px,9999px,9px,0)}25%{clip:rect(25px,9999px,99px,0)}50%{clip:rect(50px,9999px,102px,0)}75%{clip:rect(30px,9999px,92px,0)}100%{clip:rect(91px,9999px,98px,0)}}
@-webkit-keyframes glitch-loop-2{0%{top:-1px;left:1px;clip:rect(65px,9999px,119px,0)}25%{top:-6px;left:4px;clip:rect(79px,9999px,19px,0)}50%{top:-3px;left:2px;clip:rect(68px,9999px,11px,0)}75%{top:0;left:-4px;clip:rect(95px,9999px,53px,0)}100%{top:-1px;left:-1px;clip:rect(31px,9999px,149px,0)}}
@keyframes glitch-loop-2{0%{top:-1px;left:1px;clip:rect(65px,9999px,119px,0)}25%{top:-6px;left:4px;clip:rect(79px,9999px,19px,0)}50%{top:-3px;left:2px;clip:rect(68px,9999px,11px,0)}75%{top:0;left:-4px;clip:rect(95px,9999px,53px,0)}100%{top:-1px;left:-1px;clip:rect(31px,9999px,149px,0)}}
&lt;/style&gt;</code></pre><pre><code class="html">&lt;h1 class=&quot;center-text glitch&quot; data-text=&quot;Zhy丶Blog&quot;&gt;Zhy丶Blog&lt;/h1&gt;</code></pre>
<a id="more"></a>

<h2 id="文字不可选"><a href="#文字不可选" class="headerlink" title="文字不可选"></a>文字不可选</h2><pre><code class="css">.noselect {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}</code></pre>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Python（程序设计入门1）</title>
    <url>/2020/04/02/Python%EF%BC%88%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A81%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="/2020/04/02/Python（程序设计入门1）/#1">1.标识符命名规则及变量的定义</a></p>
<p><a href="/2020/04/02/Python（程序设计入门1）/#2">2.数据类型基本知识</a></p>
<p><a href="/2020/04/02/Python（程序设计入门1）/#3">3.判断变量数据类型并输出</a></p>
<p><a href="/2020/04/02/Python（程序设计入门1）/#4">4.数据类型转换</a></p>
<p><a href="/2020/04/02/Python（程序设计入门1）/#5">5.正确写出表达式</a></p>
<p><a href="/2020/04/02/Python（程序设计入门1）/#6">6.华氏度转摄氏度和进制转换</a></p>
<p><a href="/2020/04/02/Python（程序设计入门1）/#7">7.注释</a></p>
<p><a href="/2020/04/02/Python（程序设计入门1）/#8">8.缩进</a></p>
<p><a href="/2020/04/02/Python（程序设计入门1）/#9">9.多变量赋值-交换两个变量的值</a></p>
<hr>
<h2 id="1-标识符命名规则及变量的定义"><a href="#1-标识符命名规则及变量的定义" class="headerlink" title="1.标识符命名规则及变量的定义"></a><span id="1">1.标识符命名规则及变量的定义</span></h2><h5 id="Python标识符命名规则"><a href="#Python标识符命名规则" class="headerlink" title="Python标识符命名规则"></a>Python标识符命名规则</h5><ol>
<li>标识符只能由字母、数字和下划线三种字符组成；</li>
<li>第一个字符必须为字母或下划线；</li>
<li>不可使用关键字；</li>
<li>区分大小写。</li>
</ol>
<a id="more"></a>

<h5 id="Python关键字"><a href="#Python关键字" class="headerlink" title="Python关键字"></a>Python关键字</h5><p><code>Python3</code>中保留了<code>35</code>个关键字。</p>
<p>关键字：我们不能把它们用作任何标识符名称。</p>
<pre><code class="python">&gt;&gt;&gt; import keyword
&gt;&gt;&gt; print(keyword.kwlist)
[&#39;False&#39;, &#39;None&#39;, &#39;True&#39;, &#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;nonlocal&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;]</code></pre>
<p>或则通过</p>
<pre><code class="python">name1=&#39;True&#39;
name2=&#39;false&#39;
import keyword
print(keyword.iskeyword(name1))
print(keyword.iskeyword(name2))</code></pre>
<p>name1是关键字，name2由于小写的原因不是关键字，因此输出结果为</p>
<pre><code class="python">True
False</code></pre>
<h5 id="避免使用关键字的方法"><a href="#避免使用关键字的方法" class="headerlink" title="避免使用关键字的方法"></a>避免使用关键字的方法</h5><p>还有一种判断变量名是否是关键字的方法是，所有关键字在编辑器窗口中都是用特殊颜色标注的。如果你的名称如下图所示，你就要注意是否是使用了关键字了！ </p>
<img src="/2020/04/02/Python%EF%BC%88%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A81%EF%BC%89/1.png" class="">

<h2 id="2-数据类型基本知识"><a href="#2-数据类型基本知识" class="headerlink" title="2.数据类型基本知识"></a><span id="2">2.数据类型基本知识</span></h2><h3 id="2-1-数值型"><a href="#2-1-数值型" class="headerlink" title="2.1 数值型"></a>2.1 数值型</h3><p>数值型又分为</p>
<h4 id="2-1-1-整形（int）"><a href="#2-1-1-整形（int）" class="headerlink" title="2.1.1 整形（int）"></a>2.1.1 整形（<code>int</code>）</h4><p>所有变量使用前要先赋值，类型由赋值结果决定，例如：</p>
<pre><code>a=3
b=300000000</code></pre><p>代码定义了两个整形变量，<code>a</code>和<code>b</code>。其值分别为<code>3</code>和<code>300000000</code>，你可以通过Spyder中的变量浏览器观察其变量的类型及值。</p>
<p>注意：与其他编程语言不同的是，在Python语言中整型可以任意大（在内存允许的情况下）</p>
<h4 id="2-1-2-浮点型-float"><a href="#2-1-2-浮点型-float" class="headerlink" title="2.1.2 浮点型(float)"></a>2.1.2 浮点型(<code>float</code>)</h4><p>浮点型就是小数、实数。在计算机专业中，一般用基于科学计数法的 <a href="https://baike.baidu.com/item/浮点型/10765495?fr=aladdin" target="_blank" rel="noopener">浮点数</a> 来表示小数，科学计数法就是将<code>31403140</code>表示成<code>3.14 × 10 ^3</code>，这样所有的小数都可以通过指数将小数点浮动到第一个有效数字后面。用代码表示成<code>3.14e3</code>或者<code>3.14E3</code>。<code>e</code>前表示有效数字（不可为空），<code>e</code>后表示指数（必须为整数）。由于浮点数并不能保证数字的精度，因此会带来一定的误差，例如：我们做数学运算：</p>
<pre><code>&gt;&gt;&gt;4.2+2.1
6.300000000000001</code></pre><p>会得到一个比<code>6.3</code>大<code>0.000000000000001</code>。这就是表示精度不足所来的极小误差。在后面的学习和程序编写过程中要对这个问题进行必要的注意。</p>
<h4 id="2-1-3-复数型（complex）"><a href="#2-1-3-复数型（complex）" class="headerlink" title="2.1.3 复数型（complex）"></a>2.1.3 复数型（<code>complex</code>）</h4><p>  Python提供基于实部和虚部两部分组成的复数类型及其基本运算。这是其他语言所没有的。表示方法是<code>实部+虚部j实部+虚部j</code>或者<code>实部+虚部J实部+虚部J</code>在虚部后面用大写或小写<code>j</code>来标识。可以直接进行复数的加、减、乘、除运算。</p>
<h3 id="2-2-字符串型（Str）"><a href="#2-2-字符串型（Str）" class="headerlink" title="2.2 字符串型（Str）"></a>2.2 字符串型（<code>Str</code>）</h3><h4 id="2-2-1-概念"><a href="#2-2-1-概念" class="headerlink" title="2.2.1 概念"></a>2.2.1 概念</h4><p>  字符串是用一对<strong>英文半角引号</strong>括起来的<code>0</code>个或多个字符序列，这里的“引号”需要特别指出来是<strong>英文</strong>的！可以是单引号或者双引号或者三引号（三个单引号或者三个双引号）。例如以下字符串常量：</p>
<pre><code>&#39;hello&#39;            #单引号
&quot;12.30&quot;            #双引号
&#39;&#39;&#39;大家好&#39;&#39;&#39;        #三个单引号
&quot;&quot;&quot;你好&quot;&quot;&quot;        #三个双引号
&quot;&quot;                #空字符串（0个字符）
“这是中文引号”    #错误的引号会导致程序不正确</code></pre><h4 id="2-2-2-转义字符"><a href="#2-2-2-转义字符" class="headerlink" title="2.2.2 转义字符"></a>2.2.2 转义字符</h4><p>在字符串中，可以加入转义字符来表示特殊的意思。例如：</p>
<pre><code>&#39;hel\nlo&#39;            #\n        表示换行
&quot;12.30\a&quot;            #\a        表示响铃
&quot;大家好\t我叫张三&quot;    #\t    表示横向制表符TAB</code></pre><p>其他转移字符可参考教材表3.3</p>
<h4 id="2-2-3-字符串的运算（连接运算）"><a href="#2-2-3-字符串的运算（连接运算）" class="headerlink" title="2.2.3 字符串的运算（连接运算）"></a>2.2.3 字符串的运算（连接运算）</h4><p>字符串的常用运算为连接运算，例如：</p>
<pre><code>myStr=&quot;山东&quot;+&quot;交通&quot;+&quot;学院&quot;</code></pre><p>则<code>myStr</code>的值为“山东交通学院”</p>
<p>希望同学们一定注意区分数值数据在求<code>+</code>还是字符串在求<code>+</code>，例如：</p>
<pre><code>3+4        #结果为7
&#39;3&#39;+&#39;4&#39;    #结果位&#39;34&#39;，两个字符串连接在一起！</code></pre><h3 id="2-3-布尔型"><a href="#2-3-布尔型" class="headerlink" title="2.3 布尔型"></a>2.3 布尔型</h3><p>布尔型常量只有两个值：<code>True</code>和<code>False</code>。</p>
<p><code>True</code>表示逻辑真</p>
<p><code>False</code>表示逻辑假</p>
<pre><code>var1=3&gt;4        #3&gt;4为假值，因此，var1的结果就是False
var2=5&gt;4        #5&gt;4为真值，因此，var2的结果就是True</code></pre><p>布尔型一般是逻辑运算或关系运算的结果，例如</p>
<pre><code>#关系运算
3&gt;4
10==12-2
a&lt;=b
#逻辑运算
x&gt;4 and y&lt;10
a&lt;6 or a&gt;9
-10&lt;a&lt;=10</code></pre><h3 id="2-4-空值类型"><a href="#2-4-空值类型" class="headerlink" title="2.4 空值类型"></a>2.4 空值类型</h3><p>空值与<code>0</code>与<code>“0”</code>与<code>“”</code>是有所区别的。空值在<code>Python</code>是一个特殊类型：关键字<code>None</code>。</p>
<p><code>0</code>是一个整数，表示整型数字<code>0</code>；</p>
<p><code>“0”</code>是一个字符串，里面有一个字符<code>“0”</code>；</p>
<p><code>&quot;&quot;</code>是一个空字符串。</p>
<h2 id="3-判断变量数据类型并输出"><a href="#3-判断变量数据类型并输出" class="headerlink" title="3.判断变量数据类型并输出"></a><span id="3">3.判断变量数据类型并输出</span></h2><h3 id="input（）函数"><a href="#input（）函数" class="headerlink" title="input（）函数"></a>input（）函数</h3><p>该函数是基本的输入函数，输入的值全部为<strong>字符串类型</strong></p>
<p>使用方式如下：</p>
<pre><code>a=input()</code></pre><p>即可从测试集中获取一个数据将其赋值给变量a。</p>
<p>需要注意的是，我们一般input函数是带有参数的，例如：</p>
<img src="/2020/04/02/Python（程序设计入门1）/2.png">

<p>这个<code>&#39;请输入a的值：&#39;</code>在这里是<strong>提示信息</strong>。我们可以在这后面输入值给a。</p>
<p>此时再次强调，<strong>输入后的值全部为字符串类型！</strong></p>
<h3 id="eval（）函数"><a href="#eval（）函数" class="headerlink" title="eval（）函数"></a>eval（）函数</h3><p>eval函数 称之为评估函数，功能是将字符串数据看做为语句或表达式进行运算评估并返回评估结果。</p>
<p>我们使用它可以用来：</p>
<p>（1）转换输入数据</p>
<p>例如，我们测试值为<code>100</code>,由于使用<code>a=input()</code>函数将数据读入变量a，a的值不是整数<code>100</code>，而是以字符串形式读入的<code>&quot;100&quot;</code>这将导致变量a无法参与算术运算。</p>
<img src="/2020/04/02/Python（程序设计入门1）/3.png">

<p>在运行<code>a/10</code>这个数学运算的时候就会弹出错误提示：’/‘号不支持的运算数据类型：字符串型和整型。这里字符串型只得就是a了。</p>
<p>因此我们可以通过评估函数将其转换为应有的类型。</p>
<pre><code>a=eval(a)   #或者在input的时候直接使用  a=eval(input(a))</code></pre><p>即可解决问题。</p>
<p>（2）我们可以使用eval函数将一个内容为表达式的字符串进行运算并获得结果</p>
<p>例如：有一个字符串为：<code>&quot;12+23&quot;</code>。此时我们可以使用eval函数将这个字符串表达式运算出来。</p>
<img src="/2020/04/02/Python%EF%BC%88%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A81%EF%BC%89/4.png" class="">

<h3 id="type（）函数"><a href="#type（）函数" class="headerlink" title="type（）函数"></a>type（）函数</h3><p>使用type()函数可以获取变量表示的数据对象的类型。</p>
<p>使用方法为</p>
<pre><code>a=&quot;123&quot;
b=123
c=1.23
d=True
print(type(a))
print(type(b))
print(type(c))
print(type(d))</code></pre><p>可以输出变量a、b、c、d的类型分别为字符串、整型、浮点型和布尔型。</p>
<pre><code>&lt;class &#39;str&#39;&gt;
&lt;class &#39;int&#39;&gt;
&lt;class &#39;float&#39;&gt;
&lt;class &#39;bool&#39;&gt;</code></pre><h2 id="4-数据类型转换"><a href="#4-数据类型转换" class="headerlink" title="4.数据类型转换"></a><span id="4">4.数据类型转换</span></h2><h3 id="1-整型数据和浮点型数据的转换方式"><a href="#1-整型数据和浮点型数据的转换方式" class="headerlink" title="1. 整型数据和浮点型数据的转换方式"></a>1. 整型数据和浮点型数据的转换方式</h3><p>整型数据就是没有小数位的数据，浮点型数据就是我们所说的小数或实数</p>
<p>浮点型数据之间的运算会牵扯到数据精度的问题。</p>
<p>我们在处理浮点型数据时经常会指定保留小数点后几位来要求数据有一致的精度。</p>
<p>保留小数有四舍五入、直接舍去两种。</p>
<p>例如：</p>
<p>小数<code>3.14159</code>要求保留三位小数，有两种方式：</p>
<p>（1）四舍五入保留后应为：<code>round(3.14159,3)</code> 得到<code>3.142</code></p>
<p>（2）直接舍去第四位应为：<code>(int(3.14159*100))/100</code> 得到<code>3.141</code>  </p>
<p>两种方式均不考虑第四位小数之后的数字。</p>
<h3 id="2-浮点型转换函数float"><a href="#2-浮点型转换函数float" class="headerlink" title="2. 浮点型转换函数float( )"></a>2. 浮点型转换函数float( )</h3><p>float() 函数用于将整数和字符串转换成浮点数。</p>
<p>使用方法如下：</p>
<pre><code class="python">&gt;&gt;&gt; float(1)
1.0
&gt;&gt;&gt; float(112)
112.0
&gt;&gt;&gt; float(-123.6)
-123.6
&gt;&gt;&gt; float(&#39;123&#39;)     # 字符串123.0
123.0</code></pre>
<p>一般程序中使用到这个函数的地方</p>
<p>（1）float() 函数可以用于输入函数时使用。</p>
<p>例如以下两条输入语句：</p>
<pre><code class="python">a=input()</code></pre>
<p>和</p>
<pre><code class="python">a=float(input())</code></pre>
<p>如果测试数据为12.345，那么第一个变量<code>a</code>应为字符串数据<code>&quot;12.345&quot;</code>,第二句中由于使用了float转换函数，那就应该是整数<code>12.345</code>了。</p>
<h3 id="3-整型转换函数int"><a href="#3-整型转换函数int" class="headerlink" title="3. 整型转换函数int( )"></a>3. 整型转换函数int( )</h3><p>int() 函数用于将一个字符串或数字转换为整型。</p>
<p>使用方法如下：</p>
<pre><code class="python">&gt;&gt;&gt; int(3.6)
3
&gt;&gt;&gt; int(&#39;12&#39;)
12</code></pre>
<p>一般程序中使用到这个函数的地方</p>
<p>（1）int() 函数一般也会用于输入函数时使用（与float的用法一致）。</p>
<p>使用输入语句：<code>a=int(input())</code> 变量<code>a</code>可以直接获得输入的整型数据参与算数运算。</p>
<p>（2）小数取整。</p>
<p>我们可以利用int()函数对小数直接取整，该函数取整的方法是<strong>直接舍去小数部分</strong>。</p>
<p>例如：<code>int(3.6)</code>的值为<code>3</code>。<code>int(3.1)</code>的值也为<code>3</code>。</p>
<h3 id="4-四舍五入取整函数"><a href="#4-四舍五入取整函数" class="headerlink" title="4. 四舍五入取整函数"></a>4. 四舍五入取整函数</h3><p>round()方法返回浮点数 x 的四舍五入值，准确的说保留值将保留到离上一位更近的一端（<strong>四舍六入</strong>）。精度要求高的，不建议使用该函数。</p>
<p>函数使用方法：</p>
<pre><code>round(数值，保留的小数位数)</code></pre><p>其中保留小数位数为<code>0</code>时，可省略</p>
<p>使用方法如下：</p>
<pre><code class="python">print (&quot;round(70.23456) : &quot;, round(70.23456))
print (&quot;round(56.659,1) : &quot;, round(56.659,1))
print (&quot;round(80.264, 2) : &quot;, round(80.264, 2))
print (&quot;round(100.000056, 3) : &quot;, round(100.000056, 3))
print (&quot;round(-100.000056, 3) : &quot;, round(-100.000056, 3))</code></pre>
<p>以上实例运行后输出结果为： </p>
<pre><code class="python">round(70.23456) :  70
round(56.659,1) :  56.7
round(80.264, 2) :  80.26
round(100.000056, 3) :  100.0
round(-100.000056, 3) :  -100.0</code></pre>
<p>但Python的round函数对于中间值5的处理不够精确。这是浮点数的精度问题导致的。例如：<code>round(2.675, 2)</code> 要求对<code>2.675</code>四舍五入的保留2为小数，我们应该得到的结果为<code>2.68</code>,但实际结果却是2.67。</p>
<p>解决办法，可以先将其扩大100倍，变为267.5，然后使用round(267.5)来取得268，之后再去除以100。</p>
<h2 id="5-正确写出表达式"><a href="#5-正确写出表达式" class="headerlink" title="5.正确写出表达式"></a><span id="5">5.正确写出表达式</span></h2><h3 id="5-1-运算符"><a href="#5-1-运算符" class="headerlink" title="5.1 运算符"></a>5.1 运算符</h3><p>Python语言支持以下类型的运算符:</p>
<p>（1）算术运算符</p>
<p>（2）关系运算符</p>
<p>（3）逻辑运算符</p>
<p>（4）位运算符</p>
<p>（5）赋值运算符</p>
<p>（6）成员运算符</p>
<p>（7）身份运算符</p>
<p>接下来让我们一个个来学习Python的运算符。</p>
<h4 id="（1）算术运算符"><a href="#（1）算术运算符" class="headerlink" title="（1）算术运算符"></a>（1）算术运算符</h4><img src="/2020/04/02/Python%EF%BC%88%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A81%EF%BC%89/5.png" class="">

<p>以下实例演示了Python所有算术运算符的操作：</p>
<pre><code>a = 21
b = 10
c = 0 
c = a + b
print (&quot;1 - c 的值为：&quot;, c) 
c = a - b
print (&quot;2 - c 的值为：&quot;, c) 
c = a * b
print (&quot;3 - c 的值为：&quot;, c) 
c = a / b
print (&quot;4 - c 的值为：&quot;, c) 
c = a % b
print (&quot;5 - c 的值为：&quot;, c) 
# 修改变量 a 、b 、c
a = 2
b = 3
c = a**b 
print (&quot;6 - c 的值为：&quot;, c) 
a = 10
b = 5
c = a//b 
print (&quot;7 - c 的值为：&quot;, c)</code></pre><p>以上实例输出结果：</p>
<pre><code>1 - c 的值为： 31
2 - c 的值为： 11
3 - c 的值为： 210
4 - c 的值为： 2.1
5 - c 的值为： 1
6 - c 的值为： 8
7 - c 的值为： 2</code></pre><h4 id="（2）关系运算符"><a href="#（2）关系运算符" class="headerlink" title="（2）关系运算符"></a>（2）关系运算符</h4><img src="/2020/04/02/Python%EF%BC%88%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A81%EF%BC%89/6.png" class="">

<p>演示代码：</p>
<pre><code>a = 21
b = 10
c = 0 
if ( a == b ):
   print (&quot;1 - a 等于 b&quot;)
else:
   print (&quot;1 - a 不等于 b&quot;)
if ( a != b ):
   print (&quot;2 - a 不等于 b&quot;)
else:
   print (&quot;2 - a 等于 b&quot;) 
if ( a &lt; b ):
   print (&quot;3 - a 小于 b&quot;)
else:
   print (&quot;3 - a 大于等于 b&quot;) 
if ( a &gt; b ):
   print (&quot;4 - a 大于 b&quot;)
else:
   print (&quot;4 - a 小于等于 b&quot;) 
# 修改变量 a 和 b 的值
a = 5;
b = 20;
if ( a &lt;= b ):
   print (&quot;5 - a 小于等于 b&quot;)
else:
   print (&quot;5 - a 大于  b&quot;) 
if ( b &gt;= a ):
   print (&quot;6 - b 大于等于 a&quot;)
else:
   print (&quot;6 - b 小于 a&quot;)</code></pre><p>以上实例输出结果：</p>
<pre><code>1 - a 不等于 b
2 - a 不等于 b
3 - a 大于等于 b
4 - a 大于 b
5 - a 小于等于 b
6 - b 大于等于 a</code></pre><h4 id="（3）逻辑运算符"><a href="#（3）逻辑运算符" class="headerlink" title="（3）逻辑运算符"></a>（3）逻辑运算符</h4><img src="/2020/04/02/Python%EF%BC%88%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A81%EF%BC%89/7.png" class="">

<p>演示代码：</p>
<pre><code>a = 10
b = 20
if ( a and b ):
   print (&quot;1 - 变量 a 和 b 都为 true&quot;)
else:
   print (&quot;1 - 变量 a 和 b 有一个不为 true&quot;)
if ( a or b ):
   print (&quot;2 - 变量 a 和 b 都为 true，或其中一个变量为 true&quot;)
else:
   print (&quot;2 - 变量 a 和 b 都不为 true&quot;)
# 修改变量 a 的值
a = 0
if ( a and b ):
   print (&quot;3 - 变量 a 和 b 都为 true&quot;)
else:
   print (&quot;3 - 变量 a 和 b 有一个不为 true&quot;)
if ( a or b ):
   print (&quot;4 - 变量 a 和 b 都为 true，或其中一个变量为 true&quot;)
else:
   print (&quot;4 - 变量 a 和 b 都不为 true&quot;)
if not( a and b ):
   print (&quot;5 - 变量 a 和 b 都为 false，或其中一个变量为 false&quot;)
else:
   print (&quot;5 - 变量 a 和 b 都为 true&quot;)</code></pre><p>以上实例输出结果：</p>
<pre><code>1 - 变量 a 和 b 都为 true
2 - 变量 a 和 b 都为 true，或其中一个变量为 true
3 - 变量 a 和 b 有一个不为 true
4 - 变量 a 和 b 都为 true，或其中一个变量为 true
5 - 变量 a 和 b 都为 false，或其中一个变量为 false</code></pre><h4 id="（4）位运算符"><a href="#（4）位运算符" class="headerlink" title="（4）位运算符"></a>（4）位运算符</h4><p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p>
<p>下表中变量 a 为 60，b 为 13二进制格式如下：</p>
<pre><code>a   = 0011 1100
b   = 0000 1101
-----------------
a&amp;b = 0000 1100
a|b = 0011 1101
a^b = 0011 0001
~a  = 1100 0011</code></pre><img src="/2020/04/02/Python%EF%BC%88%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A81%EF%BC%89/8.png" class="">

<h4 id="（5）赋值运算符"><a href="#（5）赋值运算符" class="headerlink" title="（5）赋值运算符"></a>（5）赋值运算符</h4><img src="/2020/04/02/Python%EF%BC%88%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A81%EF%BC%89/9.png" class="">

<p>演示代码</p>
<pre><code>a = 21
b = 10
c = 0
c = a + b
print (&quot;1 - c 的值为：&quot;, c)
c += a
print (&quot;2 - c 的值为：&quot;, c)
c *= a
print (&quot;3 - c 的值为：&quot;, c)
c /= a 
print (&quot;4 - c 的值为：&quot;, c)
c = 2
c %= a
print (&quot;5 - c 的值为：&quot;, c)
c **= a
print (&quot;6 - c 的值为：&quot;, c)
c //= a
print (&quot;7 - c 的值为：&quot;, c)</code></pre><p>以上实例输出结果：</p>
<pre><code>1 - c 的值为： 31
2 - c 的值为： 52
3 - c 的值为： 1092
4 - c 的值为： 52.0
5 - c 的值为： 2
6 - c 的值为： 2097152
7 - c 的值为： 99864</code></pre><h4 id="（6）成员运算符"><a href="#（6）成员运算符" class="headerlink" title="（6）成员运算符"></a>（6）成员运算符</h4><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p>
<img src="/2020/04/02/Python%EF%BC%88%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A81%EF%BC%89/10.png" class="">

<p>以下实例演示了Python所有成员运算符的操作：</p>
<pre><code>a = 10
b = 20
list = [1, 2, 3, 4, 5 ];
if ( a in list ):
   print (&quot;1 - 变量 a 在给定的列表中 list 中&quot;)
else:
   print (&quot;1 - 变量 a 不在给定的列表中 list 中&quot;)
if ( b not in list ):
   print (&quot;2 - 变量 b 不在给定的列表中 list 中&quot;)
else:
   print (&quot;2 - 变量 b 在给定的列表中 list 中&quot;)
# 修改变量 a 的值
a = 2
if ( a in list ):
   print (&quot;3 - 变量 a 在给定的列表中 list 中&quot;)
else:
   print (&quot;3 - 变量 a 不在给定的列表中 list 中&quot;)</code></pre><p>以上实例输出结果：</p>
<pre><code>1 - 变量 a 不在给定的列表中 list 中
2 - 变量 b 不在给定的列表中 list 中
3 - 变量 a 在给定的列表中 list 中</code></pre><h5 id="（7）身份运算符"><a href="#（7）身份运算符" class="headerlink" title="（7）身份运算符"></a>（7）身份运算符</h5><p>身份运算符用于比较两个对象的存储单元</p>
<img src="/2020/04/02/Python%EF%BC%88%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A81%EF%BC%89/11.png" class="">

<p>以下实例演示了Python所有身份运算符的操作：</p>
<pre><code>a = 20
b = 20
if ( a is b ):
   print (&quot;1 - a 和 b 有相同的标识&quot;)
else:
   print (&quot;1 - a 和 b 没有相同的标识&quot;)
if ( id(a) == id(b) ):
   print (&quot;2 - a 和 b 有相同的标识&quot;)
else:
   print (&quot;2 - a 和 b 没有相同的标识&quot;)
# 修改变量 b 的值
b = 30
if ( a is b ):
   print (&quot;3 - a 和 b 有相同的标识&quot;)
else:
   print (&quot;3 - a 和 b 没有相同的标识&quot;)
if ( a is not b ):
   print (&quot;4 - a 和 b 没有相同的标识&quot;)
else:
   print (&quot;4 - a 和 b 有相同的标识&quot;)</code></pre><p>以上实例输出结果：</p>
<pre><code>1 - a 和 b 有相同的标识
2 - a 和 b 有相同的标识
3 - a 和 b 没有相同的标识
4 - a 和 b 没有相同的标识</code></pre><ul>
<li>is 与 == 区别：</li>
</ul>
<p>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</p>
<pre><code>&gt;&gt;&gt;a = [1, 2, 3]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b is a 
True
&gt;&gt;&gt; b == a
True
&gt;&gt;&gt; b = a[:]
&gt;&gt;&gt; b is a
False
&gt;&gt;&gt; b == a
True</code></pre><h3 id="5-2-混合运算表达式"><a href="#5-2-混合运算表达式" class="headerlink" title="5.2 混合运算表达式"></a>5.2 混合运算表达式</h3><p>1、数值型混合运算</p>
<p><code>Python</code>可以直接通过数学运算表达式的运算结果来给变量分配相应的类型</p>
<p>例如</p>
<pre><code>a=3+3.4</code></pre><p>表达式是一个整型和浮点型的运算，结果是一个浮点型，因此变量<code>a</code>就是浮点型数据。</p>
<p>变量在重新赋值时不需要考虑原有类型，可以直接使用，例如接着重新给<code>a</code>赋值为<code>10</code>。</p>
<pre><code>a=10</code></pre><p>此时，变量又变为了整型数据。</p>
<p>2、<code>Python</code>不允许数字与字符串的<code>+</code>操作。因此经常会造成一些代码错误：</p>
<p>例如：</p>
<pre><code>a=10b=&quot;20&quot;c=a+b</code></pre><p>此时就会造成一个</p>
<pre><code>TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;</code></pre><p>此时，如果<code>b</code>变量是可以转换为数字的，我们可以采用<code>int()</code>或<code>float()</code>等内置转换函数将其转换一下进行运算</p>
<pre><code>c=a+int(b)</code></pre><p>3、算术、关系、逻辑的混合运算</p>
<p><code>Python</code>允许复杂表达式表示，但需要注意混合运算时的优先级顺序，如果你不确定其优先级的顺序，可以使用多层小括号将其括起来。</p>
<p><code>Python</code>与<code>C</code>语言不同的是，在关系与逻辑表达式时，<code>Python</code>允许关系的连写。例如：</p>
<pre><code>10&lt;x&lt;20</code></pre><p>这里表示<code>x&gt;10 and x&lt;20</code>。</p>
<h2 id="6-华氏度转摄氏度和进制转换"><a href="#6-华氏度转摄氏度和进制转换" class="headerlink" title="6.华氏度转摄氏度和进制转换"></a><span id="6">6.华氏度转摄氏度和进制转换</span></h2><p>1、华氏度与摄氏度转换公式：</p>
<p><img src="https://www.educoder.net/api/attachments/609499" alt="img"></p>
<pre><code>C=（F-32）*5/9</code></pre><p>程序会从测试用例获取F的输入值，请根据公式计算出正确的C并正确输出</p>
<pre><code>测试用例： 95.2345</code></pre><p>输出结果：</p>
<pre><code>华氏度:95.23,摄氏度:35.13</code></pre><p><strong>要求输出结果严格按照以上格式，输出字符串中符号均为英文符号，所有数字均四舍五入保留两位小数！</strong></p>
<hr>
<p>2、程序从测试用例读取一个8位二进制数值（字符串类型），请在程序中将其转换为八进制、十进制、十六进制并输出。</p>
<p>测试用例:</p>
<pre><code>00101001</code></pre><p>输出结果：</p>
<pre><code>八进制:0o51
十六进制:0x29
十进制:41</code></pre><p>（1）二进制转换为八进制：</p>
<p>从右向左每三个二进制相当于一个八进制，左侧不足可补0，将三位二进制转成八进制即完成</p>
<pre><code>原二进制：      0 0 1 0 1 0 0 1
二进制分割：    000    101    001
八进制            0    5      1
即八进制为0o51</code></pre><p>（2）二进制转十六进制：</p>
<p>从右向左每四个二进制相当于一个十六进制，左侧不足可补0，将四位二进制转成十六进制即完成</p>
<pre><code>原二进制：          00101001
二进制分割：        0010 1001
十六进制             2    9</code></pre><p>即十六进制数为<code>0x29</code></p>
<p>（3）二进制转十进制：</p>
<p><strong>二进制转十进制两种方法</strong></p>
<p><strong>第一种方法</strong></p>
<p>研究每一个二进制位从右面第一位开始分别使用位乘以该位的值，求和后得到十进制数</p>
<p>二进制：<code>0010 1001</code></p>
<p>十进制：<code>0*2^7+0*2^6+1*2^5+0*2^4+1*2^3+0*2^2+0*2^1+1*2^00∗27+0∗26+1∗25+0∗24+1∗23+0∗22+0∗21+1∗20</code></p>
<p><strong>第二种方法（推荐使用）：</strong></p>
<p>使用转换函数：<code>int(a,2)</code>即可将二进制a转换为十进制。</p>
<p>接着可用<code>oct()</code>函数将十进制数转换为八进制</p>
<p>使用<code>hex()</code>函数转换为十六进制组合输出即可</p>
<p>例如：</p>
<pre><code>a=&quot;10101010&quot;        #2进制字符串
b=int(a,2)            #2进制转10进制
print(b)            #打印10进制
print(oct(b))        #转八进制并打印
print(hex(b))        #转十六进制并打印</code></pre><h2 id="7-注释"><a href="#7-注释" class="headerlink" title="7.注释"></a><span id="7">7.注释</span></h2><h5 id="注释的写法"><a href="#注释的写法" class="headerlink" title="注释的写法"></a>注释的写法</h5><p>单行注释：在要注释的文字前面添加“#”符号；</p>
<p>多行注释：采用三个单引号、三个双引号将多行注释引起来即可；</p>
<p>被注释的语句不会被解释执行。</p>
<pre><code>#这是一个单行注释
a=3 #这后面是注释，#前面的a=3是可以运行的。
&#39;&#39;&#39;
这里是多行注释第一行
这里是多行注释第二行
&#39;&#39;&#39;
&quot;&quot;&quot;
双引号也可以
注释多行
&quot;&quot;&quot;</code></pre><h2 id="8-缩进"><a href="#8-缩进" class="headerlink" title="8.缩进"></a><span id="8">8.缩进</span></h2><h5 id="代码的编写方法"><a href="#代码的编写方法" class="headerlink" title="代码的编写方法"></a>代码的编写方法</h5><p><code>Python</code>的代码编写可以在控制行里一条一条编写，也可以写成一段代码后整体代码段运行。<code>Python</code>最具特色的就是使用缩进来表示代码块，<code>C</code>语言则需要使用大括号 <code>{}</code> 来表示代码段。</p>
<p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。</p>
<p>在编辑器中写代码段的时候一定要注意缩进的写法。</p>
<p>缩进：</p>
<p>多余的缩进及空格将会影响你的程序运行。</p>
<p>例如</p>
<pre><code>a=3
 b=4
c=a+b</code></pre><p>由于在<code>b=4</code>这一句前有多余的空格，代码运行时会提示在<code>Line2</code>处有<code>unexpected indent</code></p>
<pre><code>  File &quot;&lt;ipython-input-23-2e7ee2835689&gt;&quot;, line 2 
    b=4
    ^
IndentationError: unexpected indent</code></pre><p>在<code>if</code>语句中，这样的缩进被用来标识要执行的代码段</p>
<pre><code>if True:                #为真时执行下列代码段(这里表示永真)
    print (&quot;Answer&quot;)
    print (&quot;True&quot;)
else:                    #否则执行下列代码段
    print (&quot;Answer&quot;)
    print (&quot;False&quot;)</code></pre><h2 id="9-多变量赋值-交换两个变量的值"><a href="#9-多变量赋值-交换两个变量的值" class="headerlink" title="9.多变量赋值-交换两个变量的值"></a><span id="9">9.多变量赋值-交换两个变量的值</span></h2><h5 id="简单赋值"><a href="#简单赋值" class="headerlink" title="简单赋值"></a>简单赋值</h5><p>赋值运算符：等号：</p>
<p>等号（=）运算符左边是一个变量名</p>
<p>等号（=）运算符右边是存储在变量中的值。</p>
<pre><code>counter = 100          # 整型变量
miles   = 1000.0       # 浮点型变量
name    = &quot;TOM&quot;     # 字符串
print (counter)
print (miles)
print (name)</code></pre><p>可以得到如下结果：</p>
<pre><code>100
1000.0
TOM</code></pre><h5 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h5><p>此外，Python允许你同时为多个变量赋值</p>
<p>例如：</p>
<pre><code>a = b = c = 1</code></pre><p>以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值。</p>
<p>您也可以为多个对象指定多个变量。例如：</p>
<pre><code>a, b, c = 1, 2, &quot;hello&quot;</code></pre><p>以上实例，两个整型对象 1 和 2 的分配给变量 a 和 b，字符串对象 “hello” 分配给变量 c。</p>
<h5 id="变量值得交换"><a href="#变量值得交换" class="headerlink" title="变量值得交换"></a>变量值得交换</h5><p>（1）传统交换方式：</p>
<p>一般，我们实现两个数的交换，会想到用第三个变量来实现。就像：我们有一瓶醋和一瓶酱油，如何让醋和酱油互换瓶子，我们会想到再拿一个空瓶，先将醋倒入空瓶，再将酱油倒入醋瓶，再把倒出的醋倒入酱油瓶。</p>
<p>实现代码如下：</p>
<pre><code>a=3
b=4
#开始交换
t=a        #将醋倒入空瓶
a=b        #将酱油倒入醋瓶
b=t        #倒出的醋倒入酱油瓶
print(a)
print(b)</code></pre><p>这样的执行结果为</p>
<pre><code>4
3</code></pre><p>（2）python特有的交换方式</p>
<p>Python因为能实现多个变量赋值，因此能够直接实现变量的交换赋值：</p>
<p>例如：</p>
<pre><code>a=3
b=4
a,b=b,a
print(a)
print(b)</code></pre><p>运行结果与上述结果相同</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>软件项目管理（第九章：项目的沟通管理）</title>
    <url>/2020/04/01/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%B2%9F%E9%80%9A%E7%AE%A1%E7%90%86%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/04/01/软件项目管理（第九章：项目的沟通管理）/#1">9.1 项目沟通管理概述</a></p>
<p><a href="/2020/04/01/软件项目管理（第九章：项目的沟通管理）/#2">9.2 项目沟通规划</a></p>
<p><a href="/2020/04/01/软件项目管理（第九章：项目的沟通管理）/#3">9.3 信息发布</a></p>
<p><a href="/2020/04/01/软件项目管理（第九章：项目的沟通管理）/#4">9.4 绩效报告</a></p>
<p><a href="/2020/04/01/软件项目管理（第九章：项目的沟通管理）/#5">9.5 利益相关者管理</a></p>
<p><a href="/2020/04/01/软件项目管理（第九章：项目的沟通管理）/#6">9.6 项目冲突管理</a></p>
</blockquote>
<hr>
<h1 id="9-1-项目沟通管理概述"><a href="#9-1-项目沟通管理概述" class="headerlink" title=" 9.1 项目沟通管理概述"></a><span id="1"> 9.1 项目沟通管理概述</span></h1><h2 id="9-1-1-项目沟通管理概述"><a href="#9-1-1-项目沟通管理概述" class="headerlink" title="9.1.1 项目沟通管理概述"></a>9.1.1 项目沟通管理概述</h2><h3 id="1-沟通的概念"><a href="#1-沟通的概念" class="headerlink" title="1.沟通的概念"></a>1.沟通的概念</h3><p>项目的沟通发生在项目团队与客户、管理层、职能部门、供应商等利益相关者之间以及项目团队内部，主要包括以下两个方面。</p>
<p>（1）管理沟通（2）团队沟通</p>
<h3 id="2-沟通要素"><a href="#2-沟通要素" class="headerlink" title="2.沟通要素"></a>2.沟通要素</h3><p>（1）信息发出者（2）信息接受者（3）媒介（4）信息（5）编码与译码（6）反馈（7）噪声</p>
<h3 id="3-项目沟通的准则"><a href="#3-项目沟通的准则" class="headerlink" title="3.项目沟通的准则"></a>3.项目沟通的准则</h3><p>（1）准确（2）及时（3）完整（4）有效</p>
<h3 id="4-沟通渠道计算公式"><a href="#4-沟通渠道计算公式" class="headerlink" title="4.沟通渠道计算公式"></a>4.沟通渠道计算公式</h3><p><font color="red">沟通渠道=N(N–1)/2</font></p>
<p>N是指参与沟通者的人数</p>
<a id="more"></a>

<h2 id="9-1-2-沟通的作用与影响"><a href="#9-1-2-沟通的作用与影响" class="headerlink" title="9.1.2 沟通的作用与影响"></a>9.1.2 沟通的作用与影响</h2><h3 id="1-项目沟通的作用"><a href="#1-项目沟通的作用" class="headerlink" title="1.项目沟通的作用"></a>1.项目沟通的作用</h3><ol>
<li>决策和计划的基础。</li>
<li>组织和控制管理过程的依据和手段</li>
<li>建立和改善人际关系必不可少的条件</li>
<li>项目经理成功领导的重要手段</li>
<li>信息系统本身是沟通的产物</li>
<li>软件开发的柔性标准需要通过沟通来弥补</li>
</ol>
<h3 id="2-沟通对IT项目实施效率的影响"><a href="#2-沟通对IT项目实施效率的影响" class="headerlink" title="2.沟通对IT项目实施效率的影响"></a>2.沟通对IT项目实施效率的影响</h3><p>（1）项目复杂程度与实施效率。</p>
<p>（2）团队规模与实施效率。</p>
<p>（3）团队的组织方式与实施效率。</p>
<p>（4）团队的默契程度与实施效率。</p>
<h1 id="9-2-项目沟通规划"><a href="#9-2-项目沟通规划" class="headerlink" title=" 9.2 项目沟通规划"></a><span id="2"> 9.2 项目沟通规划</span></h1><h2 id="9-2-1-项目信息传递的方式与渠道"><a href="#9-2-1-项目信息传递的方式与渠道" class="headerlink" title="9.2.1 项目信息传递的方式与渠道"></a>9.2.1 项目信息传递的方式与渠道</h2><h3 id="1-项目信息的特点和表现形式"><a href="#1-项目信息的特点和表现形式" class="headerlink" title="1.项目信息的特点和表现形式"></a>1.项目信息的特点和表现形式</h3><p>项目信息的特点：（1）信息量大（2）系统性强（3）传递障碍多（4）信息反馈滞后</p>
<p>项目信息的表现形式：（1）书面形式（2）谈话信息（3）集体口头形式（4）其他形式</p>
<h3 id="2-项目信息传递的方式"><a href="#2-项目信息传递的方式" class="headerlink" title="2.项目信息传递的方式"></a>2.项目信息传递的方式</h3><h4 id="（1）正式沟通与非正式沟通："><a href="#（1）正式沟通与非正式沟通：" class="headerlink" title="（1）正式沟通与非正式沟通："></a>（1）正式沟通与非正式沟通：</h4><p><strong>正式沟通</strong>是通过项目组织明文规定的渠道进行信息传递和交流的方式。</p>
<p><strong>非正式沟通</strong>是指在正式沟通渠道之外进行的信息传递和交流。</p>
<h4 id="（2）上行沟通、下行沟通、平行沟通："><a href="#（2）上行沟通、下行沟通、平行沟通：" class="headerlink" title="（2）上行沟通、下行沟通、平行沟通："></a>（2）上行沟通、下行沟通、平行沟通：</h4><p><strong>上行沟通</strong>是指下级的意见向上级反映，即自下而上的沟通。</p>
<p><strong>下行沟通</strong>是指领导者对员工进行的自上而下的信息沟通</p>
<p><strong>平行沟通</strong>是指组织中各平行部门之间的信息交流。</p>
<h4 id="（3）单向沟通与双向沟通"><a href="#（3）单向沟通与双向沟通" class="headerlink" title="（3）单向沟通与双向沟通"></a>（3）单向沟通与双向沟通</h4><p> <strong>单向沟通</strong>是指发送者和接受者两者之间的地位不变（单向传递），一方只发送信息，另一方只接受信息。</p>
<p><strong>双向沟通</strong>中发送者和接受者两者之间的位置不断交换，且发送者是以协商和讨论的姿态面对接受者，信息发出以后还需及时听取反馈意见，必要时双方可进行多次重复商谈，直到双方共同明确和满意为止。</p>
<h4 id="（4）书面沟通与口头沟通"><a href="#（4）书面沟通与口头沟通" class="headerlink" title="（4）书面沟通与口头沟通"></a>（4）书面沟通与口头沟通</h4><p><strong>书面沟通</strong>是指用书面的形式所进行的信息传递和交流，一般在以下情况中使用：项目团队中使用的内部备忘录，或者对客户和非公司成员使用报告的方式，例如，正式的项目报告、年报、非正式的个人记录、报事帖。<strong>书面沟通大多用来进行通知、确认、要求等活动，一般在描述清楚事情的前提下尽可能简洁，以免增加负担而流于形式。</strong></p>
<p><strong>口头沟通</strong>指运用口头表达的方式进行信息交流活动，包括会议、评审、私人接触、自由讨论等。</p>
<h4 id="（5）体语沟通和其他沟通"><a href="#（5）体语沟通和其他沟通" class="headerlink" title="（5）体语沟通和其他沟通"></a>（5）体语沟通和其他沟通</h4><h3 id="3-常用的沟通方法"><a href="#3-常用的沟通方法" class="headerlink" title="3.常用的沟通方法"></a>3.常用的沟通方法</h3><h4 id="（1）会议沟通"><a href="#（1）会议沟通" class="headerlink" title="（1）会议沟通"></a>（1）会议沟通</h4><ol>
<li>需要统一思想或行动时（例如，项目建设思路的讨论、项目计划的讨论等）；</li>
<li>需要当事人清楚、认可和接受时（例如，项目考核制度发布前的讨论等）；</li>
<li>传达重要信息时（例如，项目里程碑总结活动、项目评审活动等）；</li>
<li>澄清一些谣传信息，而这些谣传信息将对团队产生较大影响；</li>
<li>讨论复杂问题的解决方案时（例如，针对复杂的技术问题，讨论已收集到的解决方案等）。</li>
</ol>
<h4 id="（2）E-mail沟通"><a href="#（2）E-mail沟通" class="headerlink" title="（2）E-mail沟通"></a>（2）E-mail沟通</h4><ol>
<li>简单问题小范围沟通时（例如，3～5个人沟通一下产出物最终的评审结论等）；</li>
<li>需要大家先思考、斟酌，短时间不需要或很难有结果时（例如，项目团队活动的讨论、复杂技术问题提前通知大家思考等）；</li>
<li>传达非重要信息时（例如，分发周项目状态报告等）；</li>
<li>澄清一些谣传信息，而这些谣传信息可能会对团队带来影响时。</li>
</ol>
<h4 id="（3）口头沟通"><a href="#（3）口头沟通" class="headerlink" title="（3）口头沟通"></a>（3）口头沟通</h4><ol>
<li>彼此之间的办公距离较近时（例如，两人在同一办公室）；</li>
<li>彼此之间存有误会时；</li>
<li>对对方工作不太满意，需要指出其不足时；</li>
<li>彼此之间已经采用了E-mail的沟通方式但问题尚未解决时。</li>
</ol>
<h4 id="（4）电话沟通"><a href="#（4）电话沟通" class="headerlink" title="（4）电话沟通"></a>（4）电话沟通</h4><ol>
<li>彼此之间的办公距离较远、但问题比较简单时（例如，两人在不同的办公室需要讨论一个报表数据的问题等）；</li>
<li>彼此之间的距离很远，很难或无法当面沟通时；</li>
<li>彼此之间已经采用了E-mail的沟通方式但问题尚未解决时。</li>
</ol>
<h4 id="（5）书面报告"><a href="#（5）书面报告" class="headerlink" title="（5）书面报告"></a>（5）书面报告</h4><ol>
<li>有关项目的重要决定；</li>
<li>项目计划；</li>
<li>项目各类技术、管理文档；</li>
<li>项目进展报告；</li>
<li>项目工作总结。</li>
</ol>
<h4 id="（6）项目网站"><a href="#（6）项目网站" class="headerlink" title="（6）项目网站"></a>（6）项目网站</h4><ol>
<li>发布项目进展情况；</li>
<li>发布文档、代码等项目阶段性成果；</li>
<li>项目组间技术问题讨论；</li>
<li>提供项目资料和工具等。</li>
</ol>
<h2 id="9-2-2-编制项目沟通计划"><a href="#9-2-2-编制项目沟通计划" class="headerlink" title="9.2.2 编制项目沟通计划"></a>9.2.2 编制项目沟通计划</h2><h3 id="1-项目沟通计划的内容"><a href="#1-项目沟通计划的内容" class="headerlink" title="1.项目沟通计划的内容"></a>1.项目沟通计划的内容</h3><p>（1）描述信息收集和文件归档的结构，这一结构用于收集和保存不同类型的信息。</p>
<p>（2）项目干系人的联系方式。</p>
<p>（3）传递重要信息的格式。例如，项目绩效报告的格式、项目评审报告的格式等适合本项目统一各种文件的模板，并提供报告编写指南。</p>
<p>（4）用于创建信息的日程表。例如，是否已经分配资源去创建、收集和发送关键项目信息？项目干系人是否知道什么时候期望提交不同的信息？什么时候他们需要参加重要的会议？</p>
<p>（5）获得信息的访问方法。例如，哪些信息在线保存？哪些信息允许项目成员共享？ 每个人都能访问所有的项目文件吗？</p>
<p>（6）工作汇报方式。明确表达项目成员对项目经理或项目经理对上级和相关人员的工作汇报方式、时间和形式。例如，项目组成员对项目经理通过E-mail发送周报；每月直接对用户进行一次项目进展的书面汇报等。</p>
<p>（7）沟通计划的维护人。主要是明确项目发生变化时由谁来更新沟通计划，新的计划如何发送？发送给哪些相关的人员等。</p>
<h3 id="2-项目沟通计划的输出"><a href="#2-项目沟通计划的输出" class="headerlink" title="2.项目沟通计划的输出"></a>2.项目沟通计划的输出</h3><p>（1）确定项目的利益相关者</p>
<p>（2）制定沟通管理计划</p>
<h1 id="9-3-信息发布"><a href="#9-3-信息发布" class="headerlink" title=" 9.3 信息发布"></a><span id="3"> 9.3 信息发布</span></h1><h2 id="9-3-1-项目信息分发"><a href="#9-3-1-项目信息分发" class="headerlink" title="9.3.1 项目信息分发"></a>9.3.1 项目信息分发</h2><h3 id="1-信息发送的依据"><a href="#1-信息发送的依据" class="headerlink" title="1.信息发送的依据"></a>1.信息发送的依据</h3><p>（1）沟通计划的工作结果（2）沟通管理计划</p>
<h3 id="2-信息分发的工具和方法"><a href="#2-信息分发的工具和方法" class="headerlink" title="2.信息分发的工具和方法"></a>2.信息分发的工具和方法</h3><p>（1）沟通技能（2）信息检索系统（3）信息分发系统</p>
<h3 id="3-信息发送的输出"><a href="#3-信息发送的输出" class="headerlink" title="3.信息发送的输出"></a>3.信息发送的输出</h3><h2 id="9-3-2-召开有效的工作会议"><a href="#9-3-2-召开有效的工作会议" class="headerlink" title="9.3.2 召开有效的工作会议"></a>9.3.2 召开有效的工作会议</h2><p>（1）明确会议的目的和期望的结果。</p>
<p>（2）确定参加会议的人员。</p>
<p>（3）在会议前向参加者提供议程</p>
<p>（4）使会议专业化。</p>
<p>（5）会议之后的记录。</p>
<h1 id="9-4-绩效报告"><a href="#9-4-绩效报告" class="headerlink" title=" 9.4 绩效报告"></a><span id="4"> 9.4 绩效报告</span></h1><h2 id="9-4-1-绩效报告的工具与技术"><a href="#9-4-1-绩效报告的工具与技术" class="headerlink" title="9.4.1 绩效报告的工具与技术"></a>9.4.1 绩效报告的工具与技术</h2><p>（1）信息演示工具（2）绩效信息收集与汇总（3）状态审查会议（4）工时汇报系统（5）费用汇报系统</p>
<h2 id="9-4-2-绩效报告的结果"><a href="#9-4-2-绩效报告的结果" class="headerlink" title="9.4.2 绩效报告的结果"></a>9.4.2 绩效报告的结果</h2><p>（1）状态报告（2）进展报告（3）项目预测（4）状态评审会议</p>
<h1 id="9-5-利益相关者管理"><a href="#9-5-利益相关者管理" class="headerlink" title=" 9.5 利益相关者管理"></a><span id="5"> 9.5 利益相关者管理</span></h1><h2 id="9-5-1-利益相关者管理"><a href="#9-5-1-利益相关者管理" class="headerlink" title="9.5.1 利益相关者管理"></a>9.5.1 利益相关者管理</h2><h3 id="1-利益相关者管理的依据"><a href="#1-利益相关者管理的依据" class="headerlink" title="1.利益相关者管理的依据"></a>1.利益相关者管理的依据</h3><p>（1）沟通管理计划（2）组织过程资产</p>
<h3 id="2-利益相关者管理过程"><a href="#2-利益相关者管理过程" class="headerlink" title="2.利益相关者管理过程"></a>2.利益相关者管理过程</h3><img src="/2020/04/01/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%B2%9F%E9%80%9A%E7%AE%A1%E7%90%86%EF%BC%89/1.png" class="">

<h3 id="3-利益相关者管理的工具与技术"><a href="#3-利益相关者管理的工具与技术" class="headerlink" title="3.利益相关者管理的工具与技术"></a>3.利益相关者管理的工具与技术</h3><p>（1）记录利益相关者的信息</p>
<p>（2）问题记录单或行动方案记录单可用来记录并监控问题的解决情况</p>
<p>（3）利益相关者管理策略</p>
<p>（4）期望管理矩阵</p>
<img src="/2020/04/01/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%B2%9F%E9%80%9A%E7%AE%A1%E7%90%86%EF%BC%89/2.png" class="">

<img src="/2020/04/01/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%B2%9F%E9%80%9A%E7%AE%A1%E7%90%86%EF%BC%89/3.png" class="">

<h3 id="4-利益相关者管理的成果"><a href="#4-利益相关者管理的成果" class="headerlink" title="4.利益相关者管理的成果"></a>4.利益相关者管理的成果</h3><p>（1）解决的问题（2）批准的变更请求（3）批准的纠正措施（4）组织过程资产（5）项目管理计划</p>
<h2 id="9-5-2-有效沟通的原则"><a href="#9-5-2-有效沟通的原则" class="headerlink" title="9.5.2 有效沟通的原则"></a>9.5.2 有效沟通的原则</h2><ol>
<li><font color="red">尽早沟通</font></li>
<li><font color="red">主动沟通</font></li>
<li><font color="red">内外有别</font></li>
<li><font color="red">采用对方能接受的沟通风格</font></li>
<li><font color="red">沟通升级原则</font></li>
</ol>
<h2 id="9-5-3-项目沟通障碍分析"><a href="#9-5-3-项目沟通障碍分析" class="headerlink" title="9.5.3 项目沟通障碍分析"></a>9.5.3 项目沟通障碍分析</h2><h3 id="1-主观障碍"><a href="#1-主观障碍" class="headerlink" title="1.主观障碍"></a>1.主观障碍</h3><p>（1）个人的性格、气质、态度、情绪、见解等的差别，使信息在沟通过程中受个人素质、心理因素的制约。</p>
<p>（2）知觉选择偏差所造成的障碍。</p>
<p>（3）经理人员和下级之间相互不信任，这主要是由于经理人员考虑不周，伤害了员工的自尊心，或决策错误所造成的，而相互不信任则会影响沟通的顺利进行。</p>
<p>（4）沟通者的畏惧感以及个人心理品质也会造成沟通障碍。</p>
<p> （5）信息传递者在团队中的地位、信息传递链、团队规模等因素也都会影响有效的沟通。许多研究表明，地位的高低对沟通的方向和频率有很大的影响。</p>
<h3 id="2-客观障碍"><a href="#2-客观障碍" class="headerlink" title="2.客观障碍"></a>2.客观障碍</h3><p>（1）信息的发送者和接收者如果空间距离太远、接触机会少，就会造成沟通障碍。社会文化背景不同、种族不同，而形成的社会距离也会影响信息沟通。</p>
<p>（2）信息沟通往往是依据组织系统分层次逐渐传递的。</p>
<h3 id="3-沟通联络方式的障碍"><a href="#3-沟通联络方式的障碍" class="headerlink" title="3.沟通联络方式的障碍"></a>3.沟通联络方式的障碍</h3><p>（1）语言系统所造成的障碍。</p>
<p>（2） 沟通方式选择不当，原则、方法使用不当所造成的障碍。</p>
<h2 id="9-5-4-有效沟通的方法和技巧"><a href="#9-5-4-有效沟通的方法和技巧" class="headerlink" title="9.5.4 有效沟通的方法和技巧"></a>9.5.4 有效沟通的方法和技巧</h2><p><font color="red">1.沟通要有明确目的</font></p>
<p><font color="red">2.提高沟通的心理水平</font></p>
<p><font color="red">3.沟通中 “听、说’、问“ 交替出现</font></p>
<p><font color="red">4.避免无休止的争论</font></p>
<p><font color="red">5.保持畅通的沟通渠道</font></p>
<p><font color="red">6.充分利用信息技术加强沟通</font></p>
<hr>
<p>克服沟通障碍必须注意以下心理要素：</p>
<p>（1）在沟通过程中要认真感知，集中注意力，以便信息准确而又及时地传递和接受，避免信息错传和接受时减少信息的损失。</p>
<p>（2）增强记忆的准确性是消除沟通障碍的有效心理措施，记忆准确性水平高的人，传递信息可靠，接受信息也准确。</p>
<p>（3）提高思维能力和水平是提高沟通效果的重要心理因素，较高的思维能力和水平对于正确地传递、接受和理解信息，起着重要的作用。</p>
<p>（4）培养镇定情绪和良好的心理气氛，创造一个相互信任、有利于沟通的小环境，有助于人们真实地传递信息和正确地判断信息，避免因偏激而歪曲信息。</p>
<img src="/2020/04/01/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%B2%9F%E9%80%9A%E7%AE%A1%E7%90%86%EF%BC%89/4.png" class="">

<img src="/2020/04/01/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%B2%9F%E9%80%9A%E7%AE%A1%E7%90%86%EF%BC%89/5.png" class="">

<h1 id="9-6-项目冲突管理"><a href="#9-6-项目冲突管理" class="headerlink" title=" 9.6 项目冲突管理"></a><span id="6"> 9.6 项目冲突管理</span></h1><h2 id="9-6-1-冲突管理的概念"><a href="#9-6-1-冲突管理的概念" class="headerlink" title="9.6.1 冲突管理的概念"></a>9.6.1 冲突管理的概念</h2><p>冲突是指在既得利益或潜在利益方面的不平衡，表现为争议，指的是对抗、不搭调、不协调，甚至是抗争。<strong>从管理角度对冲突的定义是：冲突是人的心理的反映，是一种社会心理现象。</strong></p>
<h3 id="1-对冲突的分类"><a href="#1-对冲突的分类" class="headerlink" title="1.对冲突的分类"></a>1.对冲突的分类</h3><p>（1）积极冲突和消极冲突</p>
<p>（2）与上级冲突、与下级冲突、与同级冲突</p>
<p>（3）管理主体内部冲突、客体内部冲突、主体与客体交叉冲突</p>
<h3 id="2-冲突产生的过程"><a href="#2-冲突产生的过程" class="headerlink" title="2.冲突产生的过程"></a>2.冲突产生的过程</h3><p>（1）潜伏阶段（2）被认识阶段（3）被感觉阶段（4）处理阶段（5）结局阶段</p>
<h2 id="9-6-2-冲突来源"><a href="#9-6-2-冲突来源" class="headerlink" title="9.6.2 冲突来源"></a>9.6.2 冲突来源</h2><p>（1）工作内容（2）资源分配（3）进度计划（4）项目成本（5）先后次序（6）组织问题（7）个体差异</p>
<h2 id="9-6-3-冲突处理策略"><a href="#9-6-3-冲突处理策略" class="headerlink" title="9.6.3 冲突处理策略"></a>9.6.3 冲突处理策略</h2><h3 id="1-缓解冲突"><a href="#1-缓解冲突" class="headerlink" title="1.缓解冲突"></a>1.缓解冲突</h3><p>（1）回避或撤退（2）竞争或强迫（3）调停或消除（4）折中或妥协（5）合作、正视和解决问题</p>
<h3 id="2-提升冲突"><a href="#2-提升冲突" class="headerlink" title="2.提升冲突"></a>2.提升冲突</h3><p>（1）改变组织文化（2）运用沟通（3）引进外人或重用吹毛求疵者（4）重新构建组织</p>
<h2 id="9-6-4-冲突管理的技巧"><a href="#9-6-4-冲突管理的技巧" class="headerlink" title="9.6.4 冲突管理的技巧"></a>9.6.4 冲突管理的技巧</h2><ol>
<li>做好团队的思想工作</li>
<li>有意识地培养心理相容</li>
<li>公平竞争，减少冲突</li>
<li>冲突发生，迅速解决</li>
<li>帮助双方学习提高</li>
<li>运用权威</li>
<li>制定预警方案</li>
<li>引发建设性冲突，（1）鼓励冲突（2）引进冲突机制</li>
</ol>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>UML（第四章：类图、对象图）</title>
    <url>/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/03/30/UML（第四章：类图、对象图）/#1">4.1 类与对象</a></p>
<p><a href="/2020/03/30/UML（第四章：类图、对象图）/#2">4.2 识别类与对象</a></p>
<p><a href="/2020/03/30/UML（第四章：类图、对象图）/#3">4.3 类之间的关系</a></p>
<p><a href="/2020/03/30/UML（第四章：类图、对象图）/#4">4.4 类之间关系的识别</a></p>
<p><a href="/2020/03/30/UML（第四章：类图、对象图）/#5">4.5 派生属性和派生关联</a></p>
<p><a href="/2020/03/30/UML（第四章：类图、对象图）/#6">4.6 抽象类和接口</a></p>
<p><a href="/2020/03/30/UML（第四章：类图、对象图）/#7">4.7 类的版型</a></p>
<p><a href="/2020/03/30/UML（第四章：类图、对象图）/#8">4.8 类图</a></p>
<p><a href="/2020/03/30/UML（第四章：类图、对象图）/#9">4.9 对象图</a></p>
<p><a href="/2020/03/30/UML（第四章：类图、对象图）/#10">4.10 类图例子</a>    </p>
</blockquote>
<h2 id="4-1-类与对象"><a href="#4-1-类与对象" class="headerlink" title="4.1 类与对象"></a><span id="1">4.1 类与对象</span></h2><h3 id="4-1-1-对象"><a href="#4-1-1-对象" class="headerlink" title="4.1.1 对象"></a>4.1.1 对象</h3><p>对象是构成世界的一个独立单位，它具有自己的静态特征和动态特征。</p>
<p><strong>静态特征</strong>是可以用某种数据来描述的属性</p>
<p><strong>动态特征</strong>是对象所表现的行为或对象所具有的功能</p>
<p><strong>对象的命名规则：</strong>和类的命名规则一样。</p>
<p>无需特别指出对象名字时，对象的名字和类的名字相同。否则就需要指出对象的名字。</p>
<p><font color="red">对象名:类名&nbsp;&nbsp;&nbsp;or&nbsp;&nbsp;&nbsp;:类名</font></p>
<p>如：   Course:课程</p>
<a id="more"></a>

<h3 id="4-1-2-类"><a href="#4-1-2-类" class="headerlink" title="4.1.2 类"></a>4.1.2 类</h3><p>类是具有相似结构、行为和关系的一组对象的描述符。</p>
<p>类是具有相同属性、操作、关系和语义的对象的描述</p>
<p>类是具有相同属性和服务的一组对象的集合，它为属于该类的全部提供了统一的抽象描述，其内部包括属性和服务两个主要部分。</p>
<p>在UML中，使用划分为<strong>3行格子的矩形图来表示类或对象</strong>，从上往下一次是<strong>类名、属性、方法</strong>。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/1.png" class="">

<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/2.png" class="">

<p><strong>类的命名规则：</strong>类的命名应尽量使用问题域中的术语，明确、无歧义。类的名字首字母应当大写，多个单词组合的，每个单词首字母应大写。</p>
<p><font color="red">简单类名&nbsp;&nbsp;&nbsp;or&nbsp;&nbsp;&nbsp;包名::类名</font></p>
<h3 id="4-1-3-类和对象的关系"><a href="#4-1-3-类和对象的关系" class="headerlink" title="4.1.3 类和对象的关系"></a>4.1.3 类和对象的关系</h3><p>模具和铸件的关系</p>
<p>类给出了属于该类的全部对象的抽象定义，而对象则是符合这种定义的一个实体；</p>
<p>一个对象又称为类的一个实例（instance），也可以把类作为对象的模板（template）</p>
<h3 id="4-1-4-类的符号"><a href="#4-1-4-类的符号" class="headerlink" title="4.1.4 类的符号"></a>4.1.4 类的符号</h3><p>注意：名称分栏是必须出现的分栏，属性分栏和操作分栏可以出现或不出现。当隐藏某个分栏时，并不一定表示某个分栏不存在。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/3.png" class="">

<h3 id="4-1-5-类的属性"><a href="#4-1-5-类的属性" class="headerlink" title="4.1.5 类的属性"></a>4.1.5 类的属性</h3><p>属性用来描述该类的对象所具有的静态特征</p>
<p>一个类可以有一个或多个属性或者根本没有属</p>
<p><strong>属性的值可以描述对象的状态</strong></p>
<p>类的属性分为两种：一种属性值可以被其他对象存取；另一种属性值只能被本对象的操作所存取</p>
<p><strong>属性必须命名</strong></p>
<p>在需求分析阶段，只抽取那些系统中需要使用的特征作为类的属性</p>
<hr>
<p><strong>语法格式：</strong></p>
<pre><code>[可见性] 属性名 [:类型] [&#39;[&#39;多重性[次序]&#39;]&#39; ][初始值][{约束特性}]</code></pre><img src="/2020/03/30/UML（第四章：类图、对象图）/4.png" >

<p><strong>属性名：</strong>按照UML的约定，单字属性名小写。如果属性名包含多个单词，这些单词要合并，且除了第一个单词外其余单词的首字母要大写。</p>
<p><strong>类型：</strong>说明属性的数据类型。<strong>类型包括</strong> 字符串（string）、浮点型（float）、整型（int）和布尔型（boolean）（以及其他的枚举类型）、自定义的数据类型。</p>
<p><strong>可见性：</strong>用来控制外部事件对类中属性的操作方式。类中属性的可见性主要包括公有（public）、私有（private）和受保护（protected）。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>可见性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>public</td>
<td>在任何类内部和外界都能访问</td>
</tr>
<tr>
<td>#</td>
<td>protected</td>
<td>能在定义该成员的类或者其子类中使用，不能被外界访问</td>
</tr>
<tr>
<td>-</td>
<td>private</td>
<td>只能在定义成员的类的内部使用，不能被外界访问，也不能被子类访问</td>
</tr>
</tbody></table>
<p><strong>多重性：</strong>多重性为可选项，它表达该类的每个实例的属性值的个数。可以像应用于类之间的关系中那样把多重性应用于属性。同时这些值之间可以是有序的。<strong>通常与关联关系配合使用。</strong></p>
<p><strong>初始值：</strong>为了保护系统的完整性，防止漏掉取值或被非法的值破坏系统的完整性，可以设定属性的初始值。</p>
<p><strong>约束特性：</strong>约束特性用于描述属性的可变性。可变性描述了对属性取值的修改的限制。</p>
<p>3种预定义的属性可变性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>可变的(changeable)</td>
<td>属性取值没有限制，可以被随意修改</td>
</tr>
<tr>
<td>只可加(addOnly)</td>
<td>对多重性&gt;1的属性,可以增加,但一旦被创建,就不可消除或改变</td>
</tr>
<tr>
<td>冻结的(frozen)</td>
<td>它表明属性所在的类的对象一旦被初始化，它的取值就不能再改变</td>
</tr>
</tbody></table>
<blockquote>
<p>例子：</p>
<p>+size: Area=(100,100)</p>
<p>#visibility: Boolean=false</p>
<p>+default-size:Rectangle</p>
<p>colors:Colors[3]</p>
<p>points:Point[2..* ordered]</p>
<p>name: String[0..1]</p>
</blockquote>
<h3 id="4-1-6-类的操作"><a href="#4-1-6-类的操作" class="headerlink" title="4.1.6 类的操作"></a>4.1.6 类的操作</h3><p>操作用来描述该类的对象所具有的<strong>动态特征</strong></p>
<p><strong>一个类可以有一个或多个操作或者根本没有操作</strong></p>
<p>操作描述对数据的具体处理方法，存取或改变属性值或执行某个动作都是操作。</p>
<p>类的操作所提供的服务分为两种：一种是操作的结果引起了对象状态的改变；另一种是为服务的请求者提供返回结果。</p>
<p>操作用于修改、检索类的属性或执行某些动作，操作通常也成为功能。</p>
<p>它们被约束在类的内部，只能作用到该类的对象上。</p>
<hr>
<p><strong>语法格式：</strong></p>
<pre><code>[可见性] 操作名 [（参数表）] [:返回类型] [{约束特性}]</code></pre><p><strong>操作名：</strong>指示类可提供的功能服务，它后跟圆括号中的参数列表是可选项，即一个操作可以有参数，也可以没有参数。</p>
<p><strong>参数列表：</strong>由逗号分隔的操作的形式参数组成，其格式为： <font color="red">参数名：类型=缺省值，…</font></p>
<p><strong>返回类型：</strong>是返回给调用者的单个变量值，它可以表示该操作程序运行的一个成功标志或者计算的值。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/5.png" class="">

<h3 id="4-1-7-类的作用域"><a href="#4-1-7-类的作用域" class="headerlink" title="4.1.7 类的作用域"></a>4.1.7 类的作用域</h3><p>类的作用域分为两种：<strong>对象作用域和类作用域</strong></p>
<p><strong>对象作用域：</strong>指的是此类的每个对象都有一个自己的副本，彼此不共享属性值</p>
<p><strong>类作用域：</strong>指的是只有一个副本，类的所有对象共享此副本。即共享属性值</p>
<blockquote>
<p>如：<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/6.png" class=""></p>
<p>mcount属性具有类作用域，title属性具有对象作用域</p>
<p>getCount()操作具有类作用域，getTitle()操作具有对象作用域</p>
<p><font color="red">类作用域加“下划线”</font></p>
</blockquote>
<h3 id="4-1-8-类的职责"><a href="#4-1-8-类的职责" class="headerlink" title="4.1.8 类的职责"></a>4.1.8 类的职责</h3><p>类的职责指的是对该类的所有对象所具备的那些相同的属性和操作共同组成的功能或服务的抽象。</p>
<p>类的属性和操作是对类的具体结构特征和行为特征的<strong>形式化描述</strong>；而类的职责是对类的功能和作用的<strong>非形式化描述</strong>。</p>
<p>类的职责是一段或多段文本描述。</p>
<p>一个类可以有多种职责。</p>
<p>设计好的类一般至少有一种职责。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/7.png" class="">

<h2 id="4-2-识别类与对象"><a href="#4-2-识别类与对象" class="headerlink" title="4.2 识别类与对象"></a><span id="2">4.2 识别类与对象</span></h2><h3 id="4-2-1-类的识别"><a href="#4-2-1-类的识别" class="headerlink" title="4.2.1 类的识别"></a>4.2.1 类的识别</h3><h4 id="1-考虑问题域："><a href="#1-考虑问题域：" class="headerlink" title="1.考虑问题域："></a>1.考虑问题域：</h4><p>客观存在的事物与系统中对象的映射</p>
<h4 id="2-名词短语识别法："><a href="#2-名词短语识别法：" class="headerlink" title="2.名词短语识别法："></a>2.名词短语识别法：</h4><p>对用户需求的陈述进行构词分析相关类、模糊类、无关类</p>
<h4 id="3-系统实体识别方法："><a href="#3-系统实体识别方法：" class="headerlink" title="3.系统实体识别方法："></a>3.系统实体识别方法：</h4><p>从通用的对象分类理论中导出候选类。大多数客观事物分为五类：</p>
<ol>
<li>可感知的物理实体；</li>
<li>人或组织的参与者；</li>
<li>应该记忆的事件；</li>
<li>两个或多个对象的相互作用；</li>
<li>需要说明的概念。</li>
</ol>
<h4 id="4-CRC方法："><a href="#4-CRC方法：" class="headerlink" title="4.CRC方法："></a>4.CRC方法：</h4><p>类-责任-协作者(class-responsibility-collaborator,CRC)，表示类的索引卡片，每张卡片分成三部分：<strong>类名、类的责任、类的协作者</strong>。</p>
<p><strong>责任</strong>是与类相关的属性和操作，即类知道要做的事；<strong>协作者</strong>是为某个类提供完成责任所需要的信息的类，即协作类。通常蕴含着对信息的请求或对某动作的请求。</p>
<p><strong>CRC方法：</strong>不仅可以发现类，还是一种用来进行对象的解释、理解的工具。</p>
<p><strong>步骤：</strong></p>
<p>（1）创建CRC卡片，标识出类</p>
<p>将类名、责任、协作者写入卡片；当需要的服务没有被存在的类覆盖时就创建一个新类，并赋予适当的责任和协作者。如果这个类太忙了，可以把它分为几个小类。</p>
<p>类的<font color="red">责任</font>是通过用例以面向对象的方式产生的。通过对用例的分析，产生了系统的交互，分析在交互中完成某任务所需的步骤及完成步骤的主体，产生合力的对象职责划分。类应具备的属性和操作是根据类的<font color="red">责任</font>给出的。</p>
<p><font color="red">协作</font>表示类间的关系。检索类间的关系，如果两个类具有泛化关系，或一个类必须从另一个类获得信息，或者一个类依赖另一个类，则他们之间往往存在协作关系。</p>
<p>（2）CRC复审</p>
<p>复审由用户和开发人员共同参与。</p>
<p>例子：<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/8.png" class=""></p>
<h4 id="5-审查与筛选："><a href="#5-审查与筛选：" class="headerlink" title="5.审查与筛选："></a>5.审查与筛选：</h4><p>筛选掉不正确或不必要的对象。</p>
<h4 id="6-精简与调整："><a href="#6-精简与调整：" class="headerlink" title="6.精简与调整："></a>6.精简与调整：</h4><p>只有一个属性的对象</p>
<p>只有一个操作的对象</p>
<p>类的属性和操作不适合该类的全部对象</p>
<p>属性和操作相同的类</p>
<p>属性和操作相似的类</p>
<h4 id="7-类的命名："><a href="#7-类的命名：" class="headerlink" title="7.类的命名："></a>7.类的命名：</h4><p><strong>遵循以下原则：</strong></p>
<ol>
<li>类的名字应恰好符合这个类和它的特殊类所包含的每一个对象；</li>
<li>类的名字应该反映每个对象个体，而不是整个群体；</li>
<li>采用名词或带定语的名词，并使用规范的词汇；</li>
<li>使用适当的语言文字对类命名；</li>
<li>简单名、路径名（包名：：类名）。</li>
</ol>
<h3 id="4-2-2-属性的识别"><a href="#4-2-2-属性的识别" class="headerlink" title="4.2.2 属性的识别"></a>4.2.2 属性的识别</h3><h4 id="1-分析"><a href="#1-分析" class="headerlink" title="1.分析"></a>1.分析</h4><p>需求陈述中通常用名词、名词词组表示属性；</p>
<p>属性的确定与问题域有关，也和系统的责任有关，应该仅考虑与具体应用直接相关的属性；</p>
<p>在类与对象中，必须给每个属性一个唯一的名字，指明属性的类型；</p>
<h4 id="2-识别属性"><a href="#2-识别属性" class="headerlink" title="2.识别属性"></a>2.识别属性</h4><p><strong>一些启发性策略：</strong></p>
<ul>
<li>按一般常识这个对象具有哪些属性？</li>
<li>在当前问题域中，这个对象应该具有哪些属性?</li>
<li>根据系统的责任要求，这个对象应该具有哪些属性？</li>
<li>建立的这个对象是为了保存和管理哪些信息？</li>
<li>为了在对象的操作中实现特定的功能，需要增设哪些属性？</li>
<li>对象有哪些需要区别的状态？</li>
<li>用什么属性表示聚合和关联？</li>
<li>寻找在用户给出的需求陈述中作为定于的词汇。</li>
</ul>
<h4 id="3-审查与筛选"><a href="#3-审查与筛选" class="headerlink" title="3.审查与筛选"></a>3.审查与筛选</h4><p><strong>确定属性时应注意：</strong></p>
<ul>
<li>误把对象当做属性；</li>
<li>误把关联类的属性当作对象的属性；</li>
<li>误把内部状态当作属性；</li>
<li>过于细化；</li>
<li>存在不一致的属性；</li>
<li>属性不能包含一个内部结构；</li>
<li>属性在任何时候只能有一个在其允许范围内的确切的值；</li>
<li>派生属性。派生属性是冗余的。</li>
</ul>
<h4 id="4-属性的定位"><a href="#4-属性的定位" class="headerlink" title="4.属性的定位"></a>4.属性的定位</h4><p>属性应放置到由它直接描述的那个对象的类中。</p>
<p>在泛化结构中，通用的属性应放在一般类中，专用的属性应放特殊类中。</p>
<p>一个类的属性必须适合这个类和它的全部特殊类的所有对象，并在此前提下充分地运用继承。</p>
<h4 id="5-描述属性"><a href="#5-描述属性" class="headerlink" title="5.描述属性"></a>5.描述属性</h4><p>描述属性包括对属性命名和对属性的详细描述。</p>
<p>属性的命名：名词或带定语的名词。</p>
<p>属性的详细描述包括属性的解释、数据类型和具体限制。</p>
<h3 id="4-2-2-操作的识别"><a href="#4-2-2-操作的识别" class="headerlink" title="4.2.2 操作的识别"></a>4.2.2 操作的识别</h3><h4 id="1-识别操作"><a href="#1-识别操作" class="headerlink" title="1.识别操作"></a>1.识别操作</h4><p>类操作的识别可以依据需求陈述、用例描述和系统的上下文环境来进行。</p>
<p><strong>通过回答以下问题进行识别：</strong></p>
<ul>
<li>有哪些类会与该类交互？</li>
<li>所有与该类具有交互行为的对象会发送哪些消息给该类？该类又会发送哪些消息给这些类？</li>
<li>该类如何响应别的类发送来的消息？在发送前，需要作何准备？</li>
<li>该类应该有哪些操作来维持其信息的更新、一致性和完整性？</li>
<li>系统是否要求该类具有另外的一些职责？</li>
</ul>
<h4 id="2-审查与调整"><a href="#2-审查与调整" class="headerlink" title="2.审查与调整"></a>2.审查与调整</h4><p>审查每个操作是否真正有用；</p>
<p>检查每个操作是不是高内聚的；</p>
<p><font color="red"><strong>高内聚是指一个操作只完成一项明确定义的、完整而单一的功能。</strong></font></p>
<p><strong>需注意一下几种类：</strong></p>
<ul>
<li>只有一个或很少操作的类；</li>
<li>没有操作的类；</li>
<li>太多操作的类。</li>
</ul>
<h4 id="3-操作的定位"><a href="#3-操作的定位" class="headerlink" title="3.操作的定位"></a>3.操作的定位</h4><p>操作放置在哪个对象，应和问题域中拥有这种行为的事物相一致。</p>
<p>在继承中，和属性的定位原则一样，通用的操作放在一般类，专用的操作放在特殊类，一个类中的操作应适合这个类及其所有特殊类的每一个对象实例。</p>
<h4 id="4-描述操作"><a href="#4-描述操作" class="headerlink" title="4.描述操作"></a>4.描述操作</h4><p>描述操作包括对操作命名和对操作的详细描述。</p>
<p>操作的命名应采用动词或动词加名词所构成的动宾结构。</p>
<p>操作名应尽可能准确地反映该操作的职能。</p>
<p>每个对象的操作都应该填写在相应的类符号中。</p>
<hr>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/9.png" class="">

<h2 id="4-3-类之间的关系"><a href="#4-3-类之间的关系" class="headerlink" title="4.3 类之间的关系"></a><span id="3">4.3 类之间的关系</span></h2><p>单个对象可以说是无意义的。对象之间存在着一定的关系，对象之间的交互和合作构成更高级的（系统级）行为。</p>
<p>对象之间的关系可分为<strong>静态关系和动态关系</strong>。</p>
<p><strong>静态关系</strong>指最终可通过对象属性来表示的对象之间在语义上的联系。（与系统责任无关）</p>
<p><strong>动态关系</strong>指对象之间在行为上的联系。</p>
<h3 id="4-3-1-关联关系"><a href="#4-3-1-关联关系" class="headerlink" title="4.3.1 关联关系"></a>4.3.1 关联关系</h3><p><strong>关联</strong>是模型元素间的一种语义联系，它是对具有共同的结构特性、行为特性、关系和语义的链的描述。<strong>链</strong>是关联的实例。</p>
<p><strong>关联</strong>表示的是类与类之间的语义关系，而链表示的是一个类的对象与另一个类的对象之间的语义关系。</p>
<p>一旦在两个对象之间建立了链，一个对象就可以访问另一个<strong>对象</strong>：它可以访问另一个对象的属性，或启动另一个对象的操作。</p>
<p>一个类的实例与另一个类的实例在结构上的静态联系</p>
<p>特征：</p>
<ul>
<li>一个类的属性的数据类型是另一个类的定义</li>
<li>一个类的部分对象与另一个类的部分对象存在属性值上的联系</li>
<li>关联关系一旦建立，系统运行与否它都存在</li>
</ul>
<hr>
<p>在UML规范中，关联用<font color="red">（不）带箭头的实线</font>表示。如果带箭头，箭头指向被依赖的类。</p>
<p><font color="red">一个关联可以有多个关联端，每个关联端连接到一个类。</font></p>
<p>有方向，可以是单向关联或双向关。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/10.png" class="">

<p><font color="blue">一个类的属性的数据类型是另一个类的定义</font></p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/11.png" class="">

<p><font color="blue">一个类的部分对象与另一个类的部分对象存在属性值上的联系</font></p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/13.png" class="">

<p><font color="blue">一个类的部分对象与另一个类的部分对象存在结构上的联系</font></p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/12.png" class="">

<p>两个类之间有关联，一定能在他们的某些对象之间找到连接；同理，一定能够在他们的另外一些对象之间找不到连接。</p>
<p>这是区别类之间的<strong>关联关系和依赖关系</strong>的关键。</p>
<p>考虑<strong>对象之间</strong>的连接时，作为类之间的<strong>关联关系</strong>处理。</p>
<p>考虑<strong>类之间</strong>的连接时，作为类之间的<strong>依赖关系</strong>处理。</p>
<h4 id="（1）关联名"><a href="#（1）关联名" class="headerlink" title="（1）关联名"></a>（1）关联名</h4><p>一般来说，关联名通常是动词或动词短语，用<font color="red">斜体</font>表示。</p>
<p>在一个类图中，并不需要给每个关联都加上关联名，给关联命名的原则是有助于理解该模型。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/14.png" class="">

<h4 id="（2）关联角色"><a href="#（2）关联角色" class="headerlink" title="（2）关联角色"></a>（2）关联角色</h4><p>在UML中，关联两端的类的对象在对方的类里的标识称为<font color="red">角色</font>。关联两端的类可以某种角色参与关联。</p>
<p>当关联关系里的类被映射到程序设计语言时，角色名字就成为类的一个<font color="red">成员变量</font>的名字。此成员变量的类型将是另一个类的对象或指向另一个类的指针。</p>
<p>角色还有<font color="red">多重性</font>，表示可以有多少个对象参与该关联。<font color="red">多重性</font>用一个<font color="red">非负整数的一个子集</font>表示。如果没有表明关联的多重性，意味着是1。</p>
<p>下图：雇主（公司）可以雇佣多个雇员，表示为0..n；雇员只能被一家雇主雇佣，表示为1。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/15.png" class="">

<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/28.png" class="">

<h4 id="（3）关联类"><a href="#（3）关联类" class="headerlink" title="（3）关联类"></a>（3）关联类</h4><p>如果在具有关联关系的类中，存在一个属性放在哪个类中都不合适的情况，就可以考虑使用关联类。</p>
<p>关联有可能具有自己的属性或操作，对此需要引入一个关联类来进行记录。</p>
<p>关联类通过一条<font color="red">虚线</font>与关联连接。</p>
<p><strong>例如：</strong>Contract类是一个关联类，Contract类中有属性salary，该属性不是Company类或Person类的属性。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/16.png" class="">

<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/17.png" class="">

<h4 id="（4）关联约束"><a href="#（4）关联约束" class="headerlink" title="（4）关联约束"></a>（4）关联约束</h4><p><font color="blue">ordered:有序约束</font>。表示多端的对象是一个有序的对象集。</p>
<p><font color="blue">mplicit:概念性约束</font>。表示在模型的详细规划中不再使用。</p>
<p><font color="blue">changeable:可变约束</font>。表示关联对象的连接是可变的，可被任意添加、删除、修改。</p>
<p><font color="blue">addonly:添加约束</font>。表示在任何时候可用源对象添加新的连接。</p>
<p><font color="blue">frozen:冻结约束</font>。表示源对象一经创建和初始化后就被冻结。</p>
<p><font color="blue">xor:异或约束</font>。表示一组互斥的关联。</p>
<p>例如：Account类或者与Person类有关联，或者与Corporation类有关联，但不能同时与Person类和Corporation类都有关联</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/18.png" class="">

<h4 id="（5）限定约束"><a href="#（5）限定约束" class="headerlink" title="（5）限定约束"></a>（5）限定约束</h4><p><strong>限定符的作用：就是在给定关联一端的一个对象和限定符值以后，可确定另一端的一个对象或对象集。</strong></p>
<p><strong>限定符</strong>是<font color="red">关联的属性</font>，而不是类的属性。</p>
<p>限定符可以理解为一种关键字，用关键字把所有对象分开，有利于提高查询效率。一个应用系统需要根据关键字对一个数据集做查询操作，则经常会用到限定关联。</p>
<p>限定关联常用于一对多或多对多的关联关系中，利用限定关联可以把模型中的多重性<font color="red">从一对多变成一对一</font>。</p>
<p>在限定关联中，限定符的表示法是<font color="red">在关联线靠近源类一段绘制一个小方框</font>。</p>
<p><strong>例如：</strong>一个person可以在bank中有多个account，但给定了一个account值后，就可以对应一个person值</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/19.png" class="">

<h4 id="（6）关联的种类"><a href="#（6）关联的种类" class="headerlink" title="（6）关联的种类"></a>（6）关联的种类</h4><p>按照关联所连接的类的数量，类之间的关联可以分为：自然关联、二元关联、N元关联</p>
<h6 id="1）自然关联"><a href="#1）自然关联" class="headerlink" title="1）自然关联"></a>1）自然关联</h6><p>又称为递归关联，是一个类与自身的关联。即同一个类两个对象之间语义上的连接。</p>
<p>自返关联虽然只有一个被关联的类，但有两个关联端，每个关联端的角色不同。</p>
<p><strong>例如：</strong>“人”类的自返关联“结婚”。一个人与另一个人结婚，必然一个扮演丈夫角色，另一个扮演妻子角色。</p>
<h6 id="2）二元关联"><a href="#2）二元关联" class="headerlink" title="2）二元关联"></a>2）二元关联</h6><p>在两个类之间的关联</p>
<h6 id="3）N元关联"><a href="#3）N元关联" class="headerlink" title="3）N元关联"></a>3）N元关联</h6><p>3个或者3个以上类之间的关联。在同一时刻，每个类必须确定一个对象。</p>
<p>在UML的规范说明中，有N元关联这个建模元素，用<font color="red">菱形表示，画在N条关联线的交汇点</font>。</p>
<p>N元关联中多重性的意义是：在其他<strong>N-1</strong>个实例值确定的情况下，关联实例元组的个数。</p>
<p><strong>例如：</strong>一个运动员（player）在某一个年份（year）中在某一个运动队（team）中服役</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/20.png" class="">

<blockquote>
<p>例如：</p>
<p>“考试”端的多重性为“多”，说明每个学生和课程对象可以被链接到零个或多个考试，即允许一个学生多次考一门课程。</p>
<p>“课程”端的多重性0..1 ， 说明任何给定的一对“学生”和“考试”对象将被链接到一个课程对象，即一个考试对象只存在一门课程的分数。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/21.png" class="">
</blockquote>
<h3 id="4-3-2-聚合（聚集）关系"><a href="#4-3-2-聚合（聚集）关系" class="headerlink" title="4.3.2 聚合（聚集）关系"></a>4.3.2 聚合（聚集）关系</h3><p>聚合是一种特殊形式的关联。聚合表示类之间整体与部分的关系。<strong>整体与部分没有相同的生存期。</strong>整体不存在了，部分仍能存在。</p>
<p>在UML中，聚合的图形表示方法是在关联关系的<font color="red">直线末端加一个空心小菱形</font>，空心菱形指向具有整体性质的类。</p>
<p>聚合可以进一步分为<font color="red">共享聚合和组合</font>。部分可以参加多个整体，称为<font color="red">共享聚合</font>。</p>
<p>共享聚合可以通过聚合的<font color="red">多重性</font>反映出来，如果作为整体方的类的重数不是<font color="red">1</font>，则该聚合就是共享聚合。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/22.png" class="">

<h3 id="4-3-3-组成关系"><a href="#4-3-3-组成关系" class="headerlink" title="4.3.3 组成关系"></a>4.3.3 组成关系</h3><p>整体拥有各个组成部分，部分与整体共存。<strong>整体与部分有相同的生存期。</strong>整体不存在了，部分也不能存在。这种聚合称为组成或复合聚合。</p>
<p><strong>组成</strong>是指整体和部分之间具有很强的属于关系，而且他们的生存期是一致的。</p>
<p>组成是一种特殊形式的聚合关联。组成表示类之间整体与部分的关系。</p>
<p>在UML中，组成的图形表示为<font color="red">实心菱形</font>，指向具有整体性质的类。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/23.png" class="">

<h3 id="4-3-4-依赖关系"><a href="#4-3-4-依赖关系" class="headerlink" title="4.3.4 依赖关系"></a>4.3.4 依赖关系</h3><p>定义了两个模型元素之间的语义连接。<strong>独立模型元素的变化会影响依赖元素。</strong>一个类的结构上的变化会影响到另一个类（代码级）。</p>
<p><strong>特征：</strong></p>
<ul>
<li>一个类的方法的参数的数据类型是另一个类的定义</li>
<li>一个类的方法使用了另一个类的属性</li>
<li>一个类的方法调用了另一个类的方法</li>
<li>一个类的方法实例化了另一个类的对象</li>
<li>一个类的每一个对象与另一个类的所有（或部分）对象存在操作运行上的联系</li>
<li>依赖关系只有在系统运行时它存在，系统不运行时它不存在</li>
</ul>
<p>在UML中，依赖用带箭头的虚线表示，箭头指向被依赖的类（独立的模型元素）。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/24.png" class="">

<hr>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/25.png" class="">

<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/26.png" class="">

<h3 id="4-3-5-泛化关系"><a href="#4-3-5-泛化关系" class="headerlink" title="4.3.5 泛化关系"></a>4.3.5 泛化关系</h3><p>一般类与特殊类之间的继承（代码级）,分为单继承和多继承。</p>
<p><strong>特殊类还可以定义自己的属性和方法。</strong></p>
<p><strong>特征：</strong></p>
<ul>
<li>一般类定义了共同的属性和方法</li>
<li>特殊类继承了一般类的属性和方法</li>
<li>特殊类还可以定义自己的属性和方法</li>
<li>泛化关系只有在系统运行时它存在，系统不运行时它不存在，<font color="red">除非要将两类对象永久保存</font></li>
</ul>
<p>UML中用一头为空心三角形的连接表示，<font color="red">空心三角形指向父类</font>。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/27.png" class="">

<h3 id="4-3-6-关联关系与依赖关系的对比"><a href="#4-3-6-关联关系与依赖关系的对比" class="headerlink" title="4.3.6 关联关系与依赖关系的对比"></a>4.3.6 关联关系与依赖关系的对比</h3><table>
<thead>
<tr>
<th>关联关系</th>
<th>依赖关系</th>
</tr>
</thead>
<tbody><tr>
<td>静态的</td>
<td>动态的</td>
</tr>
<tr>
<td>数据（指属性值）级别上的</td>
<td>代码级别上的</td>
</tr>
<tr>
<td>部分的</td>
<td>全体的</td>
</tr>
<tr>
<td>有多重性</td>
<td>无多重性</td>
</tr>
<tr>
<td>实体类之间存在关联关系</td>
<td>{边界类|控制类}和{边界类|控制类|实体类}之间存在依赖关系</td>
</tr>
</tbody></table>
<h2 id="4-4-类之间关系的识别"><a href="#4-4-类之间关系的识别" class="headerlink" title="4.4 类之间关系的识别"></a><span id="4">4.4 类之间关系的识别</span></h2><h3 id="4-4-1-识别关联关系"><a href="#4-4-1-识别关联关系" class="headerlink" title="4.4.1 识别关联关系"></a>4.4.1 识别关联关系</h3><h4 id="1-识别关联"><a href="#1-识别关联" class="headerlink" title="1. 识别关联"></a>1. 识别关联</h4><p>策略：</p>
<ol>
<li>认识各类对象之间的静态联系</li>
<li>识别关联属性和操作</li>
<li>分析关联多重性</li>
</ol>
<h4 id="2-调整对象层"><a href="#2-调整对象层" class="headerlink" title="2. 调整对象层"></a>2. 调整对象层</h4><p>在建立关联关系的过程中，可增加一些<font color="red">新的类</font>，要把这些新增的类补充到类图的对象层中，并建立他们的类描述模板。</p>
<p>对于每一个关联，要在描述模板中给出其有关性质的<font color="red">详细说明</font>，至少说明它所代表的实际意义</p>
<h3 id="4-4-2-识别聚合关系"><a href="#4-4-2-识别聚合关系" class="headerlink" title="4.4.2 识别聚合关系"></a>4.4.2 识别聚合关系</h3><h4 id="1-识别聚合"><a href="#1-识别聚合" class="headerlink" title="1. 识别聚合"></a>1. 识别聚合</h4><p>策略：</p>
<ol>
<li>物理上为整体的事物和它的部分；</li>
<li>组织机构或它的下级组织部门；</li>
<li>团体（组织）与成员；</li>
<li>空间上的包容关系；</li>
<li>抽象事物的整体与部分：如学科与学科分支，法律与法律条文</li>
<li>具体事物和它的某个抽象方面；</li>
<li>材料上的组成关系。</li>
</ol>
<h4 id="2-审查与筛选"><a href="#2-审查与筛选" class="headerlink" title="2. 审查与筛选"></a>2. 审查与筛选</h4><p>策略：</p>
<ol>
<li>是否属于问题域？是否符合系统责任的需要？对于不属于问题域的聚合关系应该去掉。</li>
<li>部分对象是否有一个以上的属性？如果部分对象只有一个属性，应该考虑把它取消，并合并到整体对象中去，变成整体对象的一个属性。</li>
<li>是否有明显的聚合关系？如果两个对象之间不能明显的分出谁是部分，谁是整体，则不应该用聚合关系表示。</li>
</ol>
<h4 id="3-调整对象层和属性层"><a href="#3-调整对象层和属性层" class="headerlink" title="3. 调整对象层和属性层"></a>3. 调整对象层和属性层</h4><p>定义聚合关系的活动可能会发现一些新的对象与类，或者从整体类定义中分割出一些部分类的定义，应把它们加入到对象层中，并给出他们的详细说明。</p>
<p>对于后者，可能有一些整体类的属性与操作被划分出去作为部分类。</p>
<h3 id="4-4-3-识别泛化关系"><a href="#4-4-3-识别泛化关系" class="headerlink" title="4.4.3 识别泛化关系"></a>4.4.3 识别泛化关系</h3><h4 id="1-识别泛化"><a href="#1-识别泛化" class="headerlink" title="1. 识别泛化"></a>1. 识别泛化</h4><p>策略：</p>
<ol>
<li>理解问题域的分类学知识；</li>
<li>依据常识考虑事物的分类；</li>
<li>考虑类之间的语义关系；</li>
<li>考察类的属性和操作。<ol>
<li>从一个类中划分出一些特殊类；</li>
<li>检查是否有两个（或更多）类含有一些共同的属性和操作。</li>
</ol>
</li>
<li>考虑领域范围内的重用</li>
</ol>
<h4 id="2-审查与筛选-1"><a href="#2-审查与筛选-1" class="headerlink" title="2. 审查与筛选"></a>2. 审查与筛选</h4><p>策略：</p>
<ol>
<li>问题域、系统责任是否需要这样的分类？</li>
<li>特殊类没有自己特殊的属性或操作；</li>
<li>某些特殊类之间的差别可以由一般类的某个或某些属性值来体现，而且除此之外，没有更多的不同。</li>
<li>如果一个一般类下只有唯一的特殊类，并且这个特殊类不用于创建对象，也不打算进行复制。可以取消此一般类，并把它的属性和操作放到特殊类中。</li>
<li>通常，系统中的一般类应符合下述条件之一才有存在的价值。<ol>
<li>它有两个或两个以上的特殊类；</li>
<li>需要用它创建对象实例；</li>
<li>它的存在有助于软件重用；</li>
</ol>
</li>
</ol>
<h3 id="4-4-4-识别依赖关系"><a href="#4-4-4-识别依赖关系" class="headerlink" title="4.4.4 识别依赖关系"></a>4.4.4 识别依赖关系</h3><h4 id="1-识别依赖"><a href="#1-识别依赖" class="headerlink" title="1. 识别依赖"></a>1. 识别依赖</h4><p>策略：</p>
<ol>
<li><font color="red">优先考虑关联关系和泛化关系</font>；当类之间不宜于用这两种关系描述时，再考虑用依赖关系。</li>
<li><font color="red">考察类的改变</font>；一个独立类的改变将影响另一个不独立的类，则建立它们之间的依赖关系。</li>
<li><font color="red">考察多重性</font>；类之间有关联关系，就有了依赖关系。关联关系中会出现多重性；但在依赖关系中一定不会出现多重性。</li>
</ol>
<h4 id="2-依赖的变体"><a href="#2-依赖的变体" class="headerlink" title="2.依赖的变体"></a>2.依赖的变体</h4><p>UML中，对依赖关系设置了<strong>12</strong>种变体，以描述软件对象之间的各种相互依赖的情形。</p>
<p>根据连接对象不同：</p>
<ol>
<li>Usage（使用依赖）</li>
<li>Abstraction（抽象依赖）</li>
<li>Permission（授权依赖）</li>
<li>Binding（绑定依赖）</li>
</ol>
<h5 id="1-Usage（使用依赖）："><a href="#1-Usage（使用依赖）：" class="headerlink" title="1 Usage（使用依赖）："></a>1 Usage（使用依赖）：</h5><p><font color='red'>&lt;&lt;use&gt;&gt;依赖、&lt;&lt;call&gt;&gt;依赖、&lt;&lt;parameter&gt;&gt;依赖、&lt;&lt;send&gt;&gt;依赖、&lt;&lt;instantiate&gt;&gt;依赖</font></p>
<p>使用依赖表示客户使用提供者的服务，以实现它的行为。</p>
<p>服务形式有3种：</p>
<ol>
<li>客户类的操作者需要提供者的参数；</li>
<li>客户类的操作返回提供者类的值；</li>
<li>客户类的操作在实现中使用提供者类的对象；</li>
</ol>
<h5 id="2-Abstraction（抽象依赖）"><a href="#2-Abstraction（抽象依赖）" class="headerlink" title="2 Abstraction（抽象依赖）:"></a>2 Abstraction（抽象依赖）:</h5><p><font color='red'>&lt;&lt;trace&gt;&gt;依赖、&lt;&lt;refine&gt;&gt;依赖、&lt;&lt;derive&gt;&gt;依赖</font></p>
<p>抽象依赖表示客户和提供者之间的关系，依赖于在不同抽象层次上的事物。</p>
<h5 id="3-Permission（授权依赖）"><a href="#3-Permission（授权依赖）" class="headerlink" title="3 Permission（授权依赖）:"></a>3 Permission（授权依赖）:</h5><p><font color='red'>&lt;&lt;access&gt;&gt;依赖、&lt;&lt;import&gt;&gt;依赖、&lt;&lt;friend&gt;&gt;依赖</font></p>
<p>授权依赖表示一个事物访问另一个事物的能力，提供者通过规定客户的权限，可以控制和限制客户对其内访问的方法。</p>
<h5 id="4-Binding（绑定依赖）"><a href="#4-Binding（绑定依赖）" class="headerlink" title="4 Binding（绑定依赖）:"></a>4 Binding（绑定依赖）:</h5><p><font color='red'>&lt;&lt;bind&gt;&gt;依赖</font></p>
<p>绑定依赖是较高级的依赖类型，它用于绑定模板，以创建新的模型元素。</p>
<h2 id="4-5-派生属性和派生关联"><a href="#4-5-派生属性和派生关联" class="headerlink" title="4.5 派生属性和派生关联"></a><span id="5">4.5 派生属性和派生关联</span></h2><p>派生属性和派生关联是指可以从其他属性和关联计算推演得到的属性和关联。</p>
<p>在类图中，派生属性和派生关联的名字前需要加一个斜杠<font color="red">“/”</font>。</p>
<p>生成代码时，派生属性和派生关联不产生相应代码。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/29.png" class="">

<h2 id="4-6-抽象类和接口"><a href="#4-6-抽象类和接口" class="headerlink" title="4.6 抽象类和接口"></a><span id="6">4.6 抽象类和接口</span></h2><h3 id="4-6-1-抽象类"><a href="#4-6-1-抽象类" class="headerlink" title="4.6.1 抽象类"></a>4.6.1 抽象类</h3><p>抽象类（abstract class）是不能直接产生实例的类。</p>
<p>抽象类一般作为超类（或基类、父类）存在，用于描述其他类的公共属性和操作。</p>
<p>抽象类中一般都带有抽象操作。</p>
<p>抽象操作用于描述该抽象类的子类应有什么样的行为。</p>
<p>抽象操作只标记出返回值、操作名称和参数表；</p>
<p>抽象操作的具体实现细节由继承抽象类的子类实现。</p>
<p>UML通过把类名写成<font color="red">斜体字</font>来表示抽象类。</p>
<h3 id="4-6-2-接口"><a href="#4-6-2-接口" class="headerlink" title="4.6.2 接口"></a>4.6.2 接口</h3><p>接口（interface）定义为一个类的对外可见的一组操作的规范，它定义了类对外提供的服务。</p>
<p>对接口操作的描述包括操作的语法和操作的语义。</p>
<p>对于简单接口，只需罗列出接口包括的操作及其名称就可以使得接口的应用开发人员了解接口的用法；对于复杂的接口，必须详细表述正常使用接口必须具备的各种条件。</p>
<p>通过接口，软件系统中的类的集合构成了一个相对封闭的子系统或组件，其服务以接口的形式规定。</p>
<p>接口是类的变体，接口的操作的描述遵循类的操作的描述规则。</p>
<h4 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h4><p><strong>实现关系</strong>将一种模型元素与另一种模型元素连接起来，其中接口只是行为的说明而不是接口或实现。</p>
<p>实现关系是两个分类符之间的语义关系，表明其中的一个分类符为另一个分类符规定了应执行的动态行为。实现关系可以连接的分类符包括<font color="red">接口和类、接口和组件、用例和协作</font>。接口规定了类或组件的动态行为，用例规定了协作的动态行为。</p>
<p>一个类提供了另一个类对外公布的操作规范的实现代码。接口是一个特殊的类（无属性，有操作），实现接口操作的类（称为<font color="red">实现类</font>）与接口之间存在实现关系。调用接口操作的类（称为<font color="red">使用类</font>）与接口之间存在依赖关系。</p>
<p>UML规范中，实现用<font color="red">带空心三角形箭头的虚线</font>表示，箭头指向接口，另一端的类实现了接口。</p>
<p><strong>例如：</strong>“定价”是接口，“目录项”是实现类，“零件”是使用类。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/30.png" class="">

<h3 id="4-6-3-抽象类和接口的差别"><a href="#4-6-3-抽象类和接口的差别" class="headerlink" title="4.6.3 抽象类和接口的差别"></a>4.6.3 抽象类和接口的差别</h3><p><strong>共同点：</strong></p>
<ul>
<li>两者都有方法没有提供实现代码</li>
<li>提供实现代码的其他类，实现的算法不同，会导致两者具有不同的行为。因此，很容易扩展软件系统的功能。</li>
</ul>
<p><strong>不同点：</strong></p>
<ul>
<li>抽象类有些方法可以提供实现代码，接口所有的方法都没有提供实现代码</li>
<li>接口不能含有属性，而抽象类可以含有属性</li>
<li>抽象类只能被继承，接口只能被实现</li>
</ul>
<h2 id="4-7-类的版型"><a href="#4-7-类的版型" class="headerlink" title="4.7 类的版型"></a><span id="7">4.7 类的版型</span></h2><p>UML中有3种主要的类版型，即<font color="red">实体类（entity class）、边界类（boundary class）、控制类（control class）</font></p>
<p>引入边界类、控制类和实体类的概念，有助于分析人员和设计人员确定系统中的类</p>
<h3 id="4-7-1-实心类"><a href="#4-7-1-实心类" class="headerlink" title="4.7.1 实心类"></a>4.7.1 实心类</h3><p><strong>实体类</strong>用于保存需要放进持久存储体的信息，是问题域中的核心类。</p>
<p>所谓持久存储体就是数据库、文件等可以永久存储数据的介质。</p>
<p><strong>实体类的对象是永久性的，它的生存时间长于会话生命周期。</strong></p>
<p>实体类的识别一般在<font color="red">需求分析阶段</font>。</p>
<p>可以通过事件流和交互图发现，实体类通常用领域术语命名。每个实体类在数据库中有相应的表，实体类中的属性对应数据库中表的字段。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/31.png" class="">

<h3 id="4-7-2-边界类"><a href="#4-7-2-边界类" class="headerlink" title="4.7.2 边界类"></a>4.7.2 边界类</h3><p><strong>边界类</strong>位于系统与外界的交界处，它是系统内的对象和系统外的参与者的联系媒介。外界的消息只有通过边界类的对象实例才能发送给系统。</p>
<p>边界类一般在<font color="red">系统设计阶段</font>进行</p>
<p><strong>例如：</strong>窗体（form）、对话框（dialog box）、报表（report）、表示通讯协议（TCP/IP）的类、直接与外部设备（如打印机、扫描仪）交互的类、直接与外部系统交互的类</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/32.png" class="">

<h3 id="4-7-3-控制类"><a href="#4-7-3-控制类" class="headerlink" title="4.7.3 控制类"></a>4.7.3 控制类</h3><p><strong>控制类</strong>是负责其他类工作的类。根据业务规则，执行相应脚本流，以委托责任的形式向其他类发出消息，由其他类来实现具体的功能。</p>
<p>控制类的一个主要用途是协调边界类和实体类之间的交互。</p>
<p>控制类一般在<font color="red">系统设计阶段</font>。</p>
<p>每个用例通常有一个控制类，控制用例中的事件顺序，也可以在多个用例间共用。其他类并不向控制类发送很多消息，而是由控制类发出很多消息。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/33.png" class="">

<h3 id="4-7-4-用户自定义版型"><a href="#4-7-4-用户自定义版型" class="headerlink" title="4.7.4 用户自定义版型"></a>4.7.4 用户自定义版型</h3><img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/34.png" class="">

<h2 id="4-8-类图"><a href="#4-8-类图" class="headerlink" title="4.8 类图"></a><span id="8">4.8 类图</span></h2><p>类加上它们之间的关系就构成了类图，可以包含接口、包、关系等建模元素，也可以包含对象、链等实例。</p>
<p>类图是UML中的核心。</p>
<p>类图描述的是类和类之间的静态关系。</p>
<p>与数据模型不同，类图不仅显示了信息的结构，同时还描述了系统的行为。</p>
<h3 id="4-8-1-类图的抽象层次"><a href="#4-8-1-类图的抽象层次" class="headerlink" title="4.8.1 类图的抽象层次"></a>4.8.1 类图的抽象层次</h3><p>一般可将类图分为3个层次：概念层、说明层、实现层。</p>
<p><font color="red">概念层类图</font>描述应用领域中的概念。一般这些概念和类有很自然的联系，但两者没有直接的映射关系。绘制概念层类图时，很少考虑或不考虑实现问题。</p>
<p><font color="red">说明层类图</font>描述软件的接口部分，而不是软件的实现部分。这个接口可能因为实现环境、运行特性或开发商的不同而有多种不同的实现。</p>
<p><font color="red">实现层类图</font>才真正考虑类的实现问题，提供类的实现细节。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/35.png" class="">

<h3 id="4-8-2-构造类图"><a href="#4-8-2-构造类图" class="headerlink" title="4.8.2 构造类图"></a>4.8.2 构造类图</h3><p><strong>建立类图的步骤：</strong></p>
<ol>
<li>研究分析问题领域，确定系统的需求。</li>
<li>确定类，明确类的含义和职责，确定属性和操作。</li>
<li>确定类之间的关系。把类之间的关系用关联、泛化、聚合、组成、依赖等关系表达出来。</li>
<li>调整和细化已得到的类和类之间的关系，解决诸如命名冲突、功能重复等问题。</li>
<li>绘制类图并增加相应的说明。</li>
</ol>
<h2 id="4-9-对象图"><a href="#4-9-对象图" class="headerlink" title="4.9 对象图"></a><span id="9">4.9 对象图</span></h2><p>对象图（object diagram）描述的是参与交互的各个对象在交互过程中某一时刻的状态。它是系统在某一个特定时间点上的静态结构，是类图的实例和快照，即类图中的各个类在某一个时间点上的实例及其关联关系的静态写照。</p>
<p>对象图（object diagram）的<strong>作用</strong>：表示快照的行为。通过一系列的快照，可以有效表达事物的行为。说明复杂的数据结构。</p>
<p>对象图所建立的对象模型描述的是<strong>某种特定的情况</strong>，而类图所建立的模型描述的是<strong>通用的情况</strong>。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/36.png" class="">

<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/37.png" class="">

<h3 id="4-9-1-对象的表示"><a href="#4-9-1-对象的表示" class="headerlink" title="4.9.1 对象的表示"></a>4.9.1 对象的表示</h3><p>对象是类的实例，创建一个对象时通常可以从两种情况来观察：第一种情况是将对象作为一个实体，它在某个时刻有明确的值。另一种情况是作为一个身份持有者，不同时刻有不同的值。</p>
<p>一个对象在系统的某一个时刻应当有其自身的状态。通常<font color="red">这个状态使用属性的赋值或分布式系统中的位置来描述</font>。对象通过链和其他对象相联系。</p>
<p><strong>命名语法：</strong><font color="blue">对象名：类型</font></p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/38.png" class="">

<h3 id="4-9-2-链的表示"><a href="#4-9-2-链的表示" class="headerlink" title="4.9.2 链的表示"></a>4.9.2 链的表示</h3><p>链是两个或多个对象之间的独立连接，是关联的实例。通过链可以将多个对象连接起来，形成一个有序列表，称为<font color="red">元组</font>。</p>
<p>在UML中，链的图标是符号是<font color="red">一个或多个相连的实线或实线圆弧</font>。</p>
<img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/39.png" class="">

<h3 id="4-9-2-类图与对象图区别"><a href="#4-9-2-类图与对象图区别" class="headerlink" title="4.9.2 类图与对象图区别"></a>4.9.2 类图与对象图区别</h3><table>
<thead>
<tr>
<th><strong>类图</strong></th>
<th><strong>对象图</strong></th>
</tr>
</thead>
<tbody><tr>
<td>在类图中，每个类包含三部分：类名、类的属性和类的操作</td>
<td>在对象图中，每个对象包含二部分：对象名、对象属性</td>
</tr>
<tr>
<td>类的名称栏只包含类名</td>
<td>对象的名称栏包含对象名和类名</td>
</tr>
<tr>
<td>类的属性栏定义了所有属性的特征</td>
<td>对象的属性栏定义了属性的当前值</td>
</tr>
<tr>
<td>类中列出了操作</td>
<td>对象图中的对象不包含操作，因为对于属于同一个类的对象，其操作是相同的</td>
</tr>
<tr>
<td>类中使用了关联连接，关联中使用关联名、角色以及约束等特征定义</td>
<td>对象使用链进行连接，链中包含名称、角色</td>
</tr>
<tr>
<td>类是对象的抽象</td>
<td>对象是客观存在的抽象，对象是类的实例</td>
</tr>
</tbody></table>
<h2 id="4-10-类图例子"><a href="#4-10-类图例子" class="headerlink" title="4.10 类图例子"></a><span id="10">4.10 类图例子</span></h2><img src="/2020/03/30/UML%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%9B%BE%E3%80%81%E5%AF%B9%E8%B1%A1%E5%9B%BE%EF%BC%89/40.png" class="">]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>UML（第三章：参与者、用例）</title>
    <url>/2020/03/26/UML%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%8F%82%E4%B8%8E%E8%80%85%E3%80%81%E7%94%A8%E4%BE%8B%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/03/26/UML（第三章：参与者、用例）/#1"><strong>3.1</strong>  <strong>参与者</strong> </a></p>
<p><a href="/2020/03/26/UML（第三章：参与者、用例）/#2"><strong>3.2</strong>  <strong>用例</strong></a></p>
<p><a href="/2020/03/26/UML（第三章：参与者、用例）/#3"><strong>3.3</strong>  <strong>用例描述</strong></a></p>
<p><a href="/2020/03/26/UML（第三章：参与者、用例）/#4"><strong>3.4</strong>  <strong>用例建模</strong></a></p>
</blockquote>
<h2 id="3-1-参与者-actor"><a href="#3-1-参与者-actor" class="headerlink" title="3.1 参与者 actor"></a><span id="1">3.1 参与者 actor</span></h2><h3 id="3-1-1-参与者的概念"><a href="#3-1-1-参与者的概念" class="headerlink" title="3.1.1 参与者的概念"></a>3.1.1 参与者的概念</h3><p><strong>参与者</strong> actor，指系统以外的、需要使用系统或与系统交互的外部实体</p>
<p>可以分为：人、外部设备、外部系统</p>
<p><strong>注意：参与者是一个集合概念。一个具体的外部实体仅代表同一类参与者的一个实例</strong></p>
<blockquote>
<p>*<em>例 *</em>:在一个银行业务系统中，可能会有以下参与者</p>
<p><strong>客户：</strong>在银行业务系统中办理了账户的居民。他们通过银行业务系统进行金融交易</p>
<p><strong>管理人员：</strong>负责银行业务系统具体操作事务的办事人员。他们为客户办理存款、取款等金融交易</p>
<p><strong>Mail系统：</strong>负责银行业务系统向个人发送电子邮件的软件系统</p>
</blockquote>
<a id="more"></a>

<h3 id="3-1-2-参与者之间的关系"><a href="#3-1-2-参与者之间的关系" class="headerlink" title="3.1.2 参与者之间的关系"></a>3.1.2 参与者之间的关系</h3><p><font color="red"><strong>泛化关系</strong></font>：一般参与者与特殊参与者之间的关系</p>
<p>把某些参与者的共同行为提取出来表示成通用行为，并描述成超类。</p>
<p>参与者之间的：<strong>泛化关系</strong>，用带空心三角形箭头的实线表示，箭头指向父参与者。</p>
<img src="/2020/03/26/UML%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%8F%82%E4%B8%8E%E8%80%85%E3%80%81%E7%94%A8%E4%BE%8B%EF%BC%89/1.png" class="">

<h3 id="3-1-3-泛化关系的作用"><a href="#3-1-3-泛化关系的作用" class="headerlink" title="3.1.3 泛化关系的作用"></a>3.1.3 泛化关系的作用</h3><p><strong>作用</strong>：有效地减少了参与者与用例之间的关联关系的个数，简化了用例模型</p>
<img src="/2020/03/26/UML%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%8F%82%E4%B8%8E%E8%80%85%E3%80%81%E7%94%A8%E4%BE%8B%EF%BC%89/4.png" class="">

<img src="/2020/03/26/UML%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%8F%82%E4%B8%8E%E8%80%85%E3%80%81%E7%94%A8%E4%BE%8B%EF%BC%89/5.png" class="">

<h3 id="3-1-4-参与者与用例之间的关系"><a href="#3-1-4-参与者与用例之间的关系" class="headerlink" title="3.1.4 参与者与用例之间的关系"></a>3.1.4 参与者与用例之间的关系</h3><p><font color="red"><strong>关联关系</strong></font>：又称为通信关联，表明哪个参与者与用例通信。</p>
<p><strong>关联关系</strong>：一个参与者完成系统的一项功能</p>
<p><strong>关联关系</strong>用带箭头或不带箭头的实线表示，箭头表示在这一关系中哪一方是对话的主动发起者，箭头所指方式对话的被动接受者。</p>
<img src="/2020/03/26/UML%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%8F%82%E4%B8%8E%E8%80%85%E3%80%81%E7%94%A8%E4%BE%8B%EF%BC%89/2.png" class="">

<p><strong>例 ：</strong><img src="/2020/03/26/UML%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%8F%82%E4%B8%8E%E8%80%85%E3%80%81%E7%94%A8%E4%BE%8B%EF%BC%89/3.png" class=""></p>
<h2 id="3-2-用例-use-case"><a href="#3-2-用例-use-case" class="headerlink" title="3.2 用例 use case"></a><span id="2">3.2 用例 use case</span></h2><h3 id="3-2-1-用例的概念"><a href="#3-2-1-用例的概念" class="headerlink" title="3.2.1 用例的概念"></a>3.2.1 用例的概念</h3><p>是对一个参与者使用系统的一项功能时所进行的交互过程的一个文字描述序列</p>
<p>是参与者可以感受到的系统服务或功能单元</p>
<p>是系统、子系统或类和外部的参与者交互的动作序列的说明，包括可选的动作序列和会出现异常的动作序列。</p>
<p>是代表系统中各个项目相关人员之间就系统的行为所达成的契约。</p>
<p><strong>定义</strong>了系统如何被参与者使用，描述了参与者为了使用系统所提供的某一完整功能而与系统之间发生的一段对话。</p>
<p><font color="red"><strong>用例</strong></font>使用椭圆图标来表示。<font color="red"><strong>用例名</strong></font>往往用动宾结构或主谓结构命名。</p>
<img src="/2020/03/26/UML%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%8F%82%E4%B8%8E%E8%80%85%E3%80%81%E7%94%A8%E4%BE%8B%EF%BC%89/6.png" class="">

<h3 id="3-2-2-用例的特征"><a href="#3-2-2-用例的特征" class="headerlink" title="3.2.2 用例的特征"></a>3.2.2 用例的特征</h3><p>用例从系统的角度描述系统中的信息，即站在系统外部，看到的系统功能</p>
<p>总是被参与者启动</p>
<p>描述一个功能的交互场景</p>
<p>用例分析本质上是一种<strong>功能分解技术</strong></p>
<p>交互过程的描述中，可以发现<strong>类</strong>（类的特征，类的行为</p>
<h3 id="3-2-3-用例之间的关系"><a href="#3-2-3-用例之间的关系" class="headerlink" title="3.2.3 用例之间的关系"></a>3.2.3 用例之间的关系</h3><p><strong>用例之间的关系：</strong><font color="red">泛化关系，包含关系，扩展关系</font></p>
<p><strong>包含关系</strong>和<strong>扩展关系是</strong>两种特殊的<font color="red"><strong>依赖关系</strong></font></p>
<h4 id="1-泛化关系"><a href="#1-泛化关系" class="headerlink" title="1. 泛化关系"></a>1. 泛化关系</h4><p><strong>泛化关系</strong>：特殊用例继承、覆盖、增加一般用例的行为</p>
<p><strong>父用例</strong>表示通用的行为序列。</p>
<p><strong>子用例</strong>继承父用例的行为和含义，也可以增加新的行为和含义或覆盖父用例中的行为和含义。</p>
<p>通过插入额外的步骤或定义步骤，<strong>子用例特例化父用例</strong></p>
<p><strong>泛化关系</strong>：用带<font color="red">空心三角形箭头</font>的实线表示，箭头指向父用例。</p>
<p><strong>当发现系统中有多个用例在行为、结构和目的方面存在共性时，可以使用泛化关系。用一个新用例描述公有部分。这个新用例就是父用例。</strong></p>
<img src="/2020/03/26/UML%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%8F%82%E4%B8%8E%E8%80%85%E3%80%81%E7%94%A8%E4%BE%8B%EF%BC%89/7.png" class="">

<img src="/2020/03/26/UML%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%8F%82%E4%B8%8E%E8%80%85%E3%80%81%E7%94%A8%E4%BE%8B%EF%BC%89/8.png" class="">

<h4 id="2-包含关系"><a href="#2-包含关系" class="headerlink" title="2.包含关系"></a>2.包含关系</h4><p>包含关系：两个用例之间，其中一个用例（<strong>基本用例</strong>）的行为包含了另一个用例（<strong>包含用例</strong>）的行为。是依赖关系的版型，比一般的依赖关系多了一些语义。</p>
<p><strong>包含关系</strong>：当系统中在两个或多个用例中有某些相同的动作，则可以把这些相同的动作提取出来，单独构成一个用例。</p>
<p>基本用例的行为<font color="red">必然执行</font>包含用例的行为</p>
<p><strong>包含关系</strong>用<font color="red">带箭头的虚线</font>表示，箭头指向包含用例。同时，必须用<font color="red">&lt;&lt;include&gt;&gt;</font>标记附加在虚线旁，作为特殊依赖关系的语义。</p>
<img src="/2020/03/26/UML%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%8F%82%E4%B8%8E%E8%80%85%E3%80%81%E7%94%A8%E4%BE%8B%EF%BC%89/9.png" class="">

<img src="/2020/03/26/UML%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%8F%82%E4%B8%8E%E8%80%85%E3%80%81%E7%94%A8%E4%BE%8B%EF%BC%89/10.png" class="">

<h4 id="3-扩展关系"><a href="#3-扩展关系" class="headerlink" title="3.扩展关系"></a>3.扩展关系</h4><p><strong>扩展关系</strong>：<strong>基本用例</strong>的行为条件执行<strong>扩展用例</strong>的行为，一个用例（<strong>基本用例</strong>）的行为包含了另一个用例（<strong>扩展用例</strong>）的行为。扩展关系也是特殊的依赖关系。</p>
<p>在<strong>扩展关系</strong>中，用更多的规则限制：基本用例必须声明若干<strong>“扩展点”</strong>，而扩展用例只能在扩展点上增加新的行为和含义。</p>
<img src="/2020/03/26/UML%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%8F%82%E4%B8%8E%E8%80%85%E3%80%81%E7%94%A8%E4%BE%8B%EF%BC%89/11.png" class="">

<blockquote>
<p><strong>扩展点</strong>：指用例中的一个或一组位置。可以插入其他用例的完整动作序列或其中的片段</p>
<p>多数情况下，扩展关系有一个<strong>附加条件*</strong>。只有当控制到达插入位置时且条件为真，才会发生扩展行为。</p>
<p>一个用例中，各扩展点的名字是<strong>唯一</strong>的。可以把扩展点列在用例图形符号中的一个题头为“扩展点”的分栏中，并以一种适当的方式给出扩展点的位置描述，作为基本用例中的标号。</p>
<img src="/2020/03/26/UML%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%8F%82%E4%B8%8E%E8%80%85%E3%80%81%E7%94%A8%E4%BE%8B%EF%BC%89/12.png" class="">
</blockquote>
<h3 id="3-2-4-包含关系与扩展关系的-对比"><a href="#3-2-4-包含关系与扩展关系的-对比" class="headerlink" title="3.2.4 包含关系与扩展关系的 对比"></a>3.2.4 包含关系与扩展关系的 对比</h3><p><strong>共同点</strong>：<strong>包含用例</strong>和<strong>扩展用例</strong>都补充了<strong>基本用例</strong>的行为</p>
<p><strong>不同点</strong>：包含用例<font color="red">必然被执行</font>，扩展用例<font color="red">条件被执行</font></p>
<p><strong>性质</strong>：因为基本用例的行为被包含用例或扩展用例的行为延伸了，所以基本用例的行为依赖于包含用例或扩展用例的行为。所以，包含关系和扩展关系都是<font color="red">依赖关系</font>的特例</p>
<img src="/2020/03/26/UML%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%8F%82%E4%B8%8E%E8%80%85%E3%80%81%E7%94%A8%E4%BE%8B%EF%BC%89/13.png" class="">

<hr>
<p>需要重复处理两个或多个用例时，可以考虑使用<strong>包含关系</strong>，实现一个基本用例对另一个用例的引用。</p>
<p>当处理正常行为的变形且只是偶尔描述时，可以考虑只用<strong>泛化关系</strong>。</p>
<p>当处理正常行为的变形且希望采用更多的<strong>控制方式</strong>时，可以在基本用例中<strong>设置扩展点</strong>，使用<strong>扩展关系</strong>。</p>
<h2 id="3-3-用例描述"><a href="#3-3-用例描述" class="headerlink" title="3.3 用例描述"></a><span id="3">3.3 用例描述</span></h2><p>在用例图中用一个<strong>命名的椭圆</strong>表示</p>
<p>仅用图形符号表示的用例本身并不能提供该用例所具备的全部信息，必须通过文本的方式描述该用例的完整功能。</p>
<p><strong>用例的描述</strong>才是用例的主要部分。</p>
<p><strong>用例描述：</strong>是一个关于参与者与系统如何交互的规范说明，该规范说明要清晰明了，没有歧义性。</p>
<img src="/2020/03/26/UML%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%8F%82%E4%B8%8E%E8%80%85%E3%80%81%E7%94%A8%E4%BE%8B%EF%BC%89/14.png" class="">

<blockquote>
<p><font color="blue">例:</font>在银行ATM系统的ATM机上“登录”用例</p>
<p><font color="red">用例名称：</font>登录</p>
<p><font color="red">用例描述：</font>在储户银行卡有效且储户输入密码正确的情况下，为储户提供后续的服务。</p>
<p><font color="red">参与者：</font>储户</p>
<p><font color="red">前置条件：</font>ATM机正常工作</p>
<p><font color="red">后置调剂：</font>正常进入界面</p>
<p><font color="red">主事件流如下：</font></p>
<p>（1）储户将银行卡插入ATM机，开始用例。</p>
<p>（2）ATM机提示储户输入密码。</p>
<p>（3）储户输入密码。</p>
<p>（4）ATM机确认密码是否有效。如果无效，则执行子事件流a。如果与主机连接有问题，则执行异常事件流e。</p>
<p>（5）如果输入的密码正确，进入主界面。ATM机提示一下选项：存款、取款、查询、转账。用例结束。</p>
<p><font color="red">子事件流a：</font></p>
<p>a1.提示储户输入的密码无效，请求再次输入。</p>
<p>a2.如果三次输入无效密码，则系统自动关闭，退出储户银行卡，用例结束。</p>
<p><font color="red">异常事件流e:</font></p>
<p>e1.提示储户主机连接不上。</p>
<p>e2.系统自动关闭，退出储户银行卡，用例结束。</p>
</blockquote>
<h2 id="3-4-用例建模"><a href="#3-4-用例建模" class="headerlink" title="3.4 用例建模"></a><span id="4">3.4 用例建模</span></h2><p><strong>用例模型</strong>主要应用在需求分析时使用。</p>
<p>建立<strong>用例模型</strong>，使开发人员明确系统的功能有哪些，方便用户和系统分析师进行沟通。</p>
<p><strong>用例建模</strong>直接面向用户，主要以需求陈述为基本依据，确定有关系统的边界、参与者、用例、通信关系等。</p>
<blockquote>
<p>用例建模步骤：</p>
<p>1.找出系统外部的参与者和外部系统，确定系统的边界和范围</p>
<p>2.确定每个参与者所期望的系统行为，即参与者对系统的基本业务需求</p>
<p>3.把这些系统行为作为基本用例</p>
<p>4.区分用例的优先次序</p>
<p>5.细化每个用例</p>
<p>6.编写每个用例的用例描述</p>
<p>7.绘制用例图</p>
<p>8.编写项目词汇表</p>
</blockquote>
<h3 id="3-4-1-确定系统边界"><a href="#3-4-1-确定系统边界" class="headerlink" title="3.4.1 确定系统边界"></a>3.4.1 确定系统边界</h3><p>系统边界是<strong>指系统与系统之间的界限</strong></p>
<p>系统可以认为是由一系列的相互作用的元素形成的具有特定功能的有机整体</p>
<p>系统边界定义了由谁或什么来使用系统，能够为参与者提供什么特定服务</p>
<p>系统边界<strong>用实线方框图形符号</strong>表示，同时附上<strong>系统的名称</strong>作为标签。</p>
<blockquote>
<p>用例绘制在方框里面，参与者绘制在方框外面</p>
<img src="/2020/03/26/UML%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%8F%82%E4%B8%8E%E8%80%85%E3%80%81%E7%94%A8%E4%BE%8B%EF%BC%89/15.png" class="">
</blockquote>
<h3 id="3-4-2-确定参与者"><a href="#3-4-2-确定参与者" class="headerlink" title="3.4.2 确定参与者"></a>3.4.2 确定参与者</h3><p><strong>用系统边界决定参与者。</strong></p>
<p>系统边界规划不一，参与者和用例也会发生变化。</p>
<blockquote>
<p><font color="red"><strong>以下问题可以帮助识别参与者：</strong></font></p>
<p>谁将使用系统的主要功能？</p>
<p>谁将需要系统的支持来完成他们的日常工作？</p>
<p>谁必须维护、管理和确保系统正常工作？</p>
<p>谁将给系统提供信息、使用信息和维护信息</p>
<p>系统需要处理哪些硬件设备？</p>
<p>系统使用外部资源吗</p>
<p>系统需要与其它系统交互吗？</p>
<p>谁对系统产生的结果感兴趣</p>
</blockquote>
<blockquote>
<p><font color="red"><strong>确定参与者时，需要注意：</strong></font></p>
<p>参与者对于系统而言总是外部的。</p>
<p>参与者直接同系统交互。</p>
<p>参与者表示人或事物同系统发生交互时所扮演的角色，而不是特定的人或事物。</p>
<p>一个人或事物在与系统发生关系时，同时或不同时扮演多种角色。</p>
<p>一个参与者可以包含多个不同的具体用户。</p>
</blockquote>
<h3 id="3-4-3-确定用例"><a href="#3-4-3-确定用例" class="headerlink" title="3.4.3 确定用例"></a>3.4.3 确定用例</h3><p>识别用例最好的方法是从参与者列表开始，然后考虑每个参与者如何使用系统，需要系统提供什么样的服务。还需要弄清楚系统的题域、业务流程、系统功能需求。</p>
<blockquote>
<p><font color="red"><strong>以下问题能够帮助识别用例：</strong></font></p>
<p>参与者要向系统请求什么功能？</p>
<p>每个参与者的特定任务是什么？</p>
<p>参与者需要读取、创建、撤销、修改或存储系统的某些信息</p>
<p>是否任何一个参与者都要向系统通知有关突发性的、外部的改变？或者必须通知参与者关于系统中发生的事件？</p>
<p>这些事件代表了哪些功能？</p>
<p>系统需要哪些输入输出？</p>
<p>是否所有的功能需要都被用例使用了？</p>
</blockquote>
<blockquote>
<p><font color="red"><strong>在确定用例时，要注意：</strong></font></p>
<p>每个用例至少应该涉及一个参与者。</p>
<p>如果存在不与参与者进行交互的用例，则应该检查是否遗漏了该用例的参与者。如果确实没有与参与者进行交互，则可考虑将其并入到其他用例中。</p>
<p>每个参与者也必须至少涉及一个用例。</p>
<p>如果存在不与用例进行交互的参与者，则应该考虑该参与者是如何与系统发生联系的，或者由参与者确定一个新的用例，或者该参与者是一个多余的模型元素。</p>
</blockquote>
<h3 id="3-4-4-区分用例的优先次序"><a href="#3-4-4-区分用例的优先次序" class="headerlink" title="3.4.4 区分用例的优先次序"></a>3.4.4 区分用例的优先次序</h3><p><strong>哪些用例是最关键的，最复杂的，最艰巨的，哪些用例必须在其他用例之前完成。</strong></p>
<p>规划好后续系统功能的分析与设计阶段的任务展开的先后次序，确定出哪个用例可以为其他用例所重用，从长远的角度节省时间。</p>
<h3 id="3-4-5-细化每个用例"><a href="#3-4-5-细化每个用例" class="headerlink" title="3.4.5 细化每个用例"></a>3.4.5 细化每个用例</h3><p>分析基本用例要完成的功能，将基本用例中具有一定独立性的功能，特别是具有公共为特征的功能分解出来，将其作为<font color="red">包含用例</font>。</p>
<p>分析基本用例功能以外的其他功能，将其作为<font color="red">扩展用例</font>。</p>
<p>对用例进行细化，有助于弄清楚用例的行为中哪些是手工操作的，哪些是可以编程实现的。</p>
<p>细化用例<font color="red">本质上是对原有用例进行分解</font>，其结果会导致<font color="red">用例个数的增加</font>和每个用例的<font color="red">动作步骤的简化</font>。</p>
<p>过多的用例个数会增加用例间的通信关系，增加系统耦合度和通信开支。</p>
<h3 id="3-4-6-编写每个用例描述"><a href="#3-4-6-编写每个用例描述" class="headerlink" title="3.4.6 编写每个用例描述"></a>3.4.6 编写每个用例描述</h3><p>详细说明参与者和用例进行交互时，用例所执行的一系列的动作序列。</p>
<h3 id="3-4-7-绘制用例图"><a href="#3-4-7-绘制用例图" class="headerlink" title="3.4.7 绘制用例图"></a>3.4.7 绘制用例图</h3><p>用例图的主要作用是描述参与者和用例之间的关系。</p>
<p>可以有一个或多个用例图。</p>
<h3 id="3-4-8-编写项目词汇表"><a href="#3-4-8-编写项目词汇表" class="headerlink" title="3.4.8 编写项目词汇表"></a>3.4.8 编写项目词汇表</h3><p>项目词汇表是最重要的项目制品之一。</p>
<p>词汇表提供了主要业务术语和定义的字典。它应该被项目中的所有人员理解，包括所有的利益相关人员。</p>
<p><strong>同音异义词：</strong>相同的单词对不同的人表示不同的事物。</p>
<p><strong>同义异音词：</strong>相同的事物不同的词。OOA必须挑选其中之一并坚持用它。其他变体必须完全从用例模型中剔除。</p>
<p>UML没有为项目词汇表设置任何标准。尽可能简单和简要。</p>
<p>采用像字典字母表那样的形式，对单词和定义进行排序。简单的基于文本的文档就可以了。</p>
<p>大的项目可能需要基于在线HTML或XML的词汇表或者甚至是一个简单的数据库。</p>
]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP（第二章：语法）</title>
    <url>/2020/03/26/JSP%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E8%AF%AD%E6%B3%95%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/03/26/JSP（第二章：语法）/#1">1. JSP是如何执行的？</a></p>
<p><a href="/2020/03/26/JSP（第二章：语法）/#2">2. JSP注释</a></p>
<p><a href="/2020/03/26/JSP（第二章：语法）/#3">3. 脚本元素</a></p>
</blockquote>
<h1 id="1-JSP是如何执行的？"><a href="#1-JSP是如何执行的？" class="headerlink" title="1. JSP是如何执行的？"></a><span id="1">1. JSP是如何执行的？</span></h1><img src="/2020/03/26/JSP%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E8%AF%AD%E6%B3%95%EF%BC%89/1.png" class="">

<p>（1）客户端请求<br>（2）Web容器将jsp页面转译成servlet的源代码.java<br>（3）Web容器将产生的源代码经过编译.class<br>（4）Web容器加载编译后的代码并执行<br>（5）把执行结果响应至客户端</p>
<h1 id="2-JSP注释"><a href="#2-JSP注释" class="headerlink" title="2. JSP注释"></a><span id="2">2. JSP注释</span></h1><pre><code class="jsp">&lt;!--html注释--&gt;
&lt;%-- 隐藏注释 --%&gt;
&lt;% //JAVA的单行注释 %&gt;
&lt;% /*JAVA的多行注释*/ %&gt;</code></pre>
<p>其中注释在客户端查看源代码时可以看到，而隐藏注释是看不到的。</p>
<a id="more"></a>

<h1 id="3-脚本元素"><a href="#3-脚本元素" class="headerlink" title="3. 脚本元素"></a><span id="3">3. 脚本元素</span></h1><h2 id="3-1-JAVA脚本"><a href="#3-1-JAVA脚本" class="headerlink" title="3.1 JAVA脚本"></a>3.1 JAVA脚本</h2><p><font color="red">格式：&lt;%  任意的JAVA代码   %&gt;</font></p>
<h2 id="3-2-表达式"><a href="#3-2-表达式" class="headerlink" title="3.2 表达式"></a>3.2 表达式</h2><p><font color="red">格式：&lt;%=   %&gt;</font></p>
<p>=后面必须是字符串变量或者被转换成字符串的表达式，不需要以；结束，只有一行。</p>
<p>如：</p>
<pre><code class="jsp">&lt;%=&quot;HelloWorld&quot;%&gt;
&lt;%=i+1%&gt;
&lt;%=request.getParameter(&quot;username&quot;)%&gt;</code></pre>
<h2 id="3-3-声明"><a href="#3-3-声明" class="headerlink" title="3.3 声明"></a>3.3 声明</h2><p><font color="red">格式：&lt;%!    %&gt;</font></p>
<pre><code class="jsp">&lt;%! int accesscount=0; %&gt;
&lt;%= ++accesscount %&gt;</code></pre>
<pre><code class="jsp">&lt;!--两种声明的区别--&gt;
&lt;body&gt;
    &lt;%! int accesscount1=0; //全局变量，刷新不重置%&gt;
    &lt;% int accesscount2=0; //局部变量，刷新重置%&gt;
    &lt;%= ++accesscount1 %&gt;
    &lt;%= ++accesscount2 %&gt;  
&lt;/body&gt;
&lt;!--刷新页面，全局变量accesscount1增加1，局部变量accesscount2不增加--&gt;</code></pre>
<p>Servlet的对象只有一个，只初始化一次，所以accesscount1的值会不断的增加。<br>但是accesscount2会重新声明一次，每次的值都是初始值，不会变。</p>
<p>注意：%和=之间不要有空格。</p>
<h2 id="3-4-指令元素"><a href="#3-4-指令元素" class="headerlink" title="3.4 指令元素"></a>3.4 指令元素</h2><p>指令标识主要用于设定整个JSP页面范围内都有效的相关信息，它是被服务器解释并执行的，不会产生任何内容输出到网页中。<br>directive (编译指令)相当于在编译期间的命令。编译期间：程序还没有开始运行。</p>
<p><font color="red">格式：&lt;%@directive 属性=“属性值”%&gt;</font></p>
<p><font color="blue">常见的directive: <strong>page、include、talib</strong></font></p>
<h3 id="3-4-1-page指令"><a href="#3-4-1-page指令" class="headerlink" title="3.4.1 page指令"></a>3.4.1 page指令</h3><p>page:指明与JSP container的沟通方式<br>&lt;%@page</p>
<p>*<em>language=”java”  *</em>——可以省略，如果不省略，只能取java。 </p>
<p><strong>extends=”classname”</strong>——指定JSP页面从谁继承出来的，就是JspBase，不需要指定。  </p>
<p><strong>buffer=”none|kb size”</strong>——none不缓冲，默认8k。页面先写到内存，然后一次性的写到客户端。</p>
<p><strong>session=”true|false”</strong>——是否能使用session对象。用的比较少。</p>
<p><strong>autoflush=”true|false”</strong>——缓冲器是否自动清除，默认true。</p>
<p><strong>isThreadSafe=”true|false”</strong>——默认false，不需要指定。</p>
<p><strong>info=”infotext”</strong>——JSP相关的描述性信息，很少用。</p>
<p><font color="red"><strong>import=”importlist”</strong>——相当于java的import语句，导入指定包或类名列表。</font></p>
<p><font color="red"><strong>errorPage=”errorPageURL”</strong>——页面出错后会显示哪个页面的内容。</font></p>
<p><font color="red"><strong>isErrorPage=”true|false”</strong>——当前页面是不是显示错误的页面。</font></p>
<p><font color="red"><strong>contentType=”text/html;charset=gb2312”</strong>——编码格式</font></p>
<p>%&gt;</p>
<pre><code class="jsp">&lt;%@page import=&quot;java.util.*,java.sql.*&quot; %&gt;
&lt;!--如果引入多个包，用逗号隔开。或者写多个import都行。--&gt;</code></pre>
<p>例子：</p>
<pre><code class="jsp">【TestErr.jsp】
&lt;%@page errorPage=&quot;ErrPage.jsp&quot;%&gt;
&lt;%
int i=6,j=0;
out.println(i/j);
%&gt;
【ErrPage.jsp】
&lt;%@page contentType=&quot;text/html;charset=gb2312&quot; %&gt;
&lt;%@page isErrorPage=&quot;true&quot; %&gt;
&lt;!--本页面是个错误信息显示页--&gt;
&lt;html&gt;
    &lt;body text=&quot;red&quot;&gt;
        错误信息：&lt;%out.println(&quot;除数不能为0！&quot;);%&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<h3 id="3-4-2-include指令"><a href="#3-4-2-include指令" class="headerlink" title="3.4.2 include指令"></a>3.4.2 include指令</h3><p><font color="blue">“静态包含”，将指定的JSP或者HTML文件包含进来,不能传参数。</font></p>
<p>JSP引擎会在JSP程序的转换时期先把file属性设定的文件包含进来，然后开始执行转换及编译的工作。（效率比较高）<br>将文件内容原样放到include所在的位置，然后进行编译。（注意：程序还没有开始运行）</p>
<p><font color="red"><strong>格式：&lt;%@include file=”url”%&gt;</strong></font></p>
<p>例子：</p>
<pre><code class="jsp">【TestInclude.jsp】
&lt;body&gt;
    &lt;%@include file=&quot;TestUser.jsp&quot; %&gt;
    &lt;%out.println(&quot;欢迎&quot;);%&gt;
&lt;/body&gt;
【TestUser.jsp】
&lt;body&gt;
    &lt;%out.println(&quot;hi:&quot;+request.getParameter(&quot;user&quot;));%&gt;
&lt;/body&gt;</code></pre>
<h3 id="3-4-3-taglib指令"><a href="#3-4-3-taglib指令" class="headerlink" title="3.4.3 taglib指令"></a>3.4.3 taglib指令</h3><p>引入标签库的定义，可以 是自定义标签。(不常用)</p>
<h2 id="3-5-动作元素"><a href="#3-5-动作元素" class="headerlink" title="3.5 动作元素"></a>3.5 动作元素</h2><h3 id="3-5-1-lt-jsp-include-gt"><a href="#3-5-1-lt-jsp-include-gt" class="headerlink" title="3.5.1 &lt;jsp:include&gt;"></a>3.5.1 &lt;jsp:include&gt;</h3><p><font color="blue">用于”动态包含”JSP程序或者HTML文件等。</font></p>
<p><font color="blue">除非这个指令会被执行到，否则它是不会被Tomcat等JSP engine编译。</font></p>
<pre><code class="jsp">【格式1：】
&lt;jsp:include page=”URL” flush=”true”/&gt;
【格式2：】
&lt;jsp:include page=”URL” flush=”true”&gt;
    &lt;jsp:param name=”paramname” value=”paramvalue”/&gt;
&lt;/jsp:include&gt;
&lt;!-- jsp:param用来设定include文件时的参数和对应的值。 --&gt; </code></pre>
<table>
<thead>
<tr>
<th align="left">语法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">jsp:include</td>
<td align="left">在页面被请求的时候引入一个文件。</td>
</tr>
<tr>
<td align="left">jsp:useBean</td>
<td align="left">寻找或者实例化一个JavaBean。</td>
</tr>
<tr>
<td align="left">jsp:setProperty</td>
<td align="left">设置JavaBean的属性。</td>
</tr>
<tr>
<td align="left">jsp:getProperty</td>
<td align="left">输出某个JavaBean的属性。</td>
</tr>
<tr>
<td align="left">jsp:forward</td>
<td align="left">把请求转到一个新的页面。</td>
</tr>
<tr>
<td align="left">jsp:plugin</td>
<td align="left">根据浏览器类型为Java插件生成OBJECT或EMBED标记。</td>
</tr>
<tr>
<td align="left">jsp:element</td>
<td align="left">定义动态XML元素</td>
</tr>
<tr>
<td align="left">jsp:attribute</td>
<td align="left">设置动态定义的XML元素属性。</td>
</tr>
<tr>
<td align="left">jsp:body</td>
<td align="left">设置动态定义的XML元素内容。</td>
</tr>
<tr>
<td align="left">jsp:text</td>
<td align="left">在JSP页面和文档中使用写入文本的模板</td>
</tr>
</tbody></table>
<blockquote>
<p>区别：include编译指令是在JSP程序的转换时刻就将file属性指定的内容嵌入，然后再编译执行；而include动作指令在转换的时刻不会有编译，只有在客户端请求（运行）时如果被执行到才会被动态的编译载入。include不能带参数，而jsp:include可以带参数。</p>
</blockquote>
<h3 id="3-5-2-lt-jsp-forward-gt"><a href="#3-5-2-lt-jsp-forward-gt" class="headerlink" title="3.5.2 &lt;jsp:forward&gt;"></a>3.5.2 &lt;jsp:forward&gt;</h3><p>jsp:forward用于将一个JSP的内容传送到page所指定的JSP程序或者servlet去处理。</p>
<pre><code class="jsp">【格式1：】
&lt;jsp:forward page=”URL” flush=”true”/&gt;
【格式2：】
&lt;jsp:forward page=”URL” flush=”true”&gt;
    &lt;jsp:param name=”paramname” value=”paramvalue”/&gt;
&lt;/jsp:forward</code></pre>
<p>例子：</p>
<pre><code class="jsp">【forward.jsp】
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Forward Example&lt;/title&gt;
    &lt;/head&gt;
    &lt;!--最终显示的是forforward.jsp中的内容--&gt;
    &lt;body bgcolor=red&gt;
        Welcome to forward.jsp
        &lt;%--直接跳转到forforward.jsp，这两个jsp用的是同一个request--%&gt;
        &lt;jsp:forward page=&quot;forforward.jsp&quot; /&gt;
    &lt;/body&gt;
&lt;/html&gt;

【forforward.jsp】
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;forforward.jsp&lt;/title&gt;
    &lt;/head&gt;   
    &lt;body bgcolor=blue&gt;
        Welcome&lt;br&gt;
        Here is forforward.jsp
    &lt;/body&gt;
&lt;/html&gt;
【结果：】
页面的内容是forforward.jsp的内容，但是地址栏仍然是forward.jsp。
jsp:forward 发生在服务器端，客户端并不知道已经跳转到别的页面了。
但是forward和forforward是同一个request对象。</code></pre>
<img src="/2020/03/26/JSP%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E8%AF%AD%E6%B3%95%EF%BC%89/2.png" class="">]]></content>
      <categories>
        <category>JSP</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>软件项目管理（第八章：项目人力资源管理）</title>
    <url>/2020/03/26/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/03/26/软件项目管理（第八章：项目人力资源管理）/#1">8.1 项目人力资源管理概述</a></p>
<p><a href="/2020/03/26/软件项目管理（第八章：项目人力资源管理）/#2">8.2 项目人力资源规划</a></p>
<p><a href="/2020/03/26/软件项目管理（第八章：项目人力资源管理）/#3">8.3 项目团队建设</a></p>
<p><a href="/2020/03/26/软件项目管理（第八章：项目人力资源管理）/#4">8.4 项目人力资源的激励</a></p>
<p><a href="/2020/03/26/软件项目管理（第八章：项目人力资源管理）/#0">作业</a></p>
</blockquote>
<h1 id="8-1-项目人力资源管理概述"><a href="#8-1-项目人力资源管理概述" class="headerlink" title="8.1 项目人力资源管理概述"></a><span id="1">8.1 项目人力资源管理概述</span></h1><h2 id="8-1-1-项目人力资源"><a href="#8-1-1-项目人力资源" class="headerlink" title="8.1.1 项目人力资源"></a>8.1.1 项目人力资源</h2><p><strong>1.项目人力资源：</strong> 项目人力资源管理就是根据项目的目标、项目活动进展情况和外部环境的变化，采取科学的方法，对项目团队成员的思想、心理和行为进行有效的管理，充分发挥他们的主观能动性，实现项目的最终目标。</p>
<p><strong>2.人力资源管理的作用：</strong></p>
<p>（1）人力资源管理能够帮助项目经理达到如下目标：用人得当，即事得其人，可降低员工的流动率；使员工努力工作；使员工认为自己的薪酬公平合理；对员工进行充足的训练，以提高工作的效能；保障工作环境的安全，遵守国家的法律和法规；使项目团队内部的员工都得到平等的待遇，避免员工的抱怨等。</p>
<p>（2）人力资源管理能够提高员工的工作绩效。</p>
<p>（3）获得竞争优势。</p>
<p>（4）随着财富的增加和生活水平的提高，人们的价值观念发生了明显的变化，传统的“职业道德”教育的作用微乎其微。</p>
<a id="more"></a>

<h2 id="8-1-2-IT项目的人力资源管理"><a href="#8-1-2-IT项目的人力资源管理" class="headerlink" title="8.1.2 IT项目的人力资源管理"></a>8.1.2 IT项目的人力资源管理</h2><p>1．项目组织规划<br>2．项目人员的获得与配备<br>3．项目组织成员的开发<br>4．项目团队建设与管理</p>
<h2 id="8-1-3-IT项目人力资源管理的特性"><a href="#8-1-3-IT项目人力资源管理的特性" class="headerlink" title="8.1.3 IT项目人力资源管理的特性"></a>8.1.3 IT项目人力资源管理的特性</h2><p>（1）知识型员工具有较高的知识、能力，具有相对稀缺性和难以替代性。</p>
<p>（2）知识型员工工作自主性要求高。</p>
<p>（3）知识型员工大多崇尚智能，蔑视权威。</p>
<p>（4）知识型员工成就动机强，追求卓越。</p>
<p>（5）知识型员工的能力与贡献之间差异较大，内在需求具有较多的不确定性和多样性，会出现交替混合的需求模式。</p>
<p>（6）知识型员工工作中的定性成分较大，工作过程一般难以量化，因而不易控制。</p>
<h1 id="8-2-项目人力资源规划"><a href="#8-2-项目人力资源规划" class="headerlink" title="8.2 项目人力资源规划"></a><span id="2">8.2 项目人力资源规划</span></h1><h2 id="8-2-1-IT项目组织的确定"><a href="#8-2-1-IT项目组织的确定" class="headerlink" title="8.2.1 IT项目组织的确定"></a>8.2.1 IT项目组织的确定</h2><p> 项目组可以分为：总体设计组、系统集成组、软件开发组、系统测试组、质量监控组等。</p>
<h2 id="8-2-2-IT项目工作设计"><a href="#8-2-2-IT项目工作设计" class="headerlink" title="8.2.2 IT项目工作设计"></a>8.2.2 IT项目工作设计</h2><p><strong>1．工作定义与设计的内容：</strong>工作定义与设计从工作分析开始，成果是形成各个职位的工作说明书。</p>
<p>工作分析主要用于解决工作中以下几个重要问题：</p>
<p>（1）该项工作包括哪些体力劳动和脑力劳动？</p>
<p>（2）工作将在什么时间、什么节奏下完成？</p>
<p>（3）工作将在哪里完成，工作环境怎么样？</p>
<p>（4）人们如何完成这项工作？</p>
<p>（5）为什么要完成这项工作？</p>
<p>（6）完成这项工作需要具备哪些条件？</p>
<p><strong>2．工作定义与设计的原则：</strong></p>
<p>（1）工作具有挑战性</p>
<p>（2）工作丰富化、富于变化性</p>
<p>（3）工作本身能够提供激励</p>
<p>（4）考虑到员工的兴趣与成就感</p>
<p>（5）实行弹性工作制</p>
<p>（6）建立自我管理团队，给员工授权，让员工自己或项目团队自己负责工作日程的安排和工作分配。</p>
<h2 id="8-2-3-项目组织计划的编制"><a href="#8-2-3-项目组织计划的编制" class="headerlink" title="8.2.3 项目组织计划的编制"></a>8.2.3 项目组织计划的编制</h2><p><strong>1 . 组织计划编制流程：</strong></p>
<p>（1）组织目标分解与工作划分。 </p>
<p>（2）建立岗位与职责。</p>
<p>（3）决定管理跨度。</p>
<p>（4）确定职责关系。</p>
<p>（5）工作定义与设计。</p>
<p>（6）人员配置计划。</p>
<p>（7）检查、运行、不断完善。</p>
<p><strong>2 . 组织计划编制的依据：</strong></p>
<p>（1）组织界面。<br>（2）技术界面。<br>（3）人际关系界面。<br>（4）人员配备需求。<br>（5）约束条件。</p>
<p><strong>3 . 组织计划编制的工具与技术：</strong></p>
<p>（1）模板。<br>（2）人力资源管理方法。<br>（3）组织理论。<br>（4）项目干系人的需求分析。</p>
<p><strong>4 . 组织计划的输出：</strong></p>
<p>（1）角色和职责分配。</p>
<p>（2）构造项目组织结构图。<img src="/2020/03/26/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%EF%BC%89/1.png" class=""></p>
<p>（3）编制人员配置管理计划：如 1.项目团队组建。2.时间安排。3.成员遣散安排。4.培训要求。</p>
<p>（4）详细依据：如 1.工作组织影响。2.工作说明书</p>
<h1 id="8-3-项目团队建设"><a href="#8-3-项目团队建设" class="headerlink" title="8.3 项目团队建设"></a><span id="3">8.3 项目团队建设</span></h1><h2 id="8-3-1-项目团队的特殊性"><a href="#8-3-1-项目团队的特殊性" class="headerlink" title="8.3.1 项目团队的特殊性"></a>8.3.1 项目团队的特殊性</h2><p><strong>1.项目团队的概念：</strong>团队是指一些才能互补、团结和谐并为负有共同责任的统一目标和标准而奉献的一群人。</p>
<p><strong>2.项目团队的特点：</strong></p>
<p>（1）项目团队的目的性。<br>（2）项目团队的临时性。<br>（3）项目团队的团队性。<br>（4）项目团队的多样性。</p>
<p><strong>3.项目团队的作用：</strong></p>
<p>（1）更有效地实现目标。<br>（2）满足成员心理需求。<br>（3）使个人得到更快的进步。<br>（4）提高决策质量。</p>
<h2 id="8-3-2-项目团队的发展阶段"><a href="#8-3-2-项目团队的发展阶段" class="headerlink" title="8.3.2 项目团队的发展阶段"></a>8.3.2 项目团队的发展阶段</h2><p><strong>1.组建阶段：</strong>（1）形成团队的的内部结构框架（2）建立团队与外界的初步联系</p>
<p><strong>2.激荡阶段</strong></p>
<p><strong>3.规范阶段</strong></p>
<p><strong>4.执行阶段</strong></p>
<p><strong>5.休整阶段：</strong>（1）团队解散。（2）团队休整。（3）团队整顿。</p>
<h2 id="8-3-3-团队成员的选择"><a href="#8-3-3-团队成员的选择" class="headerlink" title="8.3.3 团队成员的选择"></a>8.3.3 团队成员的选择</h2><p><strong>1.项目成员配备原则：</strong></p>
<p>（1）人员的配备必须要为项目目标服务。</p>
<p>（2）“以岗定员”，保证人员配备的效率，充分利用人力资源，不能以人定岗。</p>
<p>（3）项目处于不同阶段，所需要的人力资源的种类、数量、质量是不同的，要根据项目的需要加入或退出，节约人力资源成本。</p>
<p><strong>2.项目成员应具备的素质：</strong></p>
<p>（1）项目团队成员具有专业技术技能。</p>
<p>（2）项目团队的高级成员必须在政治上敏感。</p>
<p>（3）项目团队成员需要有很强的以问题为导向的意识。</p>
<p>（4）项目团队成员需要有解决问题和决策的技能。</p>
<p>（5）项目团队成员需要很强的自信心。</p>
<p>（6）项目团队成员需要有人际交往的技能。</p>
<h2 id="8-3-4-项目团队建设"><a href="#8-3-4-项目团队建设" class="headerlink" title="8.3.4 项目团队建设"></a>8.3.4 项目团队建设</h2><p><strong>1.团队建设中的常见问题：</strong></p>
<p>（1）项目成立前期招聘和挑选项目团队成员不力；</p>
<p>（2）令人不解和困惑的组织结构；</p>
<p>（3）项目的执行缺乏控制；</p>
<p>（4）团队成员缺少培训；</p>
<p>（5）团队成员积极性低，对团队或项目的需要无反应或缺乏兴趣；</p>
<p>（6）团队成员缺乏个人的创造性；</p>
<p>（7）项目管理者不适当的管理理念；</p>
<p>（8）项目缺少成功的规划和开发；</p>
<p>（9）项目团队目标不明确或它们不被项目团队成员所接受；</p>
<p>（10）分配不公；</p>
<p>（11）团队成员个性问题；</p>
<p>（12）其他需要解决的更重要的组织问题；</p>
<p>（13）更广的组织文化对团队的管理方法不起支持作用；</p>
<p>（14）团队的工作是由技能欠佳的成员完成的，或是在没有得到足够的帮助下完成的；</p>
<p>（15）团队中过多的“空转”；</p>
<p>（16）团队的业绩下滑但无人知道原因；</p>
<p>（17）以前做出的决策未执行；</p>
<p>（18）团队会议没有效果，全部是争论且使人意志消沉。</p>
<p><strong>2.团队核心与团队精神：</strong></p>
<p>（1）高度的相互信任。</p>
<p>（2）强烈的相信依赖。</p>
<p>（3）统一的共同目标。</p>
<p>（4）全面的互助合作。</p>
<p>（5）关系平等与积极参与。</p>
<p>（6）自我激励和自我约束。</p>
<p><strong>3.团队建设的过程：</strong></p>
<p>（1）拟订团队建设计划；</p>
<p>（2）谨慎地界定项目的作用及任务；</p>
<p>（3）确保项目的目标与团队成员的个人目标相一致；</p>
<p>（4）尽量判断并争取拥有那些最具有前途的员工；</p>
<p>（5）选择那些既具有技术专长又有可能成为现实团队成员的候选人；</p>
<p>（6）组织团队，给予特定的人以特定的任务；</p>
<p>（7）准备并实施职责矩阵；</p>
<p>（8）召开“启动”会议；</p>
<p>（9）制订技术及程序议程；</p>
<p>（10）确保为成员提供足够的时间以使其相互认识；</p>
<p>（11）建立工作关系和联系方式；</p>
<p>（12）获取团队成员的承诺：时间承诺、角色承诺、项目优先承诺；</p>
<p>（13） 建立联系链接；</p>
<p>（14）实施团队建设活动，将团队建设行为与所有的项目行为相结合：召开会议、计划讨论会及技术/进度评审会、团体及个人咨询研讨会；</p>
<p>（15）对杰出贡献进行表彰。</p>
<h2 id="8-3-5-人员培训与开发"><a href="#8-3-5-人员培训与开发" class="headerlink" title="8.3.5 人员培训与开发"></a>8.3.5 人员培训与开发</h2><p><strong>1.人员培训：</strong></p>
<p>（1）培训需求分析</p>
<p>（2）培训项目设计</p>
<p>（3）培训组织实施</p>
<p>（4）培训成果转化</p>
<p>（5）培训效果评估</p>
<p><strong>2.人员开发：</strong></p>
<p>（1）正规教育</p>
<p>（2）人员测评</p>
<p>（3）在职体验</p>
<p>（4）人际交互</p>
<h2 id="8-3-6-项目绩效评估"><a href="#8-3-6-项目绩效评估" class="headerlink" title="8.3.6 项目绩效评估"></a>8.3.6 项目绩效评估</h2><p><strong>绩效是一定的主体作用于一定的客体而表现出来的效用，即它是在工作过程中产生的。</strong></p>
<p><strong>绩效是人们行为的后果，是目标的完成程度，是客观存在的结果。</strong></p>
<p><strong>绩效应体现投入与产出的关系，即考虑效率的问题。</strong></p>
<p><strong>绩效应当有一定的可度量性。</strong></p>
<h3 id="1-绩效评估"><a href="#1-绩效评估" class="headerlink" title="1. 绩效评估"></a>1. 绩效评估</h3><p>目的：激励、培训、沟通</p>
<p>过程：</p>
<p>（1）指定绩效评估指标和标准 </p>
<p>（2）绩效评估过程（资料收集、绩效综合评价）</p>
<p>（3）绩效评估面谈</p>
<p>（4）绩效评估审核</p>
<h3 id="2-绩效评估的方法"><a href="#2-绩效评估的方法" class="headerlink" title="2. 绩效评估的方法"></a>2. 绩效评估的方法</h3><p>（1）等级评定法</p>
<p>（2）比较控制法</p>
<p>（3）排序法</p>
<p>（4）关键事件法</p>
<p>（5）成对比较法</p>
<p>（6）行为锚定法</p>
<p>（7）目标管理法</p>
<h3 id="3-软件团队绩效考核指标"><a href="#3-软件团队绩效考核指标" class="headerlink" title="3. 软件团队绩效考核指标"></a>3. 软件团队绩效考核指标</h3><p><strong>定性指标：</strong></p>
<p>（1）工作态度：如 责任心、敬业精神、工作热情等</p>
<p>（2）工作氛围：如 团队士气如何、精神状态如何等</p>
<p>（3）工作经验：如 工作方法高效与否、知识的传递正确和及时与否</p>
<p>（4）应变能力：对于变更的控制、计划、实施、监督 的效果如何</p>
<p>（5）处理问题的能力：对于出现的问题能否及时、正确地解决</p>
<p><strong>定量指标：</strong></p>
<p>（1）工作量（2）工作效率（3）工作质量（4）按时完成</p>
<h1 id="8-4-项目人力资源的激励"><a href="#8-4-项目人力资源的激励" class="headerlink" title="8.4 项目人力资源的激励"></a><span id="4">8.4 项目人力资源的激励</span></h1><p>激励机制在团队建设中十分重要，如果一个项目经理不知道如何激励团队成员，便不能胜任项目管理工作。</p>
<h2 id="8-4-1-动机理论"><a href="#8-4-1-动机理论" class="headerlink" title="8.4.1 动机理论"></a>8.4.1 动机理论</h2><p>激励和动机紧密相连，所谓动机就是个体通过高水平的努力而实现组织目标的愿望，而这种努力又能满足个体的某些需要。</p>
<p>这里有3个关键要素：<strong>努力的强度和质量、组织目标、需要</strong>。</p>
<h3 id="1-马斯洛的需求层次理论"><a href="#1-马斯洛的需求层次理论" class="headerlink" title="1.马斯洛的需求层次理论"></a>1.马斯洛的需求层次理论</h3><p>（1）生理需要——维持人类自身生命的最基本需要，如吃、穿、住、行、睡等。</p>
<p>（2）安全需要——如就业工作、医疗、保险、社会保障等。</p>
<p>（3）友爱与归属需要——人们希望得到友情，被他人接受，成为群体一分子。</p>
<p>（4）尊重需要——个人自尊心，受他人尊敬及成就得到承认，对名誉、地位的追求等。</p>
<p>（5）自我实现需要——人类最高层次的需要。追求理想、自我价值、使命感，创造性和独立精神等。</p>
<h3 id="2-ERG理论"><a href="#2-ERG理论" class="headerlink" title="2.ERG理论"></a>2.ERG理论</h3><p>（1）在任何时间里，多种层次的需要会同时发生激励作用；</p>
<p>（2）如果上一层次的需要一直得不到满足的话，个人就会感到沮丧，然后回归到对低层次需要的追求。</p>
<p>（3）某种需要在得到基本满足后，其强烈程度不仅不会减弱，还可能会增强，这就与马斯洛的观点不一致了。</p>
<h3 id="3-成就需要理论"><a href="#3-成就需要理论" class="headerlink" title="3.成就需要理论"></a>3.成就需要理论</h3><p>人类在环境的影响下形成以下3钟需要：</p>
<p>（1）权利需要（2）友谊需要（3）成就需要</p>
<h2 id="8-4-2-激励理论"><a href="#8-4-2-激励理论" class="headerlink" title="8.4.2 激励理论"></a>8.4.2 激励理论</h2><h3 id="1-双因素论"><a href="#1-双因素论" class="headerlink" title="1.双因素论"></a>1.双因素论</h3><p>双因素理论是心理学家赫茨伯格在马斯洛需要层次论研究基础上提出的。他把人的需要因素分为两大类：<strong>激励因素和保健因素</strong></p>
<h3 id="2-期望理论"><a href="#2-期望理论" class="headerlink" title="2.期望理论"></a>2.期望理论</h3><p>（1）努力——绩效的联系</p>
<p>（2）绩效——奖赏的联系</p>
<p>（3）奖赏——个人目标的联系</p>
<h2 id="8-4-3-激励因素"><a href="#8-4-3-激励因素" class="headerlink" title="8.4.3 激励因素"></a>8.4.3 激励因素</h2><p>（1）物质激励</p>
<p>（2）精神激励：如 参与感、发展机遇、工作乐趣、荣誉感</p>
<p>（3）其他激励手段</p>
<h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a><span id="0">作业</span></h1><p>1.在项目团队发展过程中，项目经理应该怎么做？</p>
<pre><code>1：项目经理是团队的核心，项目经理的任何举动对团队成员都将有影响，所以项目经理必须保持高度的自律;
2：每个公司有公司文化，但公司内各项目组之间存在差异，项目组内根据自身的项目特色，也会存在自己的团队文化，所以项目经理应该加强团队文化的建设;
3：让大家对项目的目标有清晰认识和理解，大家才能共同的目标努力;
4：对每位成员的角色要有明确的划分，对成员之间的沟通和合作方式建立流程规范;
5：对每位成员的能力、性格等要有清晰的了解，合理地进行工作的分配，把合适的人放在合适的位置上，以发挥每个人的优势;
6：注重对项目组成员能力的培养，在员工刚加入项目组的时候，加强对他们进行项目相关业务和技术的培训，当员工在自身岗位上表现突出的时候，要注意按更高一级的岗位的要求去培养他;
7：在团队建立一个开放、坦诚、及时的沟通环境，让大家都善于沟通，乐于沟通，大胆提出自己的想法和意见;
8：加强团队的合作精神，团队成员不仅要仅限于完成自己的任务，还要协同其他成员共同完成承担的项目，把自己在项目中的经验和教训跟大家分享，以避免别人犯同样的错误，或到遇到相同问题时能很快解决;
9：处理员工之间的矛盾和冲突时要公平，公正，就事论事，不能袒护任何一方;
10：注意适当地运用激励措施，当团队成员表现突出时，要对他及时、公开的表扬，让他们感觉到自己的工作获得认可，把工作做得更好，同时也是对其他员工的一种督促;项目经理博客
11：在工作时间之外，适当安排团队建设活动，一起打球、聚餐等，释放工作的压力，让大家有更充分的了解。</code></pre>]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>UML（第二章：9钟图+包图）</title>
    <url>/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/03/21/UML（第二章：9钟图-包图）/#1"><strong>UML图的分类</strong></a></p>
<p><a href="/2020/03/21/UML（第二章：9钟图-包图）/#2"><strong>UML与软件工程</strong></a></p>
<p><a href="/2020/03/21/UML（第二章：9钟图-包图）/#3"><strong>UML语法</strong></a></p>
</blockquote>
<h1 id="UML图的分类"><a href="#UML图的分类" class="headerlink" title="UML图的分类"></a><span id="1">UML图的分类</span></h1><p>如下图所示：UML图分为<font color="red">用例视图、设计视图、进程视图、实现视图和拓扑视图</font></p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/1.png" class="">

<p>如下图所示：又可以静动分为静态视图和动态视图。</p>
<p><strong>静态图</strong>分为：<font color="red">用例图，类图，对象图，构件图，部署图，包图。</font></p>
<p><strong>动态图</strong>分为：<font color="red">序列图，协作图，状态图，活动图。</font></p>
<a id="more"></a>

<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/%E9%9D%99%E6%80%81%E5%9B%BE.png" class="">

<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/%E5%8A%A8%E6%80%81%E5%9B%BE.png" class="">

<h1 id="1-用例图（UseCase-Diagrams）"><a href="#1-用例图（UseCase-Diagrams）" class="headerlink" title="1 用例图（UseCase Diagrams）"></a>1 用例图（UseCase Diagrams）</h1><p>用例图主要回答了两个问题：1、是谁用软件    2、软件的功能</p>
<p>从用户的角度描述了系统的功能，并指出各个功能的执行者，强调用户的使用者，系统为执行者完成哪些功能。</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/2.png" class="">

<h1 id="2-类图（Class-Diagrams）"><a href="#2-类图（Class-Diagrams）" class="headerlink" title="2 类图（Class Diagrams）"></a>2 类图（Class Diagrams）</h1><p>​        用户根据用例图抽象成类，描述类的内部结构和类与类之间的关系，是一种静态结构图。 在UML类图中，常见的有以下几种关系: 泛化（Generalization）, 实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)。</p>
<p>各种关系的强弱顺序： <strong>泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</strong></p>
<h2 id="2-1-泛化"><a href="#2-1-泛化" class="headerlink" title="2.1 泛化"></a>2.1 泛化</h2><p>【泛化关系】：是一种继承关系，表示一般与特殊的关系，它指定了子类如何继承父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/3.png" class="">

<h2 id="2-2-实现"><a href="#2-2-实现" class="headerlink" title="2.2 实现"></a>2.2 实现</h2><p>【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现。</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/4.png" class="">

<h2 id="2-3-关联"><a href="#2-3-关联" class="headerlink" title="2.3 关联"></a>2.3 关联</h2><p>【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。</p>
<p>【代码体现】：成员变量</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/5.png" class="">

<h2 id="2-4-聚合（普通关联）"><a href="#2-4-聚合（普通关联）" class="headerlink" title="2.4 聚合（普通关联）"></a>2.4 聚合（普通关联）</h2><p>【聚合关系】：是整体与部分的关系，<strong>且部分可以离开整体而单独存在</strong>。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。</p>
<p><strong>聚合关系是<font color="red">关联关系</font>的一种</strong>，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。</p>
<p>【代码体现】：成员变量</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/6.png" class="">

<h2 id="2-5-组合（自身关联）"><a href="#2-5-组合（自身关联）" class="headerlink" title="2.5 组合（自身关联）"></a>2.5 组合（自身关联）</h2><p>【组合关系】：是<strong>整体与部分的关系，但部分不能离开整体而单独存在</strong>。如公司和部门是整体和部分的关系，没有公司就不存在部门。</p>
<p><strong>组合关系是<font color="red">关联关系</font>的一种，是比聚合关系还要强的关系</strong>，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。</p>
<p>【代码体现】：成员变量</p>
<p>【箭头及指向】：带实心菱形的实线，菱形指向整体</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/7.png" class="">

<h2 id="2-6-依赖"><a href="#2-6-依赖" class="headerlink" title="2.6 依赖"></a>2.6 依赖</h2><p>【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.</p>
<p>【代码表现】：<strong>局部变量、方法的参数或者对静态方法的调用</strong></p>
<p>【箭头及指向】：带箭头的虚线，指向被使用者</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/8.png" class="">

<h2 id="2-7-各类图的关系（例子）"><a href="#2-7-各类图的关系（例子）" class="headerlink" title="2.7 各类图的关系（例子）"></a>2.7 各类图的关系（例子）</h2><img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/9.png" class="">

<h1 id="3-对象图（Object-Diagrams）"><a href="#3-对象图（Object-Diagrams）" class="headerlink" title="3 对象图（Object Diagrams）"></a>3 对象图（Object Diagrams）</h1><p>描述的是参与<strong>交互的各个对象在交互过程中某一时刻的状态</strong>。对象图可以被看作是类图在某一时刻的实例。</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/10.png" class="">

<h1 id="4-构件图（Component-Diagrams）"><a href="#4-构件图（Component-Diagrams）" class="headerlink" title="4 构件图（Component Diagrams）"></a>4 构件图（Component Diagrams）</h1><p>构件图是用来表示系统中构件与构件之间，类或接口与构件之间的关系图。其中，构建图之间的关系表现为依赖关系，定义的类或接口与类之间的关系表现为依赖关系或实现关系。</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/22.png" class="">

<h1 id="5-部署图（Deployment-Diagrams）"><a href="#5-部署图（Deployment-Diagrams）" class="headerlink" title="5 部署图（Deployment Diagrams）"></a>5 部署图（Deployment Diagrams）</h1><p>描述了系统运行时进行处理的结点以及在结点上活动的构件的配置。强调了物理设备以及之间的连接关系。</p>
<p><strong>部署模型的目的</strong>：描述一个具体应用的主要部署结构，通过对各种硬件，在硬件中的软件以及各种连接协议的显示，可以很好的描述系统是如何部署的；平衡系统运行时的计算资源分布；可以通过连接描述组织的硬件网络结构或者是嵌入式系统等具有多种硬件和软件相关的系统运行模型。</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/23.png" class="">

<h1 id="6-包图（Package-Diagrams）"><a href="#6-包图（Package-Diagrams）" class="headerlink" title="6 包图（Package Diagrams）"></a>6 包图（Package Diagrams）</h1><p>包图——描述组织系统的建模元素的分组机制（分层结构），以此表示系统总体结构模型。</p>
<p>展现了控制软件系统复杂性的分解策略，使得开发人员更容易理解模型，以便控制修改模型元素的范围。</p>
<hr>
<h1 id="7-状态图（Statechart-Diagrams）"><a href="#7-状态图（Statechart-Diagrams）" class="headerlink" title="7 状态图（Statechart Diagrams）"></a>7 状态图（Statechart Diagrams）</h1><p>是一种由状态、变迁、事件和活动组成的状态机，用来描述类的对象所有可能的状态以及时间发生时状态的转移条件。</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/11.png" class="">

<h1 id="8-活动图（Activity-Diagrams）"><a href="#8-活动图（Activity-Diagrams）" class="headerlink" title="8 活动图（Activity Diagrams）"></a>8 活动图（Activity Diagrams）</h1><p>是状态图的一种特殊情况，这些状态大都处于活动状态。本质是一种流程图，它描述了活动到活动的控制流。　　　　</p>
<p>交互图强调的是对象到对象的控制流，而活动图则强调的是从活动到活动的控制流。</p>
<p>活动图是一种表述过程基理、业务过程以及工作流的技术。</p>
<p>它可以用来对业务过程、工作流建模，也可以对用例实现甚至是程序实现来建模。</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/12.png" class="">

<h2 id="8-1带泳道的活动图"><a href="#8-1带泳道的活动图" class="headerlink" title="8.1带泳道的活动图"></a>8.1带泳道的活动图</h2><p>泳道表明每个活动是由哪些人或哪些部门负责完成。</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/13.png" class="">

<h2 id="8-2-带对象流的活动图"><a href="#8-2-带对象流的活动图" class="headerlink" title="8.2 带对象流的活动图"></a>8.2 带对象流的活动图</h2><p>用活动图描述某个对象时，可以把涉及到的对象放置在活动图中，并用一个依赖将其连接到进行创建、修改和撤销的动作状态或者活动状态上，对象的这种使用方法就构成了对象流。对象流用带有箭头的虚线表示。</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/14.png" class="">

<h1 id="9-协作图（Collaboration-Diagrams）"><a href="#9-协作图（Collaboration-Diagrams）" class="headerlink" title="9 协作图（Collaboration Diagrams）"></a>9 协作图（Collaboration Diagrams）</h1><p>交互图的一种，描述了收发消息的对象的组织关系，强调对象之间的合作关系。</p>
<p><strong>时序图</strong>按照时间顺序布图，而<strong>协作图</strong>按照空间结构布图</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/20.png" class="">

<h1 id="10-序列图-时序图（Sequence-Diagrams）"><a href="#10-序列图-时序图（Sequence-Diagrams）" class="headerlink" title="10 序列图-时序图（Sequence Diagrams）"></a>10 序列图-时序图（Sequence Diagrams）</h1><p>交互图的一种，描述了对象之间消息发送的先后顺序，强调时间顺序。</p>
<p>序列图的主要用途是把用例表达的需求，转化为进一步、更加正式层次的精细表达。用例常常被细化为一个或者更多的序列图。同时序列图更有效地描述如何分配各个类的职责以及各类具有相应职责的原因。</p>
<p>消息用从一个对象的生命线到另一个对象生命线的箭头表示。箭头以时间顺序在图中从上到下排列。 </p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/15.png" class="">

<h2 id="1-1-生命线"><a href="#1-1-生命线" class="headerlink" title="1.1 生命线"></a>1.1 生命线</h2><p>生命线名称可带下划线。当使用下划线时，意味着序列图中的生命线代表一个类的特定实例。</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/16.png" class="">

<h2 id="10-2-同步消息"><a href="#10-2-同步消息" class="headerlink" title="10.2 同步消息"></a>10.2 同步消息</h2><p>同步等待消息</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/17.png" class="">

<h2 id="10-3异步消息"><a href="#10-3异步消息" class="headerlink" title="10.3异步消息"></a>10.3异步消息</h2><p>异步发送消息，不需等待</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/18.png" class="">

<h2 id="10-4-注释"><a href="#10-4-注释" class="headerlink" title="10.4 注释"></a>10.4 注释</h2><img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/19.png" class="">

<h2 id="10-5-约束"><a href="#10-5-约束" class="headerlink" title="10.5 约束"></a>10.5 约束</h2><img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/21.png" class="">

<h2 id="10-6-组合"><a href="#10-6-组合" class="headerlink" title="10.6 组合"></a>10.6 组合</h2><p><strong>组合片段用来解决交互执行的条件及方式</strong>。它允许在序列图中直接表示逻辑组件，用于通过指定条件或子进程的应用区域，为任何生命线的任何部分定义特殊条件和子进程。常用的组合片段有：抉择、选项、循环、并行。</p>
<h1 id="11-图的差异比较"><a href="#11-图的差异比较" class="headerlink" title="11 图的差异比较"></a>11 图的差异比较</h1><h2 id="11-1-序列图-时序图-VS协作图"><a href="#11-1-序列图-时序图-VS协作图" class="headerlink" title="11.1 序列图(时序图)VS协作图"></a>11.1 序列图(时序图)VS协作图</h2><img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/26.png" class="">

<p>序列图和协作图都是交互图。二者在语义上等价，可以相互转化。但是侧重点不同：序列图侧重<strong>时间顺序</strong>，协作图侧重<strong>对象间的关系</strong>，协作图强调<strong>交互的空间结构</strong>。</p>
<p><strong>共同点</strong>：时序图与协作图均显示了对象间的交互。</p>
<p><strong>不同点</strong>：时序图强调交互的时间次序。</p>
<p>如以下例子：</p>
<p><strong>序列图：</strong><img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/27.png" class=""></p>
<p><strong>协作图：</strong><img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/28.png" class=""></p>
<h2 id="11-2-状态图VS活动图"><a href="#11-2-状态图VS活动图" class="headerlink" title="11.2 状态图VS活动图"></a>11.2 状态图VS活动图</h2><p>状态图和活动图都是行为图。</p>
<p>状态图侧重从行为的结果来描述，活动图侧重从行为的动作来描述。</p>
<p>状态图描述了一个具体对象的可能状态以及他们之间的转换。</p>
<p>在实际的项目中，活动图并不是必须的，需要满足以下条件：1、出现并行过程&amp;行为；2、描述算法；3、跨越多个用例的活动图。</p>
<h2 id="11-3-活动图VS交互图"><a href="#11-3-活动图VS交互图" class="headerlink" title="11.3 活动图VS交互图"></a>11.3 活动图VS交互图</h2><p>二者都涉及到对象和他们之间传递的关系。区别在于交互图观察的是传送消息的对象，而活动图观察的1是对象之间传递的消息。看似语义相同，但是他们是从不同的角度来观察整个系统的。</p>
<h1 id="UML与软件工程"><a href="#UML与软件工程" class="headerlink" title=" UML与软件工程"></a><span id="2"> UML与软件工程</span></h1><p>UML图是软件工程的组成部分，软件工程从宏观的角度保证了软件开发的各个过程的质量。而UML作为一种建模语言，更加有效的实现了软件工程的要求。</p>
<h2 id="1-在软件的各个开发阶段需要的UML图："><a href="#1-在软件的各个开发阶段需要的UML图：" class="headerlink" title="1 在软件的各个开发阶段需要的UML图："></a>1 在软件的各个开发阶段需要的UML图：</h2><img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/24.png" class="">

<h2 id="2-UML使用人员图示："><a href="#2-UML使用人员图示：" class="headerlink" title="2 UML使用人员图示："></a>2 UML使用人员图示：</h2><img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/25.png" class="">

<h1 id="UML语法"><a href="#UML语法" class="headerlink" title=" UML语法"></a><span id="3"> UML语法</span></h1><img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/UML%E8%AF%AD%E6%B3%95.png" class="">

<hr>
<p>参考:<a href="https://www.cnblogs.com/jiangds/p/6596595.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiangds/p/6596595.html</a></p>
]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>UML（第二章：统一建模语言UML概述）</title>
    <url>/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80UML%E6%A6%82%E8%BF%B0%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/03/21/UML（第二章：统一建模语言UML概述）/#1"><strong>2.1 UML概述</strong></a></p>
<p><a href="/2020/03/21/UML（第二章：统一建模语言UML概述）/#2"><strong>2.2 UML概述</strong></a></p>
<p><a href="/2020/03/21/UML（第二章：统一建模语言UML概述）/#3"><strong>2.3 UML基本构造块</strong></a></p>
<p><a href="/2020/03/21/UML（第二章：统一建模语言UML概述）/#4"><strong>2.4 UML语义规则</strong></a></p>
<p><a href="/2020/03/21/UML（第二章：统一建模语言UML概述）/#5"><strong>2.5 UML公共机制</strong></a></p>
<p><a href="/2020/03/21/UML（第二章：统一建模语言UML概述）/#6"><strong>2.6 UML视图</strong></a></p>
<p><a href="/2020/03/21/UML（第二章：统一建模语言UML概述）/#7"><strong>2.7 UML2.0</strong></a></p>
</blockquote>
<h2 id="2-1-UML概述"><a href="#2-1-UML概述" class="headerlink" title="2.1 UML概述"></a><span id="1">2.1 UML概述</span></h2><h3 id="2-1-1-UML"><a href="#2-1-1-UML" class="headerlink" title="2.1.1 UML"></a>2.1.1 UML</h3><p>UML是<strong>U</strong>nified <strong>M</strong>odeling<strong>L</strong>anguage（统一建模语言）的首字母缩写词</p>
<p>定义：<font color="red">UML</font>是对软件密集型系统中的<font color="red">制品</font>进行<font color="red">可视化</font>、<font color="red">详细化</font>、<font color="red">构造</font>和<font color="red">文档化</font>的语言</p>
<p><strong>制品：</strong>是指软件开发过程中产生的各种各样的产物，如模型、文档、源代码、测试用例、产品。</p>
<p><strong>可视化：</strong>定义了一系列的图形符号。每个符号都有明确的语义和语法</p>
<p><strong>详细化：</strong>UML所建的模型是精确地、无歧义的、完整的</p>
<p><strong>构造：</strong>UML描述的模型可以映射成编程语言</p>
<p><strong>文档化：</strong>UML提供需求分析、软件系统分析、设计、实现与测试、项目管理等所有环节的规范文档</p>
<h3 id="2-1-2-模型"><a href="#2-1-2-模型" class="headerlink" title="2.1.2 模型"></a>2.1.2 模型</h3><p>模型是为了理解事物而对事物做出的一种抽象，是对事物规范的、无歧义的描述；忽略了非本质的细节。</p>
<p>模型可以帮助人们思考问题、定义术语，在选择术语时做出适当的假设，并帮助人们保持定义和假设的一致性。</p>
<a id="more"></a>

<h3 id="2-1-3-模型分类"><a href="#2-1-3-模型分类" class="headerlink" title="2.1.3 模型分类"></a>2.1.3 模型分类</h3><p><strong>数学模型</strong>：描述系统技术方面的一系列公式，用来精确表示系统的某些特征。例如，导数公式。</p>
<p><strong>描述模型</strong>：描述系统某些方面的叙述性的备忘录、报表或列表。例如，自然语言的需求报告</p>
<p><strong>图形模型</strong>：由一组图形符号和组织这些符号的规则组成，利用他们来定义和描述问题域中的概念和术语。例如，上述的用例图</p>
<h3 id="2-1-4模型作用"><a href="#2-1-4模型作用" class="headerlink" title="2.1.4模型作用"></a>2.1.4模型作用</h3><p>（1）精确捕获需求，使各方面的利益相关者能够理解并达成一致</p>
<p>（2）便于用户和各个领域的专家审查</p>
<p>（3）降低系统的复杂度</p>
<p>（4）提高开发效率和质量</p>
<p>（5）作为维护和升级的支撑文档</p>
<h3 id="2-1-5-建模目的"><a href="#2-1-5-建模目的" class="headerlink" title="2.1.5 建模目的"></a>2.1.5 建模目的</h3><p>（1）更好的理解问题</p>
<p>（2）加强人员之间的沟通</p>
<p>（3）更早地发现错误或疏漏的地方</p>
<p>（4）获得设计结果</p>
<p>（5）为最后的代码生成提供依据</p>
<h3 id="2-1-6-建模原则"><a href="#2-1-6-建模原则" class="headerlink" title="2.1.6 建模原则"></a>2.1.6 建模原则</h3><p><strong>准确原则</strong>：必须准确反映软件系统的真实情况。</p>
<p><strong>分层原则</strong>：建模需要不同的模型以反映系统的不同侧面。</p>
<p><strong>分治原则</strong>：把问题分解为不同的子问题，分别处理。</p>
<p><strong>标准原则</strong>：模型必须在某种程度上是通用的。</p>
<h3 id="2-1-7-UML的特点"><a href="#2-1-7-UML的特点" class="headerlink" title="2.1.7 UML的特点"></a>2.1.7 UML的特点</h3><p>（1）统一的标准</p>
<p>（2）面向对象</p>
<p>（3）可视化</p>
<p>（4）独立于过程</p>
<p>（5）概念明确</p>
<h2 id="2-2-UML的概念模型"><a href="#2-2-UML的概念模型" class="headerlink" title="2.2 UML的概念模型"></a><span id="2">2.2 UML的概念模型</span></h2><img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80UML%E6%A6%82%E8%BF%B0%EF%BC%89/%E5%9B%BE%E7%89%871.png" class="">

<p><strong>UML概念模型3要素：</strong></p>
<p>（1）UML的<strong>基本构造块</strong></p>
<p>（2）支配这些构造块如何放在一起的<strong>语言规则</strong></p>
<p>（3）运用于整个UML的<strong>公共机制</strong></p>
<h2 id="2-3-UML的基本构造块"><a href="#2-3-UML的基本构造块" class="headerlink" title="2.3 UML的基本构造块"></a><span id="3">2.3 UML的基本构造块</span></h2><img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80UML%E6%A6%82%E8%BF%B0%EF%BC%89/%E5%9B%BE%E7%89%872.png" class="">

<h3 id="2-3-1-事物"><a href="#2-3-1-事物" class="headerlink" title="2.3.1 事物"></a>2.3.1 事物</h3><p><strong>事物</strong>表达模型中的某个概念，是对模型中首要成分的抽象，分为 结构事物、行为事物、分组事物、注释事物。</p>
<blockquote>
<p><strong>结构事物：</strong>是UML模型中的名词，它们通常是模型的静态部分，描述概念元素或物理元素。结构事物总称为类目classifier)</p>
<p>如：（1）类 （2）接口（3）协作（4）用例（5）主动类、组件、制品（6）节点</p>
</blockquote>
<blockquote>
<p><strong>行为事物：</strong>是UML模型中的动词，它们通常是模型的动态部分，描述跨越时间和空间的行为。</p>
<p>如：（1）交互（2）状态机（3）活动</p>
</blockquote>
<blockquote>
<p><strong>分组事物：</strong>是UML模型的组织部分</p>
<p>如：（包）</p>
</blockquote>
<blockquote>
<p><strong>注释事物：</strong>是UML模型的解释部分，用来描述、说明和标注模型的任何元素。</p>
<p>注解：它给建模者提供依附于元素之上的信息的文本说明，但没有语义作用</p>
</blockquote>
<h3 id="2-3-2-关系"><a href="#2-3-2-关系" class="headerlink" title="2.3.2 关系"></a>2.3.2 关系</h3><p><strong>关系</strong>把事物结合在一起，表达事物之间的相互连接。分为 依赖关系、关联关系、泛化关系、实现关系。</p>
<blockquote>
<p><strong>依赖关系：</strong>是一种使用关系，说明一个事物使用另一个事物的信息和服务</p>
<p>反映了两个模型元素的语义关系，一个元素发生变化会影响另一个元素的语义。</p>
</blockquote>
<blockquote>
<p><strong>关联关系：</strong>是一种结构关系，说明一个事物的实例与另一个事物的实例间的静态联系</p>
<p>如：读者、书籍、管理员三个类之间建立关联关系</p>
</blockquote>
<blockquote>
<p><strong>泛化关系：</strong>是一般事物（称为超类或父类）和该事物的较为特殊的种类（称为子类）之间的继承关系</p>
<p>子类继承父类的属性和操作，除此之外，子类还添加新的属性和操作</p>
</blockquote>
<blockquote>
<p><strong>实现关系：</strong>是事物之间的语义关系，说明一个事物提供了另一个事物的功能契约的实现</p>
<p>在两种地方会遇到实现关系：</p>
<p>一种是在接口和实现它们的类或构件之间；另一种是在用例和实现它们的协作之间。</p>
</blockquote>
<h3 id="2-3-3-图"><a href="#2-3-3-图" class="headerlink" title="2.3.3 图"></a>2.3.3 图</h3><p><font color="red">模型</font>通常作为一组<font color="red">图</font>呈现出来，图将<font color="red">事物和关系</font>聚集在一起</p>
<p><strong>十种类型的图：</strong></p>
<p><strong>用例图，类图，对象图，组件图，部署图，顺序图，协作图，状态图，活动图，包图</strong></p>
<hr>
<p><font color="green">关于<strong>UML的10种图</strong>的详情→<a href="https://www.blogzhy.top/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A9%E9%92%9F%E5%9B%BE-%E5%8C%85%E5%9B%BE%EF%BC%89/">点我跳转</a></font></p>
<hr>
<h2 id="2-4-UML语义规则"><a href="#2-4-UML语义规则" class="headerlink" title="2.4 UML语义规则"></a><span id="4">2.4 UML语义规则</span></h2><p><strong>UML</strong>模型图必须按特定的规则有机地组成合法的UML图，形成结构良好的模型。</p>
<p>结构良好的模型在语义上自我一致，并且与所有的相关模型协调一致。</p>
<blockquote>
<p><font color="red"><strong>名字：</strong></font>任何UML成员（事物、关系、图）都必须有一个名字</p>
<p><font color="red"><strong>作用域（范围）：</strong></font>UML成员所定义的内容起作用的上下文环境，分<font color="red"><strong>对象级别</strong></font>和<font color="red"><strong>类级别</strong></font></p>
<p><font color="red"><strong>可见性：</strong></font>UML成员能背其他成员引用的方式</p>
<p><font color="red"><strong>完整性：</strong></font>UML成员之间相互连接的合法性和一致性</p>
<p><font color="red"><strong>可执行性：</strong></font>UML成员在运行时的特性</p>
</blockquote>
<h2 id="2-5-UML公共机制"><a href="#2-5-UML公共机制" class="headerlink" title="2.5 UML公共机制"></a><span id="5">2.5 UML公共机制</span></h2><p>UML图中的模型元素，还要按一定的要求进行详细的说明和解释，为图加上说明规范的方式构成完整的模型。</p>
<p>UML使用贯穿整个语言且一致应用的公共机制为图附加一些信息。</p>
<blockquote>
<p><font color="red"><strong>规范说明：</strong></font>提供了对构造块的语法和语义的文字叙述</p>
<p><font color="red"><strong>修饰：</strong></font>为模型元素附加一定的语义</p>
<p><font color="red"><strong>公共划分：</strong></font>对UML的很多构造块进行二分法划分，一者说明抽象，另一者说明具体细节。</p>
<p>三种划分：1.类和对象的划分 2.接口与实现的划分 3.类型和角色的划分</p>
<p><font color="red"><strong>扩展机制：</strong></font>UML提供了扩充其表达内容的范围的能力，以描述各种新出现的事物。</p>
<p>三种类型：</p>
<p>1.构造型：也称版型，扩展了UML的词汇，可以用来创造新的构造块</p>
<p>2.标记值：扩展了UML构造型的特性，可以用来创建构造型的规范说明的新信息</p>
<p>3.约束：扩展了UML构造块的语义，可以用来增加新的规则或修改现有的规则</p>
</blockquote>
<h2 id="2-6-UML视图"><a href="#2-6-UML视图" class="headerlink" title="2.6 UML视图"></a><span id="6">2.6 UML视图</span></h2><p>对于复杂系统建模，需要从多个不同的方面来描述</p>
<p>因为各种人员——最终用户、分析人员、开发人员、系统集成人员、测试人员、技术资料作者和项目管理者，各自带着项目的不同日程，在项目的生命周期内各自在不同的时间、以不同的方式来看系统（视角不同）</p>
<p><font color="red">视图</font>代表在一个特定的方面对系统的组织和结构进行的投影，视图又由一种或多种模型图构成。</p>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80UML%E6%A6%82%E8%BF%B0%EF%BC%89/%E8%A7%86%E5%9B%BE.png" class="">

<h3 id="2-6-1-用例视图"><a href="#2-6-1-用例视图" class="headerlink" title="2.6.1 用例视图"></a>2.6.1 用例视图</h3><p>用例视图主要描述一个系统应该具备的功能，指的是从系统的外部参与者所能看到的系统功能。用例表示的是系统的一个功能单元，可以被描述为参与者与系统之间的一次交互作用。</p>
<p>用例模型的用途主要是列举出系统中的用例和参与者，并指出哪个参与者参与了哪个用例的执行。用例视图是其他4种视图的核心，它的内容直接驱动其他视图的开发。</p>
<h3 id="2-6-2-逻辑视图（设计视图）"><a href="#2-6-2-逻辑视图（设计视图）" class="headerlink" title="2.6.2 逻辑视图（设计视图）"></a>2.6.2 逻辑视图（设计视图）</h3><p>逻辑视图主要用于描述在用例视图中提出的系统功能的实现。逻辑视图主要关注系统的内部，它既描述系统的静态结构（系统中的类、对象以及他们之间的关系），也描述系统的动态协作关系。</p>
<p>逻辑视图的使用者主要是系统的设计人员和开发人员。</p>
<h3 id="2-6-3-进程视图"><a href="#2-6-3-进程视图" class="headerlink" title="2.6.3 进程视图"></a>2.6.3 进程视图</h3><p>进程视图描述给定时刻系统中不同的执行进程，说明系统中并发执行和同步的情况。进程视图的焦点是通过性能、可伸缩性和吞吐量来评价进程的执行。</p>
<h3 id="2-6-4-实现视图（构件视图）"><a href="#2-6-4-实现视图（构件视图）" class="headerlink" title="2.6.4 实现视图（构件视图）"></a>2.6.4 实现视图（构件视图）</h3><p>实现视图用来说明代码的结构，描述的是一个软件系统的各个物理部件，这些物理部件以各种方式组合起来，构成一个可实际运行的系统。</p>
<h3 id="2-6-5-部署视图（拓扑视图）"><a href="#2-6-5-部署视图（拓扑视图）" class="headerlink" title="2.6.5 部署视图（拓扑视图）"></a>2.6.5 部署视图（拓扑视图）</h3><p>部署视图，也称之为配置视图。配置视图主要显示系统的物理部署，它描述位于节点上的运行实例的部署情况。配置视图主要由配置图表示，配置视图还允许评估分配结果和资源分配。</p>
<p>配置视图的使用者是开发人员、系统集成人员和测试人员。</p>
<hr>
<table>
<thead>
<tr>
<th></th>
<th>最终用户</th>
<th>分析人员</th>
<th>开发人员</th>
<th>系统集成人员</th>
<th>测试人员</th>
<th>项目管理者</th>
</tr>
</thead>
<tbody><tr>
<td>用例视图</td>
<td>1</td>
<td></td>
<td>1</td>
<td></td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>逻辑视图</td>
<td></td>
<td>1</td>
<td>1</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>进程视图</td>
<td></td>
<td>1</td>
<td>1</td>
<td>1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>实现视图</td>
<td>1</td>
<td></td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>部署视图</td>
<td>1</td>
<td></td>
<td>1</td>
<td>1</td>
<td>1</td>
<td></td>
</tr>
</tbody></table>
<img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80UML%E6%A6%82%E8%BF%B0%EF%BC%89/1.png" class="">

<h2 id="2-7-UML-2-0"><a href="#2-7-UML-2-0" class="headerlink" title="2.7 UML 2.0"></a><span id="7">2.7 UML 2.0</span></h2><img src="/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80UML%E6%A6%82%E8%BF%B0%EF%BC%89/UML2.png" class="">

<table>
<thead>
<tr>
<th>图名</th>
<th>目的</th>
<th>联系</th>
</tr>
</thead>
<tbody><tr>
<td>活动（activity）</td>
<td>过程行为与平行行为</td>
<td>UML1.x中有</td>
</tr>
<tr>
<td>类（class）</td>
<td>类、特征与关系</td>
<td>UML1.x中有</td>
</tr>
<tr>
<td>通信（communication）</td>
<td>对象间交互，着重连接</td>
<td>UML1.x中协作图</td>
</tr>
<tr>
<td>构件（component）</td>
<td>构件的结构和连接</td>
<td>UML1.x中有</td>
</tr>
<tr>
<td>复合结构（composite  structure）</td>
<td>类的运行时刻分解</td>
<td>UML2.0的新图</td>
</tr>
<tr>
<td>部署（development）</td>
<td>制品在结点上的配置</td>
<td>UML1.x中有</td>
</tr>
<tr>
<td>交互概观（interactive  overview）</td>
<td>顺序图和活动图的混合</td>
<td>UML2.0的新图</td>
</tr>
<tr>
<td>对象（object）</td>
<td>类的实例</td>
<td>UML1.x中非正式图</td>
</tr>
<tr>
<td>包（package）</td>
<td>编译时刻层次结构</td>
<td>UML1.x中非正式图</td>
</tr>
<tr>
<td>顺序（sequence）</td>
<td>对象间交互，着重顺序</td>
<td>UML1.x中有</td>
</tr>
<tr>
<td>状态机（state  machine）</td>
<td>事件如何改变生命期中对象</td>
<td>UML1.x中有</td>
</tr>
<tr>
<td>定时（timing）</td>
<td>对象间交互，着重定时</td>
<td>UML2.0的新图</td>
</tr>
<tr>
<td>用例（use  case）</td>
<td>用户在系统中如何交互</td>
<td>UML1.x中有</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>UML（第一章：面向对象技术概述）</title>
    <url>/2020/03/21/UML%EF%BC%88%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%8A%80%E6%9C%AF%E6%A6%82%E8%BF%B0%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-1-结构化方法和面向对象方法"><a href="#1-1-结构化方法和面向对象方法" class="headerlink" title="1.1 结构化方法和面向对象方法"></a>1.1 结构化方法和面向对象方法</h2><p><strong>分析建模：</strong>是软件开发过程的一个组成部分，主要目的是系统地提出问题域的模型。（做什么？）</p>
<p><strong>设计建模：</strong>主要目的是确定设计策略和方法以满足系统的功能要求和质量要求。（怎么做？）</p>
<p><strong>系统模型需要的3种不同的建模视图：</strong></p>
<blockquote>
<p><strong>1.数据建模（对象模型）：</strong>主要回答与任何数据处理应用相关的一组特定问题。</p>
<p><strong>2.功能建模：</strong>通过信息流的变化来展示系统的功能。</p>
<p><strong>3.行为建模：</strong>指需求分析方法中可操作性原则——它通过状态描述和导致系统改变状态的事件来显示系统的行为。</p>
</blockquote>
<p><strong>系统模型的2种技术：</strong></p>
<blockquote>
<p><strong>1.结构化方法（SA）</strong>侧重对系统进行功能分解。使用图标和文字在不同的抽象层次上描述系统。</p>
<p>适用于：1.客户对它们的需求非常明确    2.业务过程定义得非常好，不会经常改动</p>
</blockquote>
<blockquote>
<p><strong>2.面向对象方法（OOA）</strong>以对象为中心，侧重于从现实对象的角度出发去研究和理解问题，在分析阶段完全不考虑具体实现的细节。</p>
<p>适用于：1.软件将用面向对象的语言来编程    2.客户需求陈述不清楚    3.从过去的经验中得知，客户会频繁地要求增加新功能    4.要开发的系统很复杂    5.其规律受业务性质控制</p>
</blockquote>
<a id="more"></a>

<h2 id="1-2-面向对象的基本概念和术语"><a href="#1-2-面向对象的基本概念和术语" class="headerlink" title="1.2 面向对象的基本概念和术语"></a>1.2 面向对象的基本概念和术语</h2><p><strong><font color="red">面向对象=对象+分类+继承+消息通信</font></strong></p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象是系统用来描述客观事物的一个<strong>实体</strong>，是用来构成系统的一个基本单位。</p>
<p><strong>对象=属性+操作</strong></p>
<p>属性：用来描述对象的静态特征</p>
<p>操作：用来描述对象的动态特征</p>
<h3 id="类（分类）"><a href="#类（分类）" class="headerlink" title="类（分类）"></a>类（分类）</h3><p>分类所依据的原则——抽象</p>
<p>一个属于某<strong>类</strong>的<strong>对象</strong>成为该类的一个<font color="red">实例</font>。</p>
<p>面向对象中的类：</p>
<p>​    1.一类或者一组具有类似属性的共同操作的事物</p>
<p>​    2.为属于该类的全部对象提供了抽象描述，包括属性和操作两个主要部分</p>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装是把对象的属性和行为组成一个独立的系统单位，并尽可能隐藏对象的内部细节。</p>
<p>1.把对象的全部属性和行为结合在一起，形成一个不可分割的独立单位。</p>
<p>2.信息隐藏，即尽可能隐藏对象的内部细节，对外形成一个边界或屏障，只保留有限地对外接口使之与外部发生联系。</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承（Inheritance）是一种一般类与特殊类的层次模型。继承性是指特殊类的对象具有其一般类的属性和方法，在其之上又增加了自己的特殊属性和方法。</p>
<p><font color="red">子类：</font>指的是通过继承创建的新类称为“子类” 或者“派生类”</p>
<p><font color="red">父类：</font>指的是被继承的类称为“基类”、“ 父类” 或“ 超类”</p>
<h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><p>多态性是指在一般类中的定义的属性或行为，被特殊类继承后，可以具有不同的数据类型或表现出不同的行为。</p>
<h3 id="消息通信"><a href="#消息通信" class="headerlink" title="消息通信"></a>消息通信</h3><p>消息是对象间唯一的动态联系方式。</p>
<p>消息传递是对象间通信的手段，一个对象通过向另一个对象发送消息来请求其服务。</p>
<p>一个<font color="red">消息</font>通常包括接收的<font color="red">对象名、调用的操作和相应的参数</font></p>
<h2 id="1-3-面向对象的软件开发"><a href="#1-3-面向对象的软件开发" class="headerlink" title="1.3 面向对象的软件开发"></a>1.3 面向对象的软件开发</h2><p><strong>面向对象的分析（OOA）</strong></p>
<p><strong>面向对象的设计（OOD）</strong></p>
<p><strong>面向对象的编程（OOP）</strong></p>
<p><strong>面向对象的测试（OOT）</strong></p>
<p><strong>面向对象的维护（OOSM）</strong></p>
<h2 id="1-4-面向对象方法的优点"><a href="#1-4-面向对象方法的优点" class="headerlink" title="1.4 面向对象方法的优点"></a>1.4 面向对象方法的优点</h2><p><strong>优点:</strong></p>
<p>（1）<strong>对软件质量的支持：</strong>正确性、灵活性及可靠性（健壮性）、可维护性与可扩展性、可重用性及通用性、互操作性、效率、可移植性、可验证性、安全性、友善性、可描述性及可理解性</p>
<p>（2）<strong>对模块性的支持：</strong>可分解性、组合性、可理解性、连续性和保护性</p>
<p>（3）<strong>对软件开发过程的支持：</strong>能适应需求变化、灵活、可扩展、重用</p>
<p><font color="red">封装+继承+标识=可重用+可扩展+丰富的语义</font></p>
]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>软件项目管理（第二章：组织环境与项目管理过程）</title>
    <url>/2020/03/20/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E7%BB%87%E7%8E%AF%E5%A2%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%BF%87%E7%A8%8B%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/03/20/软件项目管理（%20第二章：组织环境与项目管理过程）/#2.1"><strong>2.1 IT项目管理的环境</strong></a></p>
<p>​    <a href="/2020/03/20/软件项目管理（%20第二章：组织环境与项目管理过程）/#2.1.1"><em>2.1.1 项目环境</em></a></p>
<p>​    <a href="/2020/03/20/软件项目管理（%20第二章：组织环境与项目管理过程）/#2.1.2"><em>2.1.2 项目与组织战略</em></a></p>
<p>​    <a href="/2020/03/20/软件项目管理（%20第二章：组织环境与项目管理过程）/#2.1.3"><em>2.1.3 项目相关利益者主要包括的以下方面</em></a></p>
<p>​    <a href="/2020/03/20/软件项目管理（%20第二章：组织环境与项目管理过程）/#2.1.4"><em>2.1.4 组织结构</em></a></p>
<p><a href="/2020/03/20/软件项目管理（%20第二章：组织环境与项目管理过程）/#2.2"><strong>2.2 IT项目生命周期</strong></a></p>
<p>​    <a href="/2020/03/20/软件项目管理（%20第二章：组织环境与项目管理过程）/#2.2.1"><em>2.2.1 生命周期</em></a></p>
<p>​    <a href="/2020/03/20/软件项目管理（%20第二章：组织环境与项目管理过程）/#2.2.2"><em>2.2.2 IT项目各阶段内容</em></a></p>
<p><a href="/2020/03/20/软件项目管理（%20第二章：组织环境与项目管理过程）/#2.3"><strong>2.3 IT项目的管理过程</strong></a></p>
<p>​    <a href="/2020/03/20/软件项目管理（%20第二章：组织环境与项目管理过程）/#2.3.1"><em>2.3.1 项目管理过程</em></a></p>
<p>​    <a href="/2020/03/20/软件项目管理（%20第二章：组织环境与项目管理过程）/#2.3.2"><em>2.3.2 IT项目的管理过程</em></a></p>
<p><a href="/2020/03/20/软件项目管理（%20第二章：组织环境与项目管理过程）/#2.4"><strong>2.4 项目经理的责任和权利</strong></a></p>
<p>​    <a href="/2020/03/20/软件项目管理（%20第二章：组织环境与项目管理过程）/#2.4.1"><em>2.4.1 项目经理的地位和作用</em></a></p>
<p>​    <a href="/2020/03/20/软件项目管理（%20第二章：组织环境与项目管理过程）/#2.4.2"><em>2.4.2 项目经理的职责</em></a></p>
<p>​    <a href="/2020/03/20/软件项目管理（%20第二章：组织环境与项目管理过程）/#2.4.3"><em>2.4.3 项目经理的权力</em></a></p>
<p>​    <a href="/2020/03/20/软件项目管理（%20第二章：组织环境与项目管理过程）/#2.4.4"><em>2.4.4 项目经理的能力</em></a></p>
<p><a href="/2020/03/20/软件项目管理（%20第二章：组织环境与项目管理过程）/#2.5"><strong>2.5 作业</strong></a></p>
</blockquote>
<hr>
<h2 id="2-1-IT项目管理的环境"><a href="#2-1-IT项目管理的环境" class="headerlink" title="2.1 IT项目管理的环境"></a><span id="2.1">2.1 IT项目管理的环境</span></h2><h3 id="2-1-1-项目环境："><a href="#2-1-1-项目环境：" class="headerlink" title="2.1.1 项目环境："></a><span id="2.1.1">2.1.1 项目环境：</span></h3><p>​    1.经济环境对IT项目的影响</p>
<p>​    2.社会人文、政策法律对IT项目的影响</p>
<p>​    3.企业文化对IT项目的影响</p>
<a id="more"></a>

<p><strong>适合项目的组织文化具有的特征：</strong></p>
<p>​    1.成员认同 2.强调群体 3.关注员工 4.单位整合 5.控制</p>
<p>​    6.风险容忍 7.奖励标准 8.冲突容忍 9.工程与结果导向 10.基于开放的系统</p>
<h3 id="2-1-2-项目与组织战略："><a href="#2-1-2-项目与组织战略：" class="headerlink" title="2.1.2 项目与组织战略："></a><span id="2.1.2">2.1.2 项目与组织战略：</span></h3><p>​    1.战略是企业项目选择的基础</p>
<p>​    2.战略是企业组和项目资源分配的基础</p>
<p>​    3.战略是企业项目管理过程中做出正确决策的基础</p>
<h3 id="2-1-3-项目相关利益者主要包括的以下方面："><a href="#2-1-3-项目相关利益者主要包括的以下方面：" class="headerlink" title="2.1.3 项目相关利益者主要包括的以下方面："></a><span id="2.1.3">2.1.3 项目相关利益者主要包括的以下方面：</span></h3><p>​    1.项目业主    2.项目客户    3.项目经理</p>
<p>​    4.项目实施组织    5.项目团队    6.其他相关利益主题</p>
<!-- more -->

<h3 id="2-1-4-组织结构"><a href="#2-1-4-组织结构" class="headerlink" title="2.1.4 组织结构"></a><span id="2.1.4">2.1.4 组织结构</span></h3><h4 id="1-职能型组织："><a href="#1-职能型组织：" class="headerlink" title="1.职能型组织："></a>1.职能型组织：</h4><img src="/2020/03/20/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E7%BB%87%E7%8E%AF%E5%A2%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%BF%87%E7%A8%8B%EF%BC%89/1.png" class="">

<blockquote>
<p><strong>优点：</strong></p>
<p>​    1.在人员使用上具有较大的灵活性</p>
<p>​    2.技术专家可以同时为几个项目服务</p>
<p>​    3.同一部门的专业人员在一起易于交流知识和经验，这可使项目获得部门内所有的知识和技术支持，对创造性地解决项目的技术问题非常有利</p>
<p>​    4.当有成员离开项目组时，职能部门可作为保持项目技术连续性的基础</p>
<p>​    5.职能部门可以为本部门的专业人员提供一条正常的晋升途径</p>
<p><strong>缺点：</strong></p>
<p>​    1.这种组织结构使得<font color="red">客户不是活动和关心的焦点</font></p>
<p>​    2.这种结构导致<font color="red">没有一个人承担项目的全部责任</font></p>
<p>​    3.项目常常<font color="red">得不到很好的支持</font></p>
<p>​    4.调配给项目的人员其积极性往往不是很高，也不把项目看成是他的主要工作</p>
<p>​    5.技术复杂的项目通常需要多个职能部门的共同合作，但他们往往更注重本领域，而忽略整个项目的目标，并且<font color="red">跨部门的交流沟通也比较困</font></p>
</blockquote>
<h4 id="2-项目型组织："><a href="#2-项目型组织：" class="headerlink" title="2.项目型组织："></a>2.项目型组织：</h4><img src="/2020/03/20/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E7%BB%87%E7%8E%AF%E5%A2%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%BF%87%E7%A8%8B%EF%BC%89/2.png" class="">

<blockquote>
<p><strong>优点：</strong></p>
<p>​    1.项目经理有<font color="red">充分的权力</font>调动项目内外资源，对项目全权负责</p>
<p>​    2.权力的集中使<font color="red">决策的速度可以加快</font>，整个项目的目标单一，项目组能够对客户的需要做出<font color="red">更快的响应</font>。在进度、成本、质量等方面的<font color="red">控制也较为灵活</font></p>
<p>​    3.这种结构有利于使命令协调一致，每个成员只有一个领导，<font color="red">排除了多重领导的可能</font></p>
<p>​    4.项目组内部的沟通更加顺畅、快捷</p>
<p><strong>缺点：</strong></p>
<p>​    1.由于项目组对资源具有独占的权力，在项目与项目之间的<font color="red">资源共享</font>方面会存在一些问题，可能在成本方面效率低下</p>
<p>​    2.项目经理与项目成员之间有着很强的依赖关系，而与项目外的其他部门之间的沟通比较困难</p>
<p>​    3.在相对封闭的项目环境中，容易造成对公司的<font color="red">规章制度执行的不一致</font></p>
<p>​    4.项目成员<font color="red">缺乏归属感</font>，不利于职业生涯的发展</p>
</blockquote>
<h4 id="3-矩阵型组"><a href="#3-矩阵型组" class="headerlink" title="3.矩阵型组"></a>3.矩阵型组</h4><img src="/2020/03/20/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E7%BB%87%E7%8E%AF%E5%A2%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%BF%87%E7%A8%8B%EF%BC%89/3.png" class="">

<blockquote>
<p><strong>优点：</strong></p>
<p>​    1.项目是工作的重点，项目经理负责管理整个项目，矩阵型组织具有项目型组织的长处</p>
<p>​    2.可以有效地利用资源，项目可以分享各个部门的技术、人才和设备</p>
<p>​    3.这种结构更加注重客户的需求和促进项目成员之间的学习和知识交流</p>
<p><strong>缺点：</strong></p>
<p>​    1.矩阵型组织通常是多个或多重领导，存在双层或多层汇报关系</p>
<p>​    2.多个项目在进度、费用和质量方面能够取得平衡，这既是矩阵型组织的优点也是它的缺点</p>
<p>​    3.许多因素使矩阵项目团队非常难以管理</p>
</blockquote>
<h4 id="4-微软公司的软件开发组织"><a href="#4-微软公司的软件开发组织" class="headerlink" title="4.微软公司的软件开发组织"></a>4.微软公司的软件开发组织</h4><img src="/2020/03/20/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E7%BB%87%E7%8E%AF%E5%A2%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%BF%87%E7%A8%8B%EF%BC%89/4.png" class="">

<blockquote>
<p><strong>特点：</strong></p>
<p>​    1.采用小型的、多元化的项目组织模式，具有交流和管理成本低、决策和执行速度快、产品质量易于控制等特点</p>
<p>​    2.项目组内部，将开发人员明确划分成产品管理、程序管理、软件开发、软件测试、用户体验、发布管理等不同角色，每个角色完成特定的职能，并通过对等团队的结构实现整个项目的目标</p>
<p>​    3.要求开发人员在各自的领域里具有专深的技术水平和业务技能，确保项目团队能够采用合适的技术进行产品开发，并保证产品的性能和质量</p>
<p>​    4.项目成员具有强烈的产品意识，所有工作以按时发布高质量的产品为中心，在这样的组织中，每个成员都可以感觉到自己对最终的产品发布负有重要的责任</p>
<p>​    5.项目团队拥有明确的项目目标，客户积极参与产品的设计，整个开发工作始终和客户的业务需求保持一致</p>
<p>​    6.项目团队的所有成员在同一楼层或同一间办公室里工作，从而保证了相当多的非正式交流机会，成员之间的人际关系也得到改善</p>
<p>​    7.对于大型软件开发项目，需要<font color="red">将大型项目组拆分成多个小型项目组</font>，并按照小型项目组的管理原则进行管理，使大型项目在运作方式上类似于小型项目，保证其具备沟通便捷、生产效率高的优势</p>
</blockquote>
<hr>
<h2 id="2-2-IT项目生命周期"><a href="#2-2-IT项目生命周期" class="headerlink" title="2.2 IT项目生命周期"></a><span id="2.2">2.2 IT项目生命周期</span></h2><h3 id="2-2-1-生命周期"><a href="#2-2-1-生命周期" class="headerlink" title="2.2.1 生命周期"></a><span id="2.2.1">2.2.1 生命周期</span></h3><p><strong>1.项目生命周期：</strong></p>
<p>​    组织在实施项目时，通常会将每个项目分解为几个项目阶段，以便更好地管理和控制项目。</p>
<p>​    项目的各个阶段构成了项目的整个生命周期。</p>
<p><strong>2.项目生命周期中的重要概念：</strong></p>
<p>​    （1）<font color="red">检查点</font>：是指在规定的时间间隔内对项目进行检查，比较实际与计划之间的差异，并根据差异进行调整。</p>
<p>​    （2）<font color="red">里程碑</font>：里程碑是项目中完成阶段性工作的标志。</p>
<p><strong>3.IT项目生命周期的特殊性：</strong></p>
<p>​        在传统的项目管理中，项目收尾阶段所花费的时间可能较短，随着目标的实现，最终成果的移交，项目合同即告终止</p>
<p>​        但随着开发方之间竞争的加剧，以及IT项目的特点，这一阶段的<font color="red">时间跨度有明显延长的趋势，而且在人力等方面的投入也开始增多</font></p>
<p>​        这是因为客户在验收新项目之后，在技术、管理人才等方面比较匮乏，这有赖于开发方的协助，需要帮助其培养人才和系统的试运行，所有这些都是现代项目管理以客户为中心新理念的具体体现</p>
<p>​         另外，IT项目生命周期的特殊性还体现在：</p>
<p>​            第一，IT项目往往在正式立项之前，就已经投入了力量，对待建设的系统进行初步需求分析，然后才能进行项目立项；</p>
<p>​            第二，收尾工作包括了评估、推广和维护3个部分，而且延续时间较长</p>
<h3 id="2-2-2-IT项目各阶段内容"><a href="#2-2-2-IT项目各阶段内容" class="headerlink" title="2.2.2 IT项目各阶段内容"></a><span id="2.2.2">2.2.2 IT项目各阶段内容</span></h3><p><strong>IT项目前期：</strong></p>
<p>（1）IT项目需求分析</p>
<p>（2）IT项目定义</p>
<p>（3）IT项目可行性研究</p>
<p>（4）IT项目可行性研究报告评审</p>
<p><strong>IT项目建设期：</strong></p>
<p>（1）IT项目委托监理</p>
<p>（2）IT项目设计：1.总体(概要)设计 2.招标设计 3.技术设计 4.详细设计</p>
<p>（3）IT项目实施招标</p>
<p>（4）IT项目实施前准备</p>
<p>（5）IT项目实施</p>
<p>（6）IT项目测试</p>
<p>（7）IT项目验收</p>
<p><strong>IT项目运营期：</strong></p>
<p>（1）IT项目运营维护</p>
<p>（2）IT项目后评价</p>
<img src="/2020/03/20/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E7%BB%87%E7%8E%AF%E5%A2%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%BF%87%E7%A8%8B%EF%BC%89/5.png" class="">

<h2 id="2-3-IT项目的管理过程"><a href="#2-3-IT项目的管理过程" class="headerlink" title="2.3 IT项目的管理过程"></a><span id="2.3">2.3 IT项目的管理过程</span></h2><h3 id="2-3-1-项目管理过程"><a href="#2-3-1-项目管理过程" class="headerlink" title="2.3.1 项目管理过程"></a><span id="2.3.1">2.3.1 项目管理过程</span></h3><p>​    项目过程是指项目生命期内产生某种结果的行动序列，包括<font color="red">实现过程</font>和<font color="red">管理过程</font>两类。</p>
<img src="/2020/03/20/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E7%BB%87%E7%8E%AF%E5%A2%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%BF%87%E7%A8%8B%EF%BC%89/6.png" class="">

<p><strong>1.项目启动：</strong>启动过程是识别和启动一个新项目或项目新阶段的过程。</p>
<p><strong>2.项目规划：</strong>该阶段是为实现启动阶段提出的目标而制订计划的过程。</p>
<p><strong>3.项目执行与监控：</strong>一旦建立了项目的基准计划，就必须按照计划执行，这包括按计划执行项目和控制项目，以使项目在预算内、按进度、使顾客满意地完成。具体包括：</p>
<p>（1）项目实施工作的开展 </p>
<p>（2）项目实施中的指挥、调度与协调 </p>
<p>（3）项目实施工作的绩效度量与报告</p>
<p>（4）项目实施中的纠偏行动</p>
<p><strong>4.项目收尾：</strong>项目的最后环节就是项目的结束过程。</p>
<h3 id="2-3-2-IT项目的管理过程"><a href="#2-3-2-IT项目的管理过程" class="headerlink" title="2.3.2 IT项目的管理过程"></a><span id="2.3.2">2.3.2 IT项目的管理过程</span></h3><p><font color="red"><strong>1. IT项目立项过程：</strong></font><img src="/2020/03/20/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E7%BB%87%E7%8E%AF%E5%A2%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%BF%87%E7%A8%8B%EF%BC%89/7.png" class=""></p>
<p><font color="red"><strong>2. IT产品研发项目过程：</strong></font><img src="/2020/03/20/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E7%BB%87%E7%8E%AF%E5%A2%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%BF%87%E7%A8%8B%EF%BC%89/8.png" class=""></p>
<p><font color="red"><strong>3. IT应用软件开发项目过程：</strong></font><img src="/2020/03/20/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E7%BB%87%E7%8E%AF%E5%A2%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%BF%87%E7%A8%8B%EF%BC%89/9.png" class=""></p>
<p><font color="red"><strong>4. IT系统集成类项目过程：</strong></font><img src="/2020/03/20/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E7%BB%87%E7%8E%AF%E5%A2%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%BF%87%E7%A8%8B%EF%BC%89/10.png" class=""></p>
<p><font color="red"><strong>5. IT管理咨询项目管理过程：</strong></font><img src="/2020/03/20/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E7%BB%87%E7%8E%AF%E5%A2%83%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%BF%87%E7%A8%8B%EF%BC%89/11.png" class=""></p>
<h2 id="2-4-项目经理的责任和权利"><a href="#2-4-项目经理的责任和权利" class="headerlink" title="2.4 项目经理的责任和权利"></a><span id="2.4">2.4 项目经理的责任和权利</span></h2><h3 id="2-4-1-项目经理的地位和作用"><a href="#2-4-1-项目经理的地位和作用" class="headerlink" title="2.4.1 项目经理的地位和作用"></a><span id="2.4.1">2.4.1 项目经理的地位和作用</span></h3><p><strong>项目经理的工作原则：</strong></p>
<p>​    1.项目经理应该熟悉国际、国内项目承包有关的<font color="red">法律、法规</font>，严格遵守所在国家、地区的法律制度，依法履行公司的义务，并<font color="red">维护公司的权益</font></p>
<p>​    2.项目经理在项目实施中，应注意充分利用公司的人力、技术、管理等<font color="red">各类资源</font>，发挥项目团队的<font color="red">整体优势、整体水平</font>，完成项目<font color="red">开发任务</font></p>
<p>​    3.项目经理在项目实施中，应<font color="red">协调</font>好项目组织与公司各部门以及项目组织内部的力量，尽力实现公司的经营方针和企业规定的项目收益目标</p>
<p>​    4.项目经理要始终掌握项目的进展情况和潜在的问题，把主要精力集中于控制项目的<font color="red">进度、费用</font>，提高工作效率，保证产品质量等重要环节，及时纠正偏差，使项目按计划目标顺利实施</p>
<p>​    5.项目经理要了解<font color="red">客户</font>的要求，提供他们希望的和应得到的各种服务</p>
<p>​    6.项目经理要保持与<font color="red">公司有关部门</font>的信息交流，及时地把有关合同执行情况和客户的意向转达给他们，并及时把项目实施中的重要问题向上级领导汇报，以取得公司领导和主管部门的指导和帮助</p>
<h3 id="2-4-2-项目经理的职责"><a href="#2-4-2-项目经理的职责" class="headerlink" title="2.4.2 项目经理的职责"></a><span id="2.4.2">2.4.2 项目经理的职责</span></h3><p>（1）确保项目目标实现</p>
<p>（2）开发计划</p>
<p>（3）组织实施</p>
<p>（4）项目控制</p>
<h3 id="2-4-3-项目经理的权力"><a href="#2-4-3-项目经理的权力" class="headerlink" title="2.4.3 项目经理的权力"></a><span id="2.4.3">2.4.3 项目经理的权力</span></h3><p>（1）生产指挥权</p>
<p>（2）项目团队的组件权</p>
<p>（3）财政</p>
<p>（4）技术决定权</p>
<h3 id="2-4-4-项目经理的能力"><a href="#2-4-4-项目经理的能力" class="headerlink" title="2.4.4 项目经理的能力"></a><span id="2.4.4">2.4.4 项目经理的能力</span></h3><p>（1）获得项目资源的能力</p>
<p>（2）消除障碍和解决问题的能力</p>
<p>（3）领导能力和权衡能力</p>
<p>（4）沟通能力</p>
<p>（5）管理时间的能力</p>
<p>（6）灵敏性</p>
<h2 id="2-5-作业"><a href="#2-5-作业" class="headerlink" title="2.5 作业"></a><span id="2.5">2.5 作业</span></h2><p><strong>1.在项目中设立里程碑有哪些好处？</strong></p>
<p>​    答：</p>
<p>​            1.帮助同步工作成果 </p>
<p>​            2.使项目团队外的人员也能看到项目进展情况和质量情况 </p>
<p>​            3.可在项目进行中纠正偏差 </p>
<p>​            4.着重于评审项目目标和交付成果 </p>
<p>​            5.增加阶段性的审批环节，只有在审核通过后，才进入下一个阶段</p>
<p><strong>2.为什么项目经理应该是一个通才而不应是一个技术专家？</strong></p>
<p>​    答：现代项目经理是项目管理的中心。项目经理的素质对项目管理的绩效举足轻重。项目经理的素质是指项目负责人应具备的各种个人条件在质量上的一种综合，由个人的品格素质、能力素质、知识素质三大要素组成。一个人在这三种素质方面的状态，决定了他能否成为一名合格的项目经理。项目经理应掌握项目管理学、技术经济学、企业领导学等知识。项目经理应该是具有一定知识广度的“杂家”，他应在实践中不断深化和完善自己的知识结构。</p>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>软件项目管理（ 第一章：IT项目管理概述）</title>
    <url>/2020/03/20/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%20%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E6%A6%82%E8%BF%B0%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="/2020/03/20/软件项目管理（%20第一章：IT项目管理概述）/#1.1"><strong>1.1 项目的概念</strong></a></p>
<p><a href="/2020/03/20/软件项目管理（%20第一章：IT项目管理概述）/#1.2"><em>1.2 项目管理的概念</em></a></p>
<p><a href="/2020/03/20/软件项目管理（%20第一章：IT项目管理概述）/#1.3"><strong>1.3 软件项目管理</strong></a></p>
</blockquote>
<hr>
<h2 id="1-1-项目的概念"><a href="#1-1-项目的概念" class="headerlink" title="1.1 项目的概念"></a><span id="1.1">1.1 项目的概念</span></h2><p><strong>项目的定义</strong>：在既定的<font color="red">资源</font>和<font color="red">要求</font>的限制下，为实现某种<font color="red">目标</font>而相互联系的<font color="red">一次性</font>工作任务</p>
<p>中国项目管理研究委员会对项目的定义是：项目是一个特殊的将被完成的有限任务。它是在一定时间内，满足一系列特定目标的多项相关工作的总称。</p>
<p><strong>项目的价值</strong>：项目的价值在于项目具有明示和潜在的<font color="red">功能</font>,能满足利益相关方明示和潜在的<font color="red">需要</font>，组织和个人的业绩和工作能力也是通过项目展现的。</p>
<p><strong>项目的基本特征：</strong>1.明确的目标 2.独特性 3.时限性</p>
<p><strong>项目的主要表现：</strong>1.目标的渐进性 2.创新性 3.高风险性 4.智力密集性</p>
<a id="more"></a>

<h2 id="1-2-项目管理概念"><a href="#1-2-项目管理概念" class="headerlink" title="1.2 项目管理概念"></a><span id="1.2">1.2 项目管理概念</span></h2><p><strong>项目管理的含义：</strong></p>
<p>​    1.<font color="red">管理活动</font>：即一种有意识的按照项目的特点和规律，对项目进行组织和管理的活动</p>
<p>​    2.<font color="red">管理学科</font>：即项目管理是以项目管理活动为研究对象的一门学科，是探究项目活动科学组织管理的理论和方法</p>
<p><strong>项目管理的价值：</strong></p>
<p>​    1.项目的价值来源于项目目标的完成，实现项目管理可以在项目的生命周期内不断进行<font color="red">资源的配置和协调</font>，不断做出科学决策，从而使项目执行的全过程处于最佳的运行状态，为企业创造巨大的价值。</p>
<p>​    2.通过项目管理，综合协调好<font color="red">进度、费用、质量</font>等控制性目标，使企业在财务能力、客户满意度、项目成功率和学习能力以及增长指数方面都获得极大的改进。</p>
<p>​    3.项目管理的另一个重要价值就是<font color="red">知识积累</font>。</p>
<p><strong>项目管理的特征：</strong></p>
<p>​    1．项目管理的对象是项目</p>
<p>​    2．<font color="red">系统工程思想</font>贯穿项目管理的全过程</p>
<p>​    3．项目管理组织具有一定的特殊性</p>
<p>​    4．项目管理的方式是目标管理</p>
<p>​    5．基于团队的项目经理负责制</p>
<p>​    6．项目管理具有创造性</p>
<p><strong>PMI的PMBOK体系:</strong></p>
<table>
<thead>
<tr>
<th align="center">过程类别→<br />知识域↓</th>
<th>启动过程组</th>
<th align="center">规划过程组</th>
<th align="center">执行过程组</th>
<th align="center">监控过程组</th>
<th align="center">收尾过程组</th>
</tr>
</thead>
<tbody><tr>
<td align="center">整体</td>
<td>制定项目章程</td>
<td align="center">制定项目管理计划</td>
<td align="center">指导和管理项目执行</td>
<td align="center">监控项目工作  整体变更控制</td>
<td align="center">结束项目或阶段</td>
</tr>
<tr>
<td align="center">范围</td>
<td></td>
<td align="center">收集需求  范围定义  创建工作分解结构</td>
<td align="center"></td>
<td align="center">核实范围  范围变更控制</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">时间</td>
<td></td>
<td align="center">活动定义  活动排序  估算活动资源  活动历时估计进度计划编制</td>
<td align="center"></td>
<td align="center">进度控制</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">成本</td>
<td></td>
<td align="center">成本估计  制定预算</td>
<td align="center"></td>
<td align="center">成本控制</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">质量</td>
<td></td>
<td align="center">质量规划</td>
<td align="center">实施质量保证</td>
<td align="center">实施质量控制</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">人力资源</td>
<td></td>
<td align="center">制定人力资源计划</td>
<td align="center">组建团队  团队建设  团队管理</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">沟通</td>
<td>识别干系人</td>
<td align="center">规划沟通</td>
<td align="center">信息发布  管理干系人</td>
<td align="center">绩效报告</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">风险</td>
<td></td>
<td align="center">规划风险管理风险识别  定性风险分析  定量风险分析规划风险应对</td>
<td align="center"></td>
<td align="center">监控风险</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">采购</td>
<td></td>
<td align="center">规划采购</td>
<td align="center">实施采购</td>
<td align="center">管理采购</td>
<td align="center">结束采购</td>
</tr>
</tbody></table>
<p><strong>PMBOK把项目管理过程分为5类：</strong></p>
<p>​    1.启动过程 2.计划过程 3.执行过程 4.控制过程 5.结束过程</p>
<p><strong>IPMA的知识体系：</strong></p>
<img src="/2020/03/20/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%88%20%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AIT%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E6%A6%82%E8%BF%B0%EF%BC%89/1.png" class="">

<h2 id="1-3-软件项目管理"><a href="#1-3-软件项目管理" class="headerlink" title="1.3 软件项目管理"></a><span id="1.3">1.3 软件项目管理</span></h2><p><strong>软件项目管理的特点：</strong></p>
<p>​    1.软件项目是设计型项目</p>
<p>​    2.软件过程模型</p>
<p>​    3.需求变化频繁</p>
<p>​    4.工作量估算困难</p>
<p>​    5.以人为本的管理</p>
<p><strong>项目成功的表现：</strong></p>
<p>​    1.在<font color="red">规定的时间</font>内完成项目</p>
<p>​    2.项目<font color="red">成本</font>控制在<font color="red">预算</font>之内</p>
<p>​    3.产品<font color="red">功能特性</font>达到规格说明书所要求的水平</p>
<p>​    4.项目通过客户的<font color="red">验收</font></p>
<p>​    5.项目范围<font color="red">变化最小</font>或者是可控的</p>
<p>​    6.没有干扰或严重影响整个开发组织的主要工作流程</p>
<p>​    7.没有改变企业文化或改进了企业的文化等</p>
<p><strong>IT项目中的常见问题分析：</strong></p>
<p>​    1.项目<font color="red">管理意识</font>淡薄</p>
<p>​    2.项目<font color="red">成本基础</font>不足</p>
<p>​    3.项目<font color="red">管理制度</font>欠缺</p>
<p>​    4.项目<font color="red">计划执行</font>不力</p>
<p>​    5.项目<font color="red">风险意识</font>淡薄</p>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>蛋糕店前端html5+css3</title>
    <url>/2020/03/18/%E8%9B%8B%E7%B3%95%E5%BA%97%E5%89%8D%E7%AB%AFhtml5-css3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="题目要求："><a href="#题目要求：" class="headerlink" title="题目要求："></a>题目要求：</h2><p>一、在这个网络时代数字化生活的今天,计算机网络可以说已经渗透到了人们的生活和工作的各个角落，也给生活和工作方式带来了很大的变革，目前，电子商务应用日益广泛，很多以前必须面对面才能完成的交易，现在可以足不出户就能通过网络来完成，而目前市场上还没有更好的蛋糕推广、预定和销售网站，现有这么一个需求，结合市场情况，实现一个在线预定及展示蛋糕的前端项目<br>二、使用技术:HTML5、CSS3<br>三、有能力者可使用JavaScript实现一些动态交互</p>
<h2 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h2><p><strong>效果展示：</strong> <a href="https://www.blogzhy.top/projectSpace/cake/index.html">https://www.blogzhy.top/projectSpace/cake/index.html</a></p>
<p><strong>GitHub：</strong>   <a href="https://github.com/ZhuHouYu/Cake" target="_blank" rel="noopener">https://github.com/ZhuHouYu/Cake</a></p>
]]></content>
      <categories>
        <category>完成项目</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>常用正则表达式</title>
    <url>/2020/03/11/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="/2020/03/11/常用正则表达式/#1"><strong>一、特殊需求表达式</strong></a></p>
<p><a href="/2020/03/11/常用正则表达式/#2"><strong>二、校验数字的表达式</strong></a></p>
<p><a href="/2020/03/11/常用正则表达式/#3"><strong>三、校验字符的表达式</strong></a></p>
<h1 id="特殊需求表达式"><a href="#特殊需求表达式" class="headerlink" title="特殊需求表达式"></a><span id="1">特殊需求表达式</span></h1><pre><code class="JAVA"> 1 Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$
 2 域名：^(?=^.{3,255}$)[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+$
 3 InternetURL：[a-zA-z]+://[^\s]* 或 ^https://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$
 4 手机号码：^(13[0-9]|14[0-9]|15[0-9]|16[0-9]|17[0-9]|18[0-9]|19[0-9])\d{8}$
 5 由于工信部放号段不定时，所以建议使用泛解析：^([1][3,4,5,6,7,8,9])\d{9}$
 6 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}
 7 18位身份证号码(数字、字母x结尾)：^((\d{18})|([0-9x]{18})|([0-9X]{18}))$
 8 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$
 9 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$
10 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$
11 日期格式：^\d{4}-\d{1,2}-\d{1,2}
12 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$
13 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$
14 钱的输入格式：
15    1.有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和&quot;10,000&quot;：^[1-9][0-9]*$
16    2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$
17    3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$
18    4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$
19    5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]{2})?$
20    6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$
21    7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$
22    8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$
23    备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里
24 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$
25 中文字符的正则表达式：[\u4e00-\u9fa5]
26 双字节字符：[^\x00-\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))
27 空白行的正则表达式：\n\s*\r    (可以用来删除空白行)
28 HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)
29 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)
30 腾讯QQ号：[1-9][0-9]{4,}    (腾讯QQ号从10000开始)
31 中国邮政编码：[1-9]\d{5}(?!\d)    (中国邮政编码为6位数字)
32 IP地址：\d+\.\d+\.\d+\.\d+    (提取IP地址时有用)
33 IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))    (由@飞龙三少 提供,感谢共享)</code></pre>
<a id="more"></a>

<h1 id="校验数字的表达式"><a href="#校验数字的表达式" class="headerlink" title="校验数字的表达式"></a><span id="2">校验数字的表达式</span></h1><pre><code class="java"> 1 数字：^[0-9]*$
 2 n位的数字：^\d{n}$
 3 至少n位的数字：^\d{n,}$
 4 m-n位的数字：^\d{m,n}$
 5 零和非零开头的数字：^(0|[1-9][0-9]*)$
 6 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$
 7 带1-2位小数的正数或负数：^(\-)?\d+(\.\d{1,2})?$
 8 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$
 9 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$
10 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$
11 非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$
12 非零的负整数：^-[1-9]\d*$
13 非负整数：^\d+$ 或 ^[1-9]\d*|0$
14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$
15 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$
16 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$
17 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$
18 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$
19 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></pre>
<h1 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a><span id="3">校验字符的表达式</span></h1><pre><code class="java"> 1 汉字：^[\u4e00-\u9fa5]{0,}$
 2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$
 3 长度为3-20的所有字符：^.{3,20}$
 4 由26个英文字母组成的字符串：^[A-Za-z]+$
 5 由26个大写英文字母组成的字符串：^[A-Z]+$
 6 由26个小写英文字母组成的字符串：^[a-z]+$
 7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$
 8 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$
 9 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$
10 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$
11 可以输入含有^%&amp;&#39;,;=?$\&quot;等字符：[^%&amp;&#39;,;=?$\x22]+
12 禁止输入含有~的字符：[^~\x22]+</code></pre>
<hr>
<p>作者：<a href="http://www.cnblogs.com/zxin/" target="_blank" rel="noopener">zxin</a><br>出处：<a href="http://www.cnblogs.com/zxin/" target="_blank" rel="noopener">http://zxin.cnblogs.com/</a><br>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础（一）样式分类+选择器</title>
    <url>/2020/03/10/CSS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E6%A0%B7%E5%BC%8F%E5%88%86%E7%B1%BB-%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="/2020/03/10/CSS基础（一）样式分类-选择器/#1"><strong>CSS样式分类</strong></a></p>
<p><a href="/2020/03/10/CSS基础（一）样式分类-选择器/#2"><strong>CSS选择器</strong></a></p>
<p>​        <a href="/2020/03/10/CSS基础（一）样式分类-选择器/#2.1"><em>标签选择器</em></a></p>
<p>​        <a href="/2020/03/10/CSS基础（一）样式分类-选择器/#2.2"><em>id选择器</em></a></p>
<p>​        <a href="/2020/03/10/CSS基础（一）样式分类-选择器/#2.3"><em>class选择器</em></a></p>
<p>​        <a href="/2020/03/10/CSS基础（一）样式分类-选择器/#2.4"><em>通配符选择器</em></a></p>
<p>​        <a href="/2020/03/10/CSS基础（一）样式分类-选择器/#2.5"><em>后代选择器</em></a></p>
<p>​        <a href="/2020/03/10/CSS基础（一）样式分类-选择器/#2.6"><em>选择器分组</em></a></p>
<hr>
<h1 id="CSS样式分类"><a href="#CSS样式分类" class="headerlink" title="CSS样式分类"></a><span id="1">CSS样式分类</span></h1><pre><code class="HTML">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;CSS基础&lt;/title&gt;
        &lt;!--
            尽量少用属性设置CSS样式
            CSS样式分为
                1.行内样式：标签内
                2.内部样式：头部head标签内
                3.外部样式：引用css文件        （常用：内容和表现分离，方便搜索引擎加载）
            元素分为：
                块级元素：独占一行，对宽高的属性值生效；如果不给宽度，块级元素就默认为浏览器的宽度，即就是100%宽；
                行内元素：可以多个标签存在一行，对宽高属性值不生效，完全靠内容撑开宽高！
                        其中还有一种结合两种模式有点的显示模式：
                行内块元素：结合的行内和块级的有点，不仅可以对宽高属性值生效，还可以多个标签存在一行显示；
                行内标签：包含a、span、em、strong、b、i、u、label、br；
                块标签：包含p、div、ul、ol、li、dl、dt、dd、h1~h6、form；
                行内块标签：img,input,textarea
        --&gt;
        &lt;style&gt;
            /**
             * CSS分为：
             *     1.内联式CSS样式：内联式css样式表就是把css代码直接写在现有的HTML标签中
             *     2.嵌入式CSS样式：在HTML文档中的&lt; head &gt;中使用&lt; style &gt;标记，，被称为内嵌式。
             *     3.外部式CSS样式：采用&lt; link &gt;标签。例如：&lt; link href = “a.css” type = “text/css” rel = “stylesheet” &gt;&lt; /link &gt;
             * 
             * css语法：
             * 选择器{
             *     样式属性1:属性值;
             *     样式属性2:属性值;
             * }
             * 
             * 我想把h1标签字体颜色编程红色，字体居中，字体大小为20像素，字体类型为“微软雅黑”
             */
            h1{
                color: red;/*设置字体颜色*/
                text-align: center;/*设置字体居中*/
                font-size: 20px;/*设置字体大小*/
                font-family: &quot;微软雅黑&quot;;/*设置字体类型*/
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;今天天气好晴朗&lt;/h1&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<a id="more"></a>

<h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a><span  id="2">CSS选择器</span ></h1><blockquote>
<p>注意：id和class属性需要符合命名规范，否则无效。</p>
<p>命名规范：</p>
<p>​    1.大小写敏感</p>
<p>​    2.最佳规则（保证浏览器兼容性）：始终使用字母、数字或连字符，并且始终以字母开头</p>
</blockquote>
<h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a><span id="2.1">标签选择器</span></h2><pre><code class="HTML">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;变迁&lt;/title&gt;
        &lt;!--
            标签选择器，选择HTML相应的标签名字作为选择器 比如 p  h1   span  ...
        --&gt;
        &lt;style&gt;
            body{
                background-color: aquamarine;
            }
            h1{
                color: red;
                font-weight: 900; /*字体粗度100~900*/
                font-family: &quot;宋体&quot;;
            }
            p{
                color: blue;
                border: 1px dashed black;/*边框粗细   边框实线虚线:solid实线 dashed dotted点线    虚线 边框颜色*/
            }
            a{
                color: #52A96E;
                text-decoration: none;/*去掉文本下划线*/
            }            
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;山东济南&lt;/h1&gt;
        &lt;p&gt;这是一段文本&lt;/p&gt;
        &lt;a href=&quot;https://www.baidu.com&quot;&gt;百度一下&lt;/a&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p><strong>效果图：</strong> <img src="/2020/03/10/CSS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E6%A0%B7%E5%BC%8F%E5%88%86%E7%B1%BB-%E9%80%89%E6%8B%A9%E5%99%A8/1.png" class=""></p>
<h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a><span id="2.2">id选择器</span></h2><pre><code class="HTML">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;id选择器&lt;/title&gt;
        &lt;!--
            ID选择器：要给添加样式的标签添加一个id属性
                    以#开头
        --&gt;
        &lt;style&gt;
            #menu{
                color: white;
                font-size: 36px;
                background-color: #52A96E;
                width: 300px;
            }
            #test{
                color: red;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;header&gt;
            &lt;nav id=&quot;menu&quot;&gt;
                &lt;ul&gt;            &lt;!-- ul不占一行，是块元素 --&gt;    
                    &lt;li&gt;新闻资讯&lt;/li&gt;
                    &lt;li&gt;娱乐天地&lt;/li&gt;
                    &lt;li&gt;体育竞技&lt;/li&gt;
                    &lt;li&gt;文化传媒&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/nav&gt;
        &lt;/header&gt;
        &lt;main&gt;
            &lt;div id=&quot;test&quot;&gt;
                &lt;p&gt;5万把共享雨伞不到一天全部“小时”&lt;/p&gt;
                &lt;article&gt;
                    &lt;section&gt;
                        &lt;h2&gt;国内新闻&lt;/h2&gt;
                        &lt;p&gt;嫦娥七号顺利发射成功&lt;/p&gt;
                    &lt;/section&gt;
                    &lt;section&gt;
                        &lt;h2&gt;国际新闻&lt;/h2&gt;
                        &lt;p&gt;国际油价大幅度上涨，美瞳价格提高80美分&lt;/p&gt;
                    &lt;/section&gt;
                &lt;/article&gt;
            &lt;/div&gt;
        &lt;/main&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p><strong>效果图：</strong> <img src="/2020/03/10/CSS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E6%A0%B7%E5%BC%8F%E5%88%86%E7%B1%BB-%E9%80%89%E6%8B%A9%E5%99%A8/2.png" class=""></p>
<h2 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a><span id="2.3">class选择器</span></h2><pre><code class="HTML">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;类选择器&lt;/title&gt;
        &lt;!--
            类选择器：给要添加样式的元素加一个class属性
            在css中，类选择器以“.”开头
            class选择器的值不是唯一的，可以用“空格”隔开，一个标签用多个class属性
        --&gt;
        &lt;style&gt;
            .test1{
                color: blue;
                font-weight: bold;
            }
            .test2{
                background-color: yellowgreen;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;ul&gt;
            &lt;li class=&quot;test1 test2&quot;&gt;新闻&lt;/li&gt;
            &lt;li&gt;视频&lt;/li&gt;
            &lt;li&gt;体育&lt;/li&gt;
            &lt;li&gt;娱乐&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p class=&quot;test1&quot;&gt;中国突然做的决定&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p><strong>效果图：</strong> <img src="/2020/03/10/CSS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E6%A0%B7%E5%BC%8F%E5%88%86%E7%B1%BB-%E9%80%89%E6%8B%A9%E5%99%A8/3.png" class=""></p>
<h2 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a><span id="2.4">通配符选择器</span></h2><pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;通配符选择器&lt;/title&gt;
        &lt;!--
            *代表通配符选择器，代表当前页面所有的标签共用该样式
        --&gt;
        &lt;style&gt;
            *{
                color: red;
                font-size: 16px;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;hhhhhh&lt;/p&gt;
        &lt;h1&gt;aaaaaaa&lt;/h1&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a><span id="2.5">后代选择器</span></h2><pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;后代选择器(包含选择器)&lt;/title&gt;
        &lt;!--
            后代选择器：选择某个元素下一代
            多个选择器之间用空格隔开
        --&gt;
        &lt;style&gt;
            #menu{
                background-color: darkgoldenrod;
            }
            #menu .test1{
                color: seagreen;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id=&quot;menu&quot;&gt;
            &lt;h1&gt;商品分类&lt;/h1&gt;
            &lt;ul  class=&quot;test1&quot;&gt;
                &lt;li&gt;家用电器&lt;/li&gt;
                &lt;li&gt;男女服装&lt;/li&gt;
                &lt;li&gt;日用百货&lt;/li&gt;
            &lt;/ul&gt;
            &lt;ul  class=&quot;test1&quot;&gt;
                &lt;li&gt;家用电器&lt;/li&gt;
                &lt;li&gt;男女服装&lt;/li&gt;
                &lt;li&gt;日用百货&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p><strong>效果图：</strong> <img src="/2020/03/10/CSS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E6%A0%B7%E5%BC%8F%E5%88%86%E7%B1%BB-%E9%80%89%E6%8B%A9%E5%99%A8/4.png" class=""></p>
<h2 id="选择器分组"><a href="#选择器分组" class="headerlink" title="选择器分组"></a><span id="2.6">选择器分组</span></h2><pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;选择器分组&lt;/title&gt;
        &lt;!--
            选择器分组：创建由逗号隔开的多个选择器，可以将样式应用到单个选择器匹配的所有元素中
        --&gt;
        &lt;style&gt;
            header,main{  /*多个标签动用 , 隔开*/
                border: 1px black solid;
                width: 600px;
            }
            header{
                height: 100px;
            }
            header nav ul li{
                float: left;    /*左浮动*/
                list-style-type: none;
                width: 100px;
            }
            .p1{
                color: red;
                background-color: #7FFFD4;
                width: 200px;
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;header&gt;
            &lt;nav&gt;
                &lt;ul&gt;
                    &lt;li&gt;首页&lt;/li&gt;
                    &lt;li&gt;C#程序设计&lt;/li&gt;
                    &lt;li&gt;SQL&lt;/li&gt;
                    &lt;li&gt;HTML5&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/nav&gt;
        &lt;/header&gt;
        &lt;main&gt;
            &lt;article&gt;
                &lt;h1&gt;国际新闻&lt;/h1&gt;
                &lt;p&gt;美国开始部署萨德系统&lt;/p&gt;
            &lt;/article&gt;
        &lt;/main&gt;
        &lt;div id=&quot;test1&quot;&gt;
            &lt;p class=&quot;p1&quot;&gt;山东合并批录取，部分高校预估线出炉&lt;/p&gt;
        &lt;/div&gt;
        &lt;div id=&quot;test2&quot;&gt;
            &lt;p class=&quot;p1&quot;&gt;景区客流直线上升，青岛旅游旺季提前“驾到”&lt;/p&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p><strong>效果图：</strong> <img src="/2020/03/10/CSS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E6%A0%B7%E5%BC%8F%E5%88%86%E7%B1%BB-%E9%80%89%E6%8B%A9%E5%99%A8/5.png" class=""></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基础（三）表格、表单</title>
    <url>/2020/03/10/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E8%A1%A8%E6%A0%BC%E3%80%81%E8%A1%A8%E5%8D%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="/2020/03/10/HTML基础（三）表格、表单/#1"><strong>表格</strong></a></p>
<p>​        <a href="/2020/03/10/HTML基础（三）表格、表单/#1.1"><em>基础表格——学生信息表</em></a></p>
<p>​        <a href="/2020/03/10/HTML基础（三）表格、表单/#1.2"><em>表格的跨行跨列——课程表</em></a></p>
<p>​        <a href="/2020/03/10/HTML基础（三）表格、表单/#1.3"><em>表格练习——年终工资表</em></a></p>
<p><a href="/2020/03/10/HTML基础（三）表格、表单/#2"><strong>表单</strong></a></p>
<p>​        <a href="/2020/03/10/HTML基础（三）表格、表单/#2.1"><em>登录表单</em></a></p>
<p>​        <a href="/2020/03/10/HTML基础（三）表格、表单/#2.2"><em>注册表单</em></a></p>
<hr>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a><span id="1">表格</span></h1><h2 id="基础表格——学生信息表"><a href="#基础表格——学生信息表" class="headerlink" title="基础表格——学生信息表"></a><span id="1.1">基础表格——学生信息表</span></h2><pre><code class="HTML">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;表格——学生信息表&lt;/title&gt;
        &lt;style&gt;
            table{/*标签选择器*/
                width: 500px;
                text-align: center; /*设置字体居中*/ /*css备注*/
                margin: 0 auto;/*表格根据body的大小左右居中*/
                border: none;/*表格边框设置无*/
            }
            table,th,td{/*增幅选择器*/
                border-collapse: collapse;/*把所有的table,th,td标签边框合并*/
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;!--
            tabe：表格标签
            th：表头标签，相当于加了&lt;strong&gt;&lt;/strong&gt;
            tr：行标签
            td：单元标签
            border属性：边框样式
        --&gt;
        &lt;table border=&quot;1&quot;&gt;
            &lt;!--
                caption：标题HTML5标签
                thead：表格的表头标签
                tbodt：表格的主体内容标签
                tfoot：表格的表尾标签
            --&gt;
            &lt;caption&gt;&lt;h3&gt;学生信息表&lt;/h3&gt;&lt;/caption&gt;
            &lt;thead style=&quot;background-color: #FF0000;&quot;&gt;
                &lt;tr&gt;
                    &lt;th&gt;姓名&lt;/th&gt;
                    &lt;th&gt;学校&lt;/th&gt;
                    &lt;th&gt;性别&lt;/th&gt;
                    &lt;th&gt;班级&lt;/th&gt;
                &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody style=&quot;background-color: #CCFF00;&quot;&gt;
                &lt;tr&gt;
                    &lt;td&gt;张三&lt;/td&gt;
                    &lt;td&gt;邻中&lt;/td&gt;
                    &lt;td&gt;男&lt;/td&gt;
                    &lt;td&gt;1&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;张三&lt;/td&gt;
                    &lt;td&gt;邻中&lt;/td&gt;
                    &lt;td&gt;男&lt;/td&gt;
                    &lt;td&gt;1&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;tfoot style=&quot;background-color: antiquewhite;&quot;&gt;
                &lt;tr&gt;
                    &lt;td&gt;解释&lt;/td&gt;
                    &lt;td&gt;解释&lt;/td&gt;
                    &lt;td&gt;解释&lt;/td&gt;
                    &lt;td&gt;解释&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tfoot&gt;
        &lt;/table&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<a id="more"></a>

<p><strong>效果图：</strong> <img src="/2020/03/10/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E8%A1%A8%E6%A0%BC%E3%80%81%E8%A1%A8%E5%8D%95/1.png" class=""></p>
<h2 id="表格的跨行跨列——课程表"><a href="#表格的跨行跨列——课程表" class="headerlink" title="表格的跨行跨列——课程表"></a><span id="1.2">表格的跨行跨列——课程表</span></h2><pre><code class="HTML">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;表格——课程表&lt;/title&gt;
        &lt;style&gt;
            table{/*标签选择器*/
                width: 500px;
                text-align: center; /*设置字体居中*/ /*css备注*/
                margin: 0 auto;/*表格根据body的大小左右居中*/
                border: none;/*表格边框设置无*/
            }
            table,th,td{/*增幅选择器*/
                border-collapse: collapse;/*把所有的table,th,td标签边框合并*/
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;!--
            tabe：表格标签
            th：表头标签，相当于加了&lt;strong&gt;&lt;/strong&gt;
            tr：行标签
            td：单元标签
            border属性：边框样式
        --&gt;
        &lt;table border=&quot;1&quot;&gt;
            &lt;!--
                caption：标题HTML5标签
                thead：表格的表头标签
                tbodt：表格的主体内容标签
                tfoot：表格的表尾标签
            --&gt;
            &lt;caption&gt;&lt;h3&gt;学生信息表&lt;/h3&gt;&lt;/caption&gt;
            &lt;thead style=&quot;background-color: #FF0000;&quot;&gt;
                &lt;tr&gt;
                    &lt;th&gt;姓名&lt;/th&gt;
                    &lt;th&gt;学校&lt;/th&gt;
                    &lt;th&gt;性别&lt;/th&gt;
                    &lt;th&gt;班级&lt;/th&gt;
                &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody style=&quot;background-color: #CCFF00;&quot;&gt;
                &lt;tr&gt;
                    &lt;td&gt;张三&lt;/td&gt;
                    &lt;td&gt;邻中&lt;/td&gt;
                    &lt;td&gt;男&lt;/td&gt;
                    &lt;td&gt;1&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;张三&lt;/td&gt;
                    &lt;td&gt;邻中&lt;/td&gt;
                    &lt;td&gt;男&lt;/td&gt;
                    &lt;td&gt;1&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;tfoot style=&quot;background-color: antiquewhite;&quot;&gt;
                &lt;tr&gt;
                    &lt;td&gt;解释&lt;/td&gt;
                    &lt;td&gt;解释&lt;/td&gt;
                    &lt;td&gt;解释&lt;/td&gt;
                    &lt;td&gt;解释&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tfoot&gt;
        &lt;/table&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p><strong>效果图：</strong><img src="/2020/03/10/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E8%A1%A8%E6%A0%BC%E3%80%81%E8%A1%A8%E5%8D%95/2.png" class=""></p>
<h2 id="表格练习——年终工资表"><a href="#表格练习——年终工资表" class="headerlink" title="表格练习——年终工资表"></a><span id="1.3">表格练习——年终工资表</span></h2><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;表格练习&lt;/title&gt;
        &lt;style&gt;
            table{
                width: 500px;
                margin: 0 auto;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;!--
            cellpadding 设置内容和单元格的距离
            cellspacing 设置单元格与单元格之间的距离
        --&gt;
        &lt;table border=&quot;1&quot; cellpadding=&quot;20&quot;&gt;
            &lt;caption&gt;&lt;strong&gt;年终工资表&lt;/strong&gt;&lt;/caption&gt;
            &lt;tr style=&quot;background-color: green;&quot;&gt;
                &lt;th&gt;区域办事处&lt;/th&gt;
                &lt;th&gt;岗位&lt;/th&gt;
                &lt;th&gt;姓名&lt;/th&gt;
                &lt;th&gt;工资&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td rowspan=&quot;3&quot;&gt;华东区&lt;/td&gt;
                    &lt;td rowspan=&quot;2&quot;&gt;人事专员&lt;/td&gt;
                    &lt;td&gt;王红&lt;/td&gt;
                    &lt;td&gt;1500&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;张民&lt;/td&gt;
                    &lt;td&gt;1500&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td rowspan=&quot;3&quot;&gt;软件开发工程师&lt;/td&gt;
                    &lt;td&gt;李远帆&lt;/td&gt;
                    &lt;td&gt;6000&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td rowspan=&quot;2&quot;&gt;中南区&lt;/td&gt;
                    &lt;td&gt;杨涛&lt;/td&gt;
                    &lt;td&gt;5000&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;粮草&lt;/td&gt;
                    &lt;td&gt;5000&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
                &lt;tr&gt;
                    &lt;td colspan=&quot;3&quot;&gt;总计&lt;/td&gt;
                    &lt;td&gt;总计&lt;/td&gt;
                &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre><p><strong>效果图：</strong><img src="/2020/03/10/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E8%A1%A8%E6%A0%BC%E3%80%81%E8%A1%A8%E5%8D%95/3.png" class=""></p>
<h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a><span id="2">表单</span></h1><h2 id="登录表单"><a href="#登录表单" class="headerlink" title="登录表单"></a><span id="2.1">登录表单</span></h2><pre><code class="HTML">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;表单&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;!--
            form:表单标签
            属性：
                method:表单的提交方式，有两种常用取值：get/post
                    get:1.默认值（不安全）账号密码会在地址栏显示出来，数据通过地址栏传递
                        2.速度快，用于查寻
                        3.不能传递海量信息，每次只能传递1024个字节
                        4.不能上传附件
                    post：1.不显示账号密码，即不通过地址栏传递数据，而是以文件
                        2.速度慢，（安全）用于关于用户敏感信息
                        3.能传递海量数据
                        4。能上传附件
                action:把表单数据提交给？进行处理表单数据的地址
                input：输入框
        --&gt;
        &lt;form action=&quot;../html表格/2 html_表格的跨行跨列.html&quot; method=&quot;get&quot;&gt;
            用户名：&lt;input type=&quot;text&quot; id=&quot;userName&quot; name=&quot;userName&quot; /&gt;
            &lt;br /&gt;
            密码：&lt;input type=&quot;password&quot; id=&quot;pwd&quot; name=&quot;pwd&quot; /&gt;
            &lt;br /&gt;
            &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;
            &lt;h1 style=&quot;vertical-align:middle ;&quot;&gt;&lt;/h1&gt;
            &lt;div&gt;&lt;/div&gt;
            &lt;a style=&quot;vertical-align: ;&quot;&gt;&lt;/a&gt;
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;HTM</code></pre>
<p><strong>效果图：</strong><img src="/2020/03/10/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E8%A1%A8%E6%A0%BC%E3%80%81%E8%A1%A8%E5%8D%95/4.png" class=""></p>
<h2 id="注册表单"><a href="#注册表单" class="headerlink" title="注册表单"></a><span id="2.2">注册表单</span></h2><pre><code class="HTML">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;注册&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;form action=&quot;#&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
            &lt;!--
                form的重要作用，获取用户输入的信息，需要在表单中加入 表单项
                application/x-www-form-urlencoded 默认编码形式
                使用上传，必须改变表单的enctype属性的值改为multipart/form-data

                语法:&lt;input type=&quot;类型&quot;&gt;
                常用type值：    
                    text:单行文本框
                    paswword:密码框
                    imge:图片框（提交）
                span:行内标签，没有任何样式
                image：图片按钮，提交图标按钮
                radio:单选按钮
                checkbox:多选框
                file:上传按钮
                select:下拉框
                textarea:多行文本
                submit:提交按钮
                reset:重置按钮
                button:普通按钮
                hidden:隐藏域

                常用属性：
                checked=&quot;checked&quot; ：单选按钮钟的默认选中
                value:初始值
                sizi:设置初始宽度
                maxlength：设置可输入最多多少个字符
                selected=&quot;selected&quot;:下拉框设置默认选项
                readonly=&quot;readonly&quot;：只读属性
            --&gt;

            &lt;input type=&quot;hidden&quot; value=&quot;666&quot; name=&quot;hidden&quot; /&gt;

            &lt;span&gt;账号：&lt;/span&gt;
            &lt;input type=&quot;text&quot; name=&quot;userName&quot; id=&quot;userName&quot; size=&quot;10&quot; maxlength=&quot;10&quot; readonly=&quot;readonly&quot; value=&quot;username&quot;/&gt;
            &lt;br /&gt;
            &lt;span&gt;密码：&lt;/span&gt;
            &lt;input type=&quot;password&quot; name=&quot;pwd&quot; id=&quot;pwd&quot; /&gt;
            &lt;br /&gt;
            &lt;input type=&quot;image&quot; src=&quot;../img/logo.jpg&quot; name=&quot;img&quot; id=&quot;img&quot; /&gt;
            &lt;br /&gt;    
            &lt;!--单选--&gt;
            &lt;span&gt;性别：&lt;/span&gt;
            &lt;!--checked 默认选中--&gt;
            &lt;input type=&quot;radio&quot; name=&quot;boy&quot; id=&quot;boy&quot; checked=&quot;checked&quot;/&gt;男  
            &lt;input type=&quot;radio&quot; name=&quot;girl&quot; id=&quot;girl&quot;/&gt;女
            &lt;br /&gt;

            &lt;!--多选按钮--&gt;
            &lt;span&gt;爱好：&lt;/span&gt;
            &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;1&quot;/&gt;看书
            &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;2&quot;/&gt;唱歌
            &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;3&quot;/&gt;跳舞
            &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;4&quot;/&gt;上网
            &lt;br /&gt;

            &lt;!--上传--&gt;
            &lt;span&gt;上传：&lt;/span&gt;
            &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; /&gt;
            &lt;br /&gt;

            &lt;!--下拉框--&gt;
            &lt;span&gt;颜色：&lt;/span&gt;
            &lt;select name=&quot;color&quot; id=&quot;color&quot;&gt;
                &lt;option value=&quot;rad&quot;&gt;红色&lt;/option&gt;
                &lt;option value=&quot;black&quot;&gt;黑色&lt;/option&gt;
                &lt;option value=&quot;blue&quot;&gt;蓝色&lt;/option&gt;
                &lt;option value=&quot;——请选择——&quot; selected=&quot;selected&quot;&gt;——请选择——&lt;/option&gt;
                &lt;!--若不加selected属性，那就放在第一行--&gt;
            &lt;/select&gt;
            &lt;br /&gt;

            &lt;!--多行文本--&gt;
            &lt;span&gt;备注：&lt;/span&gt;
            &lt;textarea name=&quot;desc&quot; id=&quot;desc&quot; rows=&quot;10&quot; cols=&quot;5&quot;&gt;&lt;/textarea&gt;
            &lt;br /&gt;
            &lt;!--提交按钮--&gt;
            &lt;input type=&quot;submit&quot; /&gt;
            &lt;!--重置按钮--&gt;
            &lt;input type=&quot;reset&quot; /&gt;
            &lt;!--普通按钮--&gt;
            &lt;!--设置按钮为禁用的：disabled=&quot;disabled&quot;--&gt;
            &lt;input type=&quot;button&quot; value=&quot;普通按钮&quot; disabled=&quot;disabled&quot;/&gt;
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p><strong>效果图：</strong><img src="/2020/03/10/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E8%A1%A8%E6%A0%BC%E3%80%81%E8%A1%A8%E5%8D%95/5.png" class=""></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基础（二）基本标签</title>
    <url>/2020/03/10/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="/2020/03/10/HTML基础（二）基本标签/#1">基本标签</a></p>
<p><a href="/2020/03/10/HTML基础（二）基本标签/#2">字体样式标签</a></p>
<p><a href="/2020/03/10/HTML基础（二）基本标签/#3">文本格式化标签</a></p>
<p><a href="/2020/03/10/HTML基础（二）基本标签/#4">图片标签</a></p>
<p><a href="/2020/03/10/HTML基础（二）基本标签/#5">超链接、锚链接</a></p>
<p><a href="/2020/03/10/HTML基础（二）基本标签/#6">列表</a></p>
<hr>
<h2 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a><span id="1">基本标签</span></h2><pre><code class="HTML">&lt;body&gt;
 &lt;!--
    h1~h6：标题
    H1标题只能在当前页面中出现一个，除非它包含在hgroup，在hgroup中不识别H1，但有H1的样式
    H1谁在最前面就解析谁
    html大小写不敏感，H1和h1没区别，但是规范“小写”

    br:    换行标签
    hr:    水平线
    pre:预定义文本
--&gt;
    &lt;h1&gt;一级标签&lt;/h1&gt;
    &lt;h2&gt;二级标签&lt;/h2&gt;
    &lt;h3&gt;三级标签&lt;/h3&gt;
    &lt;h4&gt;四级标签&lt;/h4&gt;
    &lt;h5&gt;五级标签&lt;/h5&gt;
    &lt;h6&gt;六级标签&lt;/h6&gt;
    &lt;br /&gt;
    &lt;p&gt;好好学习&lt;br /&gt;天天向上&lt;/p&gt;
    &lt;hr /&gt;
    &lt;p&gt;
        我
        是
        好
        人
    &lt;/p&gt;
    &lt;hr /&gt;
    &lt;pre&gt;
            我
                是
                    坏
                        人
        &lt;/pre&gt;
&lt;/body&gt;</code></pre>
<p><strong>效果图</strong>：<img src="/2020/03/10/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%A0%87%E7%AD%BE/1.png" class=""></p>
<a id="more"></a>

<h2 id="字体样式标签"><a href="#字体样式标签" class="headerlink" title="字体样式标签"></a><span id="2">字体样式标签</span></h2><pre><code class="html">&lt;body&gt;
&lt;!--
    &lt;font face=&quot;设置字体样式&quot; size=&quot;字体大小&quot; color=&quot;字体颜色&quot;&gt;&lt;/font&gt;
--&gt;
    &lt;p&gt;默认字体&lt;/p&gt;
    &lt;p&gt;&lt;font face=&quot;微软雅黑&quot; size=&quot;1&quot; color=&quot;#FF0000&quot;&gt;我是微软湘雅黑&lt;/font&gt;&lt;/p&gt;
    &lt;p&gt;&lt;font face=&quot;宋体&quot;&gt;我是宋体&lt;/font&gt;&lt;/p&gt;
    &lt;br /&gt;
    &lt;p&gt;&lt;font&gt;默认字体为2&lt;/font&gt;&lt;/p&gt;
    &lt;p&gt;&lt;font size=&quot;+2&quot;&gt;字体+2&lt;/font&gt;&lt;/p&gt;
    &lt;p&gt;&lt;font size=&quot;-2&quot;&gt;字体-2&lt;/font&gt;&lt;/p&gt;
&lt;/body&gt;</code></pre>
<p><strong>效果图</strong>：<img src="/2020/03/10/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%A0%87%E7%AD%BE/2.png" class=""></p>
<h2 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a><span id="3">文本格式化标签</span></h2><pre><code class="HTML">&lt;body&gt;
    &lt;!--
        b和string：     文本加粗，b被淘汰了，建议使用strong
        i和em：         斜体，建议使用em
        u:             下划线
        s:            删除线
        small：        字体缩小
        big:        字体放大
        sup:        上标
        sub:        下标
        del和ins：    删除和增加    注释：请与 &lt;ins&gt; 标签配合使用，来描述文档中的更新和修正。

        *** 这些都是行内元素：不独占一行，宽度根据内容计算    ***
    --&gt;
    &lt;b&gt;这是一个b粗体&lt;/b&gt;&lt;br /&gt;
    &lt;strong&gt;这也是一个strong粗体&lt;/strong&gt;&lt;br /&gt;
    &lt;i&gt;这是一个i斜体&lt;/i&gt;&lt;br /&gt;
    &lt;em&gt;这是一个em斜体&lt;/em&gt;&lt;br /&gt;
    &lt;u&gt;这是一个下划线&lt;/u&gt;&lt;br /&gt;
    &lt;s&gt;这是一个删除线&lt;/s&gt;&lt;br /&gt;
    &lt;small&gt;字体缩小&lt;/small&gt;&lt;br /&gt;
    &lt;big&gt;字体放大&lt;/big&gt;&lt;br /&gt;
    这个字体包含了&lt;sup&gt;上标&lt;/sup&gt;&lt;br /&gt;
    这个字体包含了&lt;sub&gt;下标&lt;/sub&gt;&lt;br /&gt;
    Zhy不是一个&lt;del&gt;女生&lt;/del&gt;，而是一个&lt;ins&gt;男生&lt;/ins&gt;&lt;br /&gt;
&lt;/body&gt;</code></pre>
<p><strong>效果图</strong>：<img src="/2020/03/10/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%A0%87%E7%AD%BE/3.png" class=""></p>
<h2 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a><span id="4">图片标签</span></h2><pre><code class="html">&lt;body&gt;
    &lt;!--
        img:    图片标签,是一 行内元素
        src:    图片路径，尽量使用&quot;绝对路径&quot;
        title:    当鼠标放在图片上时，给我一个提示文本
        alt:    当图片加载失败时，执行该属性
        height：    设置图片的高度
        width：    设置图片的宽度
        border:    设置图片的边框，默认0为无边框
    --&gt;
    &lt;img src=&quot;../img/logo.jpg&quot;    
         title=&quot;百度logo&quot;
         height=&quot;100&quot;
         width=&quot;100&quot;
         alt=&quot;加载失败&quot;
         border=&quot;1&quot;/&gt;
&lt;/body&gt;</code></pre>
<p><strong>效果图</strong>：<img src="/2020/03/10/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%A0%87%E7%AD%BE/4.png" class=""></p>
<h2 id="超链接、锚链接"><a href="#超链接、锚链接" class="headerlink" title="超链接、锚链接"></a><span id="5">超链接、锚链接</span></h2><pre><code class="HTML">&lt;body&gt;
    &lt;!--
        &lt;a&gt;超链接标签&lt;/a&gt;
        支持  HTTP , FTP ,Emai
        href:    链接地址
        target:    窗口打开方式，有两种常用取值
            _self:    在当前页面打开链接内容，默认值
            _blank:    在浏览器新建一个窗口打开链接内容

            _parent：在父窗口打开
            _top:    取消当前框架，在当前窗口打开

        titles：    当鼠标放在链接文本时，给我一个提示文本
    --&gt;
    &lt;!--style=&quot;text-decoration: none  去掉下划线--&gt;
    &lt;a href=&quot;http://www.baidu.com&quot; style=&quot;text-decoration: none;&quot; title=&quot;提示百度&quot;&gt;百度超链接&lt;/a&gt;
    &lt;a href=&quot;http://www.sohu.com&quot; target=&quot;_blank&quot;&gt;搜狐超链接&lt;/a&gt;
    &lt;br /&gt;
    &lt;!--图像中的超链接--&gt;
    &lt;a href=&quot;5 html_图片.html&quot;&gt;&lt;img src=&quot;../img/logo.jpg&quot; /&gt;&lt;/a&gt;
    &lt;br /&gt;
    &lt;!--
        锚链接:链接到当前web的资源
        1.给资源取一个唯一的id名称
        2.href=&quot;#名称&quot;，以#开头+id名称
    --&gt;
    &lt;a href=&quot;#p1&quot; style=&quot;text-decoration: none;&quot;&gt;第一章&lt;/a&gt;    
    &lt;p id=&quot;p1&quot;&gt;第一章详细&lt;/p&gt;
&lt;/body&gt;</code></pre>
<p><strong>效果图</strong>：<img src="/2020/03/10/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%A0%87%E7%AD%BE/5.png" class=""></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a><span id="6">列表</span></h2><pre><code class="HTML">&lt;body&gt;
    &lt;!--
        无序列表ul
        ul标签：代表无序列表
        li标签：无序列表内容

        type：
            disc：默认值，实心圆
            square：实心正方形
            circle：空心圆

        style:    
            比type更灵活，可设置各种各样的样式
            list-style-type 列表的样式
            同样disc、square、circl,
            但多一个  none：不设置
    --&gt;
    &lt;ul&gt;
        &lt;li&gt;吃饭&lt;/li&gt;
        &lt;li&gt;吃饭&lt;/li&gt;
        &lt;li&gt;吃饭&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul style=&quot;list-style-type: none; color: blue;&quot; &gt; 
        &lt;li&gt;睡觉&lt;/li&gt;
        &lt;li&gt;睡觉&lt;/li&gt;
        &lt;li&gt;睡觉&lt;/li&gt;
    &lt;/ul&gt;
    &lt;!--
        有序列表
        ol标签：代表有序列表
        li标签：有序列表的内容

        type有5种标签样式
    --&gt;
    &lt;ol type=&quot;1&quot;&gt;
        &lt;li&gt;打豆豆&lt;/li&gt;
        &lt;li&gt;打豆豆&lt;/li&gt;
        &lt;li&gt;打豆豆&lt;/li&gt;
    &lt;/ol&gt;
    &lt;ol type=&quot;a&quot;&gt;
        &lt;li&gt;打豆豆&lt;/li&gt;
        &lt;li&gt;打豆豆&lt;/li&gt;
        &lt;li&gt;打豆豆&lt;/li&gt;
    &lt;/ol&gt;
    &lt;ol type=&quot;i&quot;&gt;
        &lt;li&gt;打豆豆&lt;/li&gt;
        &lt;li&gt;打豆豆&lt;/li&gt;
        &lt;li&gt;打豆豆&lt;/li&gt;
    &lt;/ol&gt;
    &lt;!--
        自定义列表
        dl:代表自定义列表
        dt:代表词条（标题）
        dd:代表词条的解释（内容）
    --&gt;
    &lt;dl&gt;
        &lt;dt&gt;Boy&lt;/dt&gt;
        &lt;dd&gt;男生，帅气&lt;/dd&gt;
        &lt;dt&gt;girl&lt;/dt&gt;
        &lt;dd&gt;女生，漂亮&lt;/dd&gt;
    &lt;/dl&gt;
&lt;/body&gt;</code></pre>
<p><strong>效果图</strong>：<img src="/2020/03/10/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%A0%87%E7%AD%BE/6.png" class=""></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo写博客浏览器卡顿崩溃无响应</title>
    <url>/2020/03/02/Hexo%E5%86%99%E5%8D%9A%E5%AE%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8D%A1%E9%A1%BF%E5%B4%A9%E6%BA%83%E6%97%A0%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="标签未完善"><a href="#标签未完善" class="headerlink" title="标签未完善"></a>标签未完善</h2><p>我在复制下列图中文字到Markdown编译器时：</p>
<img src="/2020/03/02/Hexo%E5%86%99%E5%8D%9A%E5%AE%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8D%A1%E9%A1%BF%E5%B4%A9%E6%BA%83%E6%97%A0%E5%93%8D%E5%BA%94/2.png" class="">

<p>显示的是如下效果：</p>
<img src="/2020/03/02/Hexo%E5%86%99%E5%8D%9A%E5%AE%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8D%A1%E9%A1%BF%E5%B4%A9%E6%BA%83%E6%97%A0%E5%93%8D%E5%BA%94/1.png" class="">

<p>这时如果body加上了 <strong>&lt;</strong>和 <strong>&gt;</strong>  就会导致在网页中看不见，</p>
<p>看不见是小事情，在一些浏览器（我小米手机的自带浏览器）会出现崩溃无响应。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>1.去掉<strong>&lt;</strong> 和 <strong>&gt;</strong> 。</p>
<p>2.如果想要强调body，两边加上双星号即可 ** ，效果：<strong>body</strong>。</p>
<p>3.用    <strong>\</strong>   （转义符），即在 下划线和特殊符号的前面加上<strong>转移符</strong>，效果：&lt; body&gt;</p>
<hr>
<p>以后用Markdown写要注意标签 “有<strong>前</strong>必有<strong>后</strong>” ，不能单独出现单个标签。</p>
<p> 特殊符前加 ：  <strong>\</strong>   （转义符） </p>
]]></content>
      <categories>
        <category>个人博客</category>
        <category>BUG</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基础（一）head、body、scrip</title>
    <url>/2020/03/02/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89head%E3%80%81body%E3%80%81scrip/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="head"><a href="#head" class="headerlink" title="head"></a>head</h1><pre><code class="html">&lt;!--声明文档格式 HTML5--&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;!--头部标签，不显示，帮助浏览器解析网页--&gt;
    &lt;head&gt;
        &lt;!-- 设置网页编码格式 --&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;!-- 设置网站的搜索关键字，方便搜索引擎搜索到该网站--&gt;
        &lt;meta name=&quot;keywords&quot; content=&quot;html,css,js,java&quot; /&gt;
        &lt;!-- 设置该页面的简单描述--&gt;
        &lt;meta name=&quot;description&quot; content=&quot;我这是一个学习网站，欢迎来交流&quot; /&gt;
        &lt;!-- 设置网站的作者--&gt;
        &lt;meta name=&quot;author&quot; content=&quot;Zhy&quot; /&gt;
        &lt;title&gt;网页标题&lt;/title&gt;
        &lt;!--定义 内部样式表，写CSS样式--&gt;
        &lt;style&gt;
            h1{
                color: red;
            }
        &lt;/style&gt;
        &lt;!--
               引用外部样式表,固定写法
                ../返回上一层目录
                ./当前目录
           --&gt;
        &lt;link href=&quot;../css/index.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot; /&gt;
        &lt;!--定义js内部脚本,最后加载，在Body之后--&gt;
        &lt;script&gt;
            //文档加载事件
            window.onload=function(){
                alert(&quot;1111&quot;);
            }
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;!--内容显示标签--&gt;
    &lt;body&gt;
        &lt;h1&gt;hallo HTML&lt;/h1&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<a id="more"></a>

<pre><code class="css">h1{
    background-color: blue;
}</code></pre>
<p><strong>效果图</strong>：</p>
<img src="/2020/03/02/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89head%E3%80%81body%E3%80%81scrip/1.png" class="">

<p>window.onload()** 方法用于在网页加载完毕后立刻执行的操作，即当 HTML 文档加载完毕后，立刻执行某个方法。</p>
<p><strong>window.onload()</strong> 通常用于 <strong>body</strong>元素，在页面完全载入后(包括图片、css文件等等)执行脚本代码。</p>
<p><a href="https://www.runoob.com/w3cnote/javascript-window-onload.html" target="_blank" rel="noopener">菜鸟教程<strong>window.onload()</strong></a></p>
<h1 id="script"><a href="#script" class="headerlink" title="script"></a>script</h1><p><strong>script</strong> 标签用于定义客户端脚本，比如 JavaScript。</p>
<p><strong>script</strong> 元素既可包含脚本语句，也可以通过 “src” 属性指向外部脚本文件。</p>
<p><strong>注释：</strong>如果使用 “src” 属性，则 <strong>script</strong>元素必须是空的。</p>
<p>JavaScript 通常用于图像操作、表单验证以及动态内容更改。</p>
<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;!-- &lt;script src=&quot;../js/login.js&quot;&gt;&lt;/script&gt; --&gt;
    &lt;script&gt;
        window.onload=function(){
            document.getElementById(&quot;btnLogin&quot;).onclick=function(){
                alert(&quot;登录成功!&quot;);
            }
        }
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;button id=&quot;btnLogin&quot; type=&quot;button&quot;&gt;登录&lt;/button&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p><strong>效果图</strong>：</p>
<img src="/2020/03/02/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89head%E3%80%81body%E3%80%81scrip/2.png" class="">

<h1 id="body"><a href="#body" class="headerlink" title="body"></a>body</h1><p><strong>body</strong> 标签定义文档的主体。</p>
<p><strong>body</strong> 元素包含文档的所有内容（比如文本、超链接、图像、表格和列表等等）。</p>
<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;&lt;/title&gt;
    &lt;/head&gt;
    &lt;!--
        body的属性
        background:设置body的背景图片，默认平铺，这个属性不好用了
        background-repeat:no-repeat 设置背景图片不平铺
        background=&quot;../img/logo.jpg&quot; style=&quot;background-repeat: no-repeat;&quot;
    --&gt;
    &lt;body background=&quot;../img/logo.jpg&quot; style=&quot;background-repeat: no-repeat;&quot;&gt;
        &lt;!--
            p标签代表一个段落，独占一行
            &amp;nbsp 表示空格
            &amp;ge 表示大于号
            &amp;lt 表示小于号
            &amp;copy 版权号
        --&gt;
        &lt;p&gt;空格&amp;nbsp;&amp;nbsp;&amp;nbsp;空格&lt;/p&gt;
        &lt;p&gt;如果3&amp;ge;2是正确的&lt;/p&gt;
        &lt;p&gt;如果3&amp;lt;2是错误的&lt;/p&gt;
        &lt;p&gt;&amp;copy; 版权号&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><strong>效果图</strong>：</p>
<img src="/2020/03/02/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89head%E3%80%81body%E3%80%81scrip/3.png" class="">]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>免费科学上网</title>
    <url>/2020/02/28/%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="/2020/02/28/免费科学上网/#1"><strong>PC端科学上网</strong></a></p>
<p>​        <a href="/2020/02/28/免费科学上网/#1.1"><em>谷歌插件</em></a></p>
<p>​        <a href="/2020/02/28/免费科学上网/#1.3"><em>谷歌插件管理</em></a></p>
<p>​        <a href="/2020/02/28/免费科学上网/#1.2"><em>ShadowsocksR</em></a></p>
<p><a href="/2020/02/28/免费科学上网/#2"><strong>手机科学上网</strong></a></p>
<hr>
<h1 id="PC端科学上网"><a href="#PC端科学上网" class="headerlink" title="PC端科学上网"></a><span id="1">PC端科学上网</span></h1><h2 id="谷歌插件"><a href="#谷歌插件" class="headerlink" title="谷歌插件"></a><span id="1.1">谷歌插件</span></h2><p>1.俗话说“无插件，不Chrome”。首先安装最新版Chrome，安装好后，在无科学上网的情况下，是无法进入Chrome网上应用店的。</p>
<p>2.下载<strong>谷歌上网助手</strong>：<a href="http://googlehelper.net" target="_blank" rel="noopener">http://googlehelper.net</a></p>
<p>下载下来将CRX文件解压出来。</p>
<p>3.进入谷歌扩展程序：浏览器输入 <a href="chrome://extensions/">chrome://extensions/</a> 或设置（三个点）→更多工具→扩展程序</p>
<p>4.右上角<strong>开发者模式</strong>点开，将刚才CRX直接拖进来，就会自动安装了。或者看里面txt。</p>
<p>5.安装完成后，左上角 应用→Chrome网上应用店 。（安装成功就能通过 Chrome网上应用店 联网安装插件了）访问助手只能用于google的搜索，无法上YouTube。</p>
<ul>
<li>PP谷歌访问助手：这个是免费的，与谷歌访问助手差不多,速度也很快，也是不能访问YouTube。</li>
</ul>
<p>6.这里推荐几个VPN插件，自行在应用店的搜索栏搜索后→添加至Chrome ，安装完成右上角会有安装的插件图标。</p>
<a id="more"></a>

<ul>
<li>Free VPN：<img src="/2020/02/28/%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/4.png" class=""></li>
<li>Maikr：<img src="/2020/02/28/%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/12.png" class=""></li>
<li>Unlimited VPN：<img src="/2020/02/28/%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/10.png" class=""></li>
<li>1clickVPN ：<img src="/2020/02/28/%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/5.png" class=""></li>
<li>Astar VPN ：<img src="/2020/02/28/%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/6.png" class=""></li>
<li>Hoxx VPN：<img src="/2020/02/28/%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/7.png" class=""></li>
<li>Proxy VPN to Unblock any sites FRE：<img src="/2020/02/28/%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/1.png" class=""></li>
<li>adguard vpn：<img src="/2020/02/28/%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/3.png" class=""></li>
<li>skyZIP Proxy：<img src="/2020/02/28/%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/2.png" class=""></li>
<li>风车云马：<img src="/2020/02/28/%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/11.png" class=""></li>
</ul>
<p>注：有些VPN需要注册，需要挂上其他VPN或谷歌访问助手才能注册。当连接上第二个VPN以后，要把其他VPN都关掉</p>
<p>自行测试哪个好用、哪个快，建议轮番使用。因为免费VPN同时用的人多了，自然会卡。</p>
<p>当然还有其他VPN，这里没有概括带的，可以自己在应用商店里面下载测试。</p>
<h2 id="谷歌插件管理"><a href="#谷歌插件管理" class="headerlink" title="谷歌插件管理"></a><span id="1.3">谷歌插件管理</span></h2><p>再推荐一个 管理Chrome插件 的插件，也是在谷歌商店下载。</p>
<ul>
<li>扩展管理器：<img src="/2020/02/28/%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/8.png" class=""></li>
</ul>
<img src="/2020/02/28/%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/9.png" class="">

<p>上一行“亮”的就是正在开启的插件，没有使用的插件会缩小在 插件管理器 的里面。</p>
<h2 id="ShadowsocksR"><a href="#ShadowsocksR" class="headerlink" title="ShadowsocksR"></a><span id="1.2">ShadowsocksR</span></h2><blockquote>
<p>科学上网方法：SSR和v2ray</p>
<p>关于这两种方法，直接在YouTube上搜索“科学上网”，有很多教学视频。当然没有用VPN快捷方便了。</p>
</blockquote>
<p>这里我给出通过ShadowsocksR的SSR方法：</p>
<p>ShadowsocksR官方下载地址：（下载ShadowsocksR-win-4.9.2.zip就行）</p>
<p><a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases" target="_blank" rel="noopener">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a></p>
<p>解压后运行ShadowsocksR-dotnet4.0.exe，这时候桌面右下角就会有个“小飞机”。</p>
<hr>
<p>进入一个站点资源：</p>
<p>方式一：得到二维码以后，右击右下角“小飞机”，选择<strong>二维码扫描</strong>，就会自动加载站点。</p>
<img src="/2020/02/28/%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/13.png" class="">

<p>方式二：得到SSR码，右击“小飞机”，选择<strong>剪切板批量导入ssr://链接</strong></p>
<img src="/2020/02/28/%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/14.png" class="">

<hr>
<p>系统代理模式 下的<strong>PAC</strong>和<strong>全局模式</strong></p>
<p>推荐<strong>PAC</strong>，若无法访问某些网站，就使用<strong>全局模式</strong> 。</p>
<blockquote>
<p>免费节点（需要翻墙）：</p>
<p><a href="https://free-ss.site/" target="_blank" rel="noopener">https://free-ss.site/</a></p>
<p><a href="https://lncn.org/" target="_blank" rel="noopener">https://lncn.org/</a></p>
<p><a href="https://ssrtool.us/tool/share_ssr" target="_blank" rel="noopener">https://ssrtool.us/tool/share_ssr</a></p>
<p><a href="https://io.freess.info/" target="_blank" rel="noopener">https://io.freess.info/</a></p>
</blockquote>
<h1 id="手机端科学上网"><a href="#手机端科学上网" class="headerlink" title="手机端科学上网"></a><span id="2">手机端科学上网</span></h1><p>国内政策因素，你无法在国内任何应用商店找到VPN下载。</p>
<p>当你电脑已经实现科学上网，就可以以进入APKPure这个商店里下载VPN到电脑上，然后传给手机。</p>
<p>APKPure里面有很多VPN的APK，我这里推荐免费好用的<strong>老王VPN</strong></p>
<p><strong>老王VPN</strong>官方下载地址：</p>
<p><a href="https://apkpure.com/wang-vpn-%E2%9D%A4%EF%B8%8F-free-fast-stable-best-vpn-just-try-it/com.findtheway" target="_blank" rel="noopener">https://apkpure.com/wang-vpn-%E2%9D%A4%EF%B8%8F-free-fast-stable-best-vpn-just-try-it/com.findtheway</a></p>
<p>老王VPN在手机的GooglePlay里也有下载,当然如果你手机已经翻墙才能用谷歌应用商店。</p>
<hr>
<p>为了方便，我提供一个下载地址：</p>
<p><strong>老王VPN微云下载链接</strong>：<a href="https://share.weiyun.com/5Y2qIPU" target="_blank" rel="noopener">https://share.weiyun.com/5Y2qIPU</a> 密码：5fsaeu</p>
<p><strong>老王VPN蓝奏下载链接</strong>：<a href="https://www.lanzous.com/i9tz46d" target="_blank" rel="noopener">https://www.lanzous.com/i9tz46d</a></p>
]]></content>
      <categories>
        <category>软件推荐</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>java-util-ConcurrentModificationException异常</title>
    <url>/2020/02/26/java-util-ConcurrentModificationException%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="fail-fast-快速失败-和fail-safe-安全失败"><a href="#fail-fast-快速失败-和fail-safe-安全失败" class="headerlink" title="fail-fast(快速失败)和fail-safe(安全失败)"></a>fail-fast(快速失败)和fail-safe(安全失败)</h1><h2 id="快速失败（fail-fast）"><a href="#快速失败（fail-fast）" class="headerlink" title="快速失败（fail-fast）"></a>快速失败（fail-fast）</h2><p>在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的内容进行了修改（增加、删除、修改），则会抛出ConcurrentModificationException。</p>
<p><font color=#FF0000>原理</font>：迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 modCount 变量。集合在被遍历期间如果内容发生变化，就会改变modCount的值。每当迭代器使用hashNext()/next()遍历下一个元素之前，都会检测modCount变量是否为expectedmodCount值，是的话就返回遍历；否则抛出异常，终止遍历。</p>
<p><font color=#FF0000>注意</font>：这里异常的抛出条件是检测到 modCount！=expectedmodCount 这个条件。如果集合发生变化时修改modCount值刚好又设置为了expectedmodCount值，则异常不会抛出。因此，不能依赖于这个异常是否抛出而进行并发操作的编程，这个异常只建议用于检测并发修改的bug。</p>
<p><font color=#FF0000>场景</font>：java.util包下的集合类都是快速失败的，不能在多线程下发生并发修改（迭代过程中被修改）。</p>
<h2 id="安全失败（fail-safe）"><a href="#安全失败（fail-safe）" class="headerlink" title="安全失败（fail-safe）"></a>安全失败（fail-safe）</h2><p>采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。</p>
<p><font color=#FF0000>原理</font>：由于迭代时是对原集合的拷贝进行遍历，所以在遍历过程中对原集合所作的修改并不能被迭代器检测到，所以不会触发ConcurrentModificationException。</p>
<p><font color=#FF0000>缺点</font>：基于拷贝内容的优点是避免了Concurrent Modification Exception，但同样地，迭代器并不能访问到修改后的内容，即：迭代器遍历的是开始遍历那一刻拿到的集合拷贝，在遍历期间原集合发生的修改迭代器是不知道的。</p>
<p><font color=#FF0000>场景</font>：java.util.concurrent包下的容器都是安全失败，可以在多线程下并发使用，并发修改。</p>
<a id="more"></a>

<h1 id="ConcurrentModificationException异常分析"><a href="#ConcurrentModificationException异常分析" class="headerlink" title="ConcurrentModificationException异常分析"></a>ConcurrentModificationException异常分析</h1><p>先来看一段代码：</p>
<pre><code class="java">import java.util.ArrayList;
import java.util.List;

public class IteratorTest {
    public static void main(String[] args) {
        List&lt;String&gt; list = new ArrayList&lt;&gt;();
        list.add(&quot;zhangsan&quot;);
        list.add(&quot;lisi&quot;);
        list.add(&quot;wangwu&quot;);
        list.add(&quot;goudan&quot;);
        list.add(&quot;mafei&quot;);
        list.add(&quot;lubenwei&quot;);
        for (String s : list) {
            if (s.equals(&quot;lisi&quot;)) {
                list.remove(s);
            }
        }
    }
}</code></pre>
<p>执行结果：<br><font color="#FF0000">Exception in thread “main” java.util.ConcurrentModificationException<br>at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:909)<br>at java.util.ArrayList$Itr.next(ArrayList.java:859)<br>at com.hq.iteratorTest.IteratorTest.main(IteratorTest.java:19)</font></p>
<p>上面代码主要是对删除集合中的某一元素，很多刚接触Java的同学在学习集合的时候，了解到remove(obj)方法，通过该方法删除掉集合中的元素。</p>
<p>我们先来看一下remove(obj)方法的源码（以ArrayList为例）</p>
<pre><code class="java">public boolean remove(Object o) {
    if (o == null) {
        for (int index = 0; index &lt; size; index++)
            if (elementData[index] == null) {
                fastRemove(index);
                return true;
            }
    } else {
        for (int index = 0; index &lt; size; index++)
            if (o.equals(elementData[index])) {
                fastRemove(index);
                return true;
            }
    }
    return false;
}</code></pre>
<pre><code class="java">private void fastRemove(int index) {
    modCount++;
    int numMoved = size - index - 1;
    if (numMoved &gt; 0)
        System.arraycopy(elementData, index+1, elementData, index,
                         numMoved);
    elementData[--size] = null; // clear to let GC do its work
}</code></pre>
<p>存在的疑惑：源码中并没有看到有抛出ConcurrentModificationException异常的代码，可是为什么会抛出此异常呢？</p>
<p><font color="#FF0000">书上是这样说的,编译器在看到一个实现了Interator接口的对象，当该集合对象在使用增强for循环时,会自动地重写,变成使用迭代器来遍历集合</font></p>
<p>所以开头的代码，相当于以下代码：</p>
<pre><code class="java">public class IteratorTest {
    public static void main(String[] args) {
        List&lt;String&gt; list = new ArrayList&lt;&gt;();
        list.add(&quot;zhangsan&quot;);
        list.add(&quot;lisi&quot;);
        list.add(&quot;wangwu&quot;);
        list.add(&quot;goudan&quot;);
        list.add(&quot;mafei&quot;);
        list.add(&quot;lubenwei&quot;);
        Iterator it = list.iterator();
        while (it.hasNext()){
            String s = it.next();
            if (s.equals(&quot;lisi&quot;)){
                list.remove(s); //注意这里调用的是集合的方法
            }
        }
    }
}</code></pre>
<p>虽然使用了迭代器进行遍历，但执行的remove()方法还是集合对象来操作。</p>
<p><strong>紧接着我们带着问题去寻找答案：通常我们会使用迭代器的remove()方法对集合元素进行操作，这是为什么？</strong></p>
<p>首先我们先看迭代器中的remove()方法源码：</p>
<pre><code class="java"> public void remove() {
            if (lastRet &lt; 0)
                throw new IllegalStateException();
            checkForComodification();

            try {
                ArrayList.this.remove(lastRet);
                // 游标
                cursor = lastRet;
                lastRet = -1;
                expectedModCount = modCount;
            } catch (IndexOutOfBoundsException ex) {
                throw new ConcurrentModificationException();
            }
 }</code></pre>
<p>ArrayList自带的remove方法源码：</p>
<pre><code class="java">public E remove(int index) {
        rangeCheck(index);

        modCount++;
        E oldValue = elementData(index);

        int numMoved = size - index - 1;
        if (numMoved &gt; 0)
            System.arraycopy(elementData, index+1, elementData, index,
                             numMoved);
        elementData[--size] = null; // clear to let GC do its work

        return oldValue;
    }</code></pre>
<p>异常检测源码：</p>
<pre><code class="java">final void checkForComodification() {
            if (modCount != expectedModCount)
                throw new ConcurrentModificationException();
        }</code></pre>
<p>由以上三段代码和对比前面集合的remove()方法可得：</p>
<pre><code class="java">// modCount  修改次数
// expectedModCount 期望修改次数</code></pre>
<p>在集合中进行操作时，当modCount != expectedModCount时会抛出修改异常。通过源码可以知道，集合在增加，删除元素时都会修改modCount的值，当在集合中删除时，modCount+1,而expectedModCount未改变，而在集合删除完之后，迭代器指向下一个对象（即调用next()方法），会检测出不一致而抛出异常。</p>
<p>迭代器next()源码如下：</p>
<pre><code class="java">public E next() {
            checkForComodification();
            int i = cursor;
            if (i &gt;= size)
                throw new NoSuchElementException();
            Object[] elementData = ArrayList.this.elementData;
            if (i &gt;= elementData.length)
                throw new ConcurrentModificationException();
            cursor = i + 1;
            return (E) elementData[lastRet = i];
}</code></pre>
<p><font color="#FF0000">迭代器的remove方法与集合的remove方法,最大的不同是,迭代器的remove方法中包括对游标和expectedModCount的修正。</font > </p>
<p><font color="#FF0000">因为Iterator是在一个独立的线程中工作的,它在new Itr()进行初始化时,会记录当时集合中的元素,可以理解为记录了集合的状态,在使用集合的Remove方法对集合进行修改时,被记录的集合状态并不会与之同步改变,所以在cursor指向下一个要返回的元素时,可能会发生找不到的错误,即抛出ConcurrentModificationException异常。</font ></p>
<p>很明显,如果使用迭代器提供的remove方法时,会对cursor进行修正,故不会出现错误,此外,还会修正expectedModCount,通过它来进行错误检测(迭代过程中,不允许集合的add,remove,clear等改变集合结构的操作)。</p>
<h1 id="单线程下解决方法"><a href="#单线程下解决方法" class="headerlink" title="单线程下解决方法"></a>单线程下解决方法</h1><p>既然知道了出现异常的关键为 modCount 和 expectedModCount的值，我们该如何解决该问题呢？</p>
<p>上文中已经提到的，迭代器的remove方法中，有一行代码 expectedModCount = modCount; 可以保证在修改之后两个变量的值相等。</p>
<p>所以，将之前的代码更正为下面的代码：</p>
<pre><code class="java"> public static void main(String[] args) {
        List&lt;String&gt; list = new ArrayList&lt;&gt;();
        list.add(&quot;zhangsan&quot;);
        list.add(&quot;lisi&quot;);
        list.add(&quot;wangwu&quot;);
        list.add(&quot;goudan&quot;);
        list.add(&quot;mafei&quot;);
        list.add(&quot;lubenwei&quot;);
         while (it.hasNext()){
            String s = it.next();
            if (s.equals(&quot;lisi&quot;)){
                it.remove(); // 注意这里
            }
        }
    }</code></pre>
<h1 id="多线程下解决方法"><a href="#多线程下解决方法" class="headerlink" title="多线程下解决方法"></a>多线程下解决方法</h1><p>上面我们已经提供了解决的方案，但是就适用于所有情况了吗？</p>
<p>先看以下一段代码：</p>
<pre><code class="java">public class IteratorTest {
    public static void main(String[] args) {
        List&lt;String&gt; list = new ArrayList&lt;&gt;();
        list.add(&quot;zhangsan&quot;);
        list.add(&quot;lisi&quot;);
        list.add(&quot;wangwu&quot;);
        list.add(&quot;goudan&quot;);
        list.add(&quot;mafei&quot;);
        list.add(&quot;lubenwei&quot;);
        Thread thread1 = new Thread(){
            @Override
            public void run() {
                Iterator&lt;String&gt; iterator = list.iterator();
                while(iterator.hasNext()){
                    String str = iterator.next();
                    System.out.println(str);
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            };
        };
        Thread thread2 = new Thread(){
            @Override
            public void run() {
                Iterator&lt;String&gt; iterator = list.iterator();
                while(iterator.hasNext()){
                    String str = iterator.next();
                    if (str.equals(&quot;lisi&quot;)) {
                        iterator.remove();
                    }
                }
            };
        };
        thread1.start();
        thread2.start();
    }
}</code></pre>
<img src="/2020/02/26/java-util-ConcurrentModificationException%E5%BC%82%E5%B8%B8/1.png" class="">

<p>同样的即使我们使用的是迭代器中的remove方法，在多线程情况下，依旧可能会出现异常？</p>
<p>我们来分析一下出现异常的原因：</p>
<p>当线程A执行遍历的第一次时，正常的打印出集合元素，线程B也正常的执行，我们无法控制CPU的调度，所以运用线程等待的方式，让第二个线程稍快与第一个线程，以检测出异常。当线程A等待的时候，线程B调用remove方法，此时modCount 值已经自增，而未执行到<font color="#FF0000">expectedModCount = modCount</font>的代码，此时<font color="#FF0000">expectedModCount != modCount</font>，这个时候线程A等待结束，进行第二次循环，当执行<font color="#FF0000">String str = iterator.next();</font>时，会进行异常检测，此时因为<font color="#FF0000">expectedModCount != modCount</font>而抛出异常。</p>
<p>这就很明显的解释了为什么在多线程情况下也是不安全的。</p>
<p>那么有什么好的解决办法呢？</p>
<p>我们都知道继承了AbstractList的有ArrayList和Vector，而且我们知道ArrayList是非线程安全的，而Vector是线程安全的，有一些朋友说我们可以使用Vector来使得在多线程下操作集合不会产生异常。</p>
<p>其实这里使用Vector依然会出现问题。</p>
<pre><code class="java">/**
 * @author Huangqing
 * @date 2018/7/25 16:37
 */
public class IteratorTest {
    public static void main(String[] args) {
        Vector&lt;String&gt; list = new Vector&lt;&gt;();
        list.add(&quot;zhangsan&quot;);
        list.add(&quot;lisi&quot;);
        list.add(&quot;wangwu&quot;);
        list.add(&quot;goudan&quot;);
        list.add(&quot;mafei&quot;);
        list.add(&quot;lubenwei&quot;);
        Thread thread1 = new Thread(){
            @Override
            public void run() {
                Iterator&lt;String&gt; iterator = list.iterator();
                while(iterator.hasNext()){
                    String str = iterator.next();
                    System.out.println(str);
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            };
        };
        Thread thread2 = new Thread(){
            @Override
            public void run() {
                Iterator&lt;String&gt; iterator = list.iterator();
                while(iterator.hasNext()){
                    String str = iterator.next();
                    if (str.equals(&quot;lisi&quot;)) {
                        iterator.remove();
                    }
                }
            };
        };
        thread1.start();
        thread2.start();
    }
}</code></pre>
<img src="/2020/02/26/java-util-ConcurrentModificationException%E5%BC%82%E5%B8%B8/2.png" class="">

<p>通过例子我们可以知道，其实Vector算不上是一个线程安全的集合类，至于为什么说他是线程安全的，我也不太清楚，可能是因为Vector很多方法上采用了synchronized的同步关键字，但是请注意：<font color="#FF0000">同步 != 线程安全</font>（该概念不在本章讨论）</p>
<p>当我们使用Vector时，虽然在对集合的操作上同步，但是别忘了我们使用的是集合中的迭代器，也就是上文说的，当我们在使用循环的使用，只要这个集合包含了迭代器类，那么就会使用迭代器进行循环，所以每个线程的迭代器还是线程私有的，而 modCount是共享的，这里同样会出现 <font color="#FF0000">modCount != expectedModCount</font> 的情况，所以会产生异常情况。</p>
<h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><p><font color="#FF0000">1）在使用iterator迭代的时候使用<strong>synchronized</strong>或者<strong>Lock</strong>进行同步； </font><br><font color="#FF0000">2）使用并发容器<strong>CopyOnWriteArrayList</strong>代替ArrayList和Vector。 </font></p>
<hr>
<p>版权声明：本文为CSDN博主「黄三岁TYOB」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_20492999/article/details/81216453" target="_blank" rel="noopener">https://blog.csdn.net/qq_20492999/article/details/81216453</a></p>
]]></content>
      <categories>
        <category>BUG</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>贪吃蛇——双蛇PK+大逃杀+排位记分+用户登录注册</title>
    <url>/2020/02/25/%E8%B4%AA%E5%90%83%E8%9B%87%E2%80%94%E2%80%94%E5%8F%8C%E8%9B%87PK-%E5%A4%A7%E9%80%83%E6%9D%80-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C-%E6%8E%92%E4%BD%8D%E8%AE%B0%E5%88%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h1><blockquote>
<p>小游戏有3张地图 1.无墙 2.横墙 3.竖墙 </p>
<p>排位模式：对应3张地图+大逃杀模式+3个排行榜</p>
<p>双蛇模式：对应3张地图+大逃杀模式+比分面板</p>
</blockquote>
<p>部分截图：</p>
<img src="/2020/02/25/%E8%B4%AA%E5%90%83%E8%9B%87%E2%80%94%E2%80%94%E5%8F%8C%E8%9B%87PK-%E5%A4%A7%E9%80%83%E6%9D%80-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C-%E6%8E%92%E4%BD%8D%E8%AE%B0%E5%88%86/%E5%8F%8C%E8%9B%871.png" class="">

<img src="/2020/02/25/%E8%B4%AA%E5%90%83%E8%9B%87%E2%80%94%E2%80%94%E5%8F%8C%E8%9B%87PK-%E5%A4%A7%E9%80%83%E6%9D%80-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C-%E6%8E%92%E4%BD%8D%E8%AE%B0%E5%88%86/%E5%8F%8C%E8%9B%872.png" class="">

<img src="/2020/02/25/%E8%B4%AA%E5%90%83%E8%9B%87%E2%80%94%E2%80%94%E5%8F%8C%E8%9B%87PK-%E5%A4%A7%E9%80%83%E6%9D%80-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C-%E6%8E%92%E4%BD%8D%E8%AE%B0%E5%88%86/%E5%9C%B0%E5%9B%BE1.2.png" class="">

<a id="more"></a>

<img src="/2020/02/25/%E8%B4%AA%E5%90%83%E8%9B%87%E2%80%94%E2%80%94%E5%8F%8C%E8%9B%87PK-%E5%A4%A7%E9%80%83%E6%9D%80-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C-%E6%8E%92%E4%BD%8D%E8%AE%B0%E5%88%86/%E5%9C%B0%E5%9B%BE2.1.png" class="">

<img src="/2020/02/25/%E8%B4%AA%E5%90%83%E8%9B%87%E2%80%94%E2%80%94%E5%8F%8C%E8%9B%87PK-%E5%A4%A7%E9%80%83%E6%9D%80-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C-%E6%8E%92%E4%BD%8D%E8%AE%B0%E5%88%86/%E5%9C%B0%E5%9B%BE3.1.png" class="">

<img src="/2020/02/25/%E8%B4%AA%E5%90%83%E8%9B%87%E2%80%94%E2%80%94%E5%8F%8C%E8%9B%87PK-%E5%A4%A7%E9%80%83%E6%9D%80-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C-%E6%8E%92%E4%BD%8D%E8%AE%B0%E5%88%86/%E6%8E%92%E8%A1%8C%E6%A6%9C.png" class="">

<img src="/2020/02/25/%E8%B4%AA%E5%90%83%E8%9B%87%E2%80%94%E2%80%94%E5%8F%8C%E8%9B%87PK-%E5%A4%A7%E9%80%83%E6%9D%80-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C-%E6%8E%92%E4%BD%8D%E8%AE%B0%E5%88%86/%E6%B3%A8%E5%86%8C%E7%95%8C%E9%9D%A2.png" class="">

<img src="/2020/02/25/%E8%B4%AA%E5%90%83%E8%9B%87%E2%80%94%E2%80%94%E5%8F%8C%E8%9B%87PK-%E5%A4%A7%E9%80%83%E6%9D%80-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C-%E6%8E%92%E4%BD%8D%E8%AE%B0%E5%88%86/%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2.png" class="">

<h1 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h1><h2 id="蛇的移动"><a href="#蛇的移动" class="headerlink" title="蛇的移动"></a>蛇的移动</h2><p>​        蛇是由一个个节点串接的，头结点没有上节点，尾结点没有下节点。</p>
<p>​        蛇在移动的时候，实质是在头结点的方向上生成一个新的头结点，然后删除尾结点，这时蛇就向当前方向移动了一格。</p>
<p>​        当蛇吃到食物的时候，就可以不删除尾结点，从而增强了蛇的长度，蛇头依然向前移动一格。</p>
<p>​        检查蛇是否死亡，在“排位模式”中，如果头结点位置超出边界、碰到墙、碰到自身——判定死亡。</p>
<p>​        在“双蛇模式”中，碰到自身不判定死亡，改写为碰到对方身体死亡，当蛇头相撞时，蛇身长的玩家获胜，否则平局。</p>
<hr>
<p>​        玩家能看到蛇移动，是因为每条蛇都有一个线程在绘制。</p>
<p>​        线程休息时间越短，蛇绘制的速度越快，显示蛇的速度也就越快，所以实现蛇加速，只需要让蛇线程的休息时间减少。</p>
<p>​        重写JPanel中的<strong>public void paint(Graphics g)</strong>方法，把所有画图的方法放在里面，就可以绘制。</p>
<h2 id="食物的生成"><a href="#食物的生成" class="headerlink" title="食物的生成"></a>食物的生成</h2><p>​        如果当前食物被吃掉，就个重新随机生成食物。</p>
<p>​        随机生成食物其实就是随机生成一个行和及随机生成一个结点，并且保证食物不能生成在墙体中、不能生成在界面外。</p>
<h2 id="地图的墙体"><a href="#地图的墙体" class="headerlink" title="地图的墙体"></a>地图的墙体</h2><p>​        每一块墙就是一个结点，蛇的头结点与任意墙结点重合——判定蛇撞墙</p>
<p>​        每一张地图都是一个Wall的Set集合，遍历当前Set集合就可判断蛇是否撞墙。</p>
<p>​        大逃杀模式中，每次吃一个食物，就向当前地图的Set集合中增加最上方的Wall，从而压缩蛇的生存空间。</p>
<h2 id="BUG-java-util-ConcurrentModificationException"><a href="#BUG-java-util-ConcurrentModificationException" class="headerlink" title="BUG:     java.util.ConcurrentModificationException"></a>BUG:     java.util.ConcurrentModificationException</h2><p>​        此BUG困扰了贼久！！！</p>
<p>​        归根结底是“线程安全”问题：因为两条蛇的线程每时每刻都在遍历Map类下的Set集合（元素为Wall类），然而在“双蛇模式”下，吃到食物后该Set集合会增加一行的Wall类元素，从而因为遍历时又进行修改，出现异常。</p>
<p>​        中途用synchronized各种想到的位置加锁也没用。（自己太菜<del>~</del>）</p>
<p>​        最终将Map类下的HashSet改成CopyOnWriteArraySet，经过测试已不再出BUG。</p>
<hr>
<p>提供修复此BUG的博客，感兴趣的可以去研究学习。</p>
<p><a href="https://blog.csdn.net/qq_20492999/article/details/81216453" target="_blank" rel="noopener">https://blog.csdn.net/qq_20492999/article/details/81216453</a></p>
<p><a href="https://www.cnblogs.com/snowater/p/8024776.html" target="_blank" rel="noopener">https://www.cnblogs.com/snowater/p/8024776.html</a></p>
<h1 id="贪吃蛇GitHub"><a href="#贪吃蛇GitHub" class="headerlink" title="贪吃蛇GitHub"></a>贪吃蛇GitHub</h1><p>地址:<a href="https://github.com/ZhuHouYu/SankeGame" target="_blank" rel="noopener">https://github.com/ZhuHouYu/SankeGame</a></p>
<p>README.md中有 流程图 和 文件框架备注，源代码中每个方法都有注释，利于参考学习。</p>
<p>本人新手编程，有许多不规范和不足的地方，欢迎联系建议指导。</p>
]]></content>
      <categories>
        <category>完成项目</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA命名</title>
    <url>/2020/02/25/JAVA%E5%91%BD%E5%90%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><p>1.项目名全部小写，就是如果项目名是多个英语单词组成的，每个单词都要全部小写。如：day01。</p>
<p>2.包名全部小写。</p>
<p>3.类名首字母大写（帕斯卡命名法），如果类名是多个单词拼成的，每个单词的首字母都要大写。如：JavaBean</p>
<p>4.变量名、方法名首字母小写（驼峰命名法），如果名称有多个单词组成，第二个及以后单词的首字母都要大写。如：userName、toString()</p>
<p> 5.常量名全部大写<br> 如：public static final int IMGAGE_ID=123;</p>
<h1 id="框架包名"><a href="#框架包名" class="headerlink" title="框架包名"></a>框架包名</h1><p>一、PO :(persistant object )，持久对象<br>二、VO :(value object) ，值对象<br>三、DAO :(Data Access Objects)  ，数据访问对象接口<br>四、BO :(Business Object)，业务对象层<br>五、POJO :(Plain Old Java Objects)，简单的Java对象<br>六丶DTO :(Data Transfer Object)，数据传输对象</p>
<a id="more"></a>

<p>七、JavaBean :一种可重用组件,一次性编写，任何地方执行，任何地方重用。<br>八、Util:工具类</p>
<h1 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h1><ul>
<li>标识符区分大小写，长度无限制</li>
<li>以 字母、下划线”_”、美元符”$” 开头</li>
<li>其他部分可以是 字母、下划线”_”、美元符”$”、和数字 的任意组合</li>
<li>不可以是JAVA关键字</li>
</ul>
]]></content>
      <categories>
        <category>常用操作</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse常用快捷键</title>
    <url>/2020/02/25/Eclipse%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>// Ctrl+D        ：删除一行<br>// Alt+/         ：提示<br>// Ctrl+1        ：只写new的右边，生成变量名<br>// Alt+Shift+S    ：get()set()、toString()、构造方法<br>// Ctrl+Alt+↓或↑    ：复制快捷键<br>// Alt+↓或↑        ：移动代码<br>// Ctrl+Shift+T    ：搜索类<br>// Ctrl+O        ：显示本类所有方法<br>// Ctrl+Shift+O    ：添加包并删除多余包</p>
]]></content>
      <categories>
        <category>常用操作</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>如何Git到GitHub上</title>
    <url>/2020/02/25/%E5%A6%82%E4%BD%95Git%E5%88%B0GitHub%E4%B8%8A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><a href="#1">基本方法</a></p>
<p><a href="#2">快捷方法</a></p>
</blockquote>
<h1 id="前提步骤"><a href="#前提步骤" class="headerlink" title="前提步骤"></a>前提步骤</h1><p>1.安装了Git，注册了GitHub账号</p>
<p>2.生成了SSH Key ，GitHub绑定了Key</p>
<h1 id="GitHub新建仓库"><a href="#GitHub新建仓库" class="headerlink" title="GitHub新建仓库"></a>GitHub新建仓库</h1><p>右上角New repository</p>
<img src="/2020/02/25/%E5%A6%82%E4%BD%95Git%E5%88%B0GitHub%E4%B8%8A/1.png" class="">

<p>填写信息：</p>
<img src="/2020/02/25/%E5%A6%82%E4%BD%95Git%E5%88%B0GitHub%E4%B8%8A/2.png" class="">

<a id="more"></a>

<p>记住该仓库的地址，一会要用</p>
<img src="/2020/02/25/%E5%A6%82%E4%BD%95Git%E5%88%B0GitHub%E4%B8%8A/3.png" class="">

<h1 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a><span id="1">基本方法</span></h1><p>1.进入本机电脑自己的项目文件夹，创建一个用于保存上传的文文件夹“Git版本”并进入</p>
<img src="/2020/02/25/%E5%A6%82%E4%BD%95Git%E5%88%B0GitHub%E4%B8%8A/4.png" class="">

<p>2.在“Git版本”中鼠标右键Git Bash Here,输入以下命令 初始化</p>
<pre><code>$ git init</code></pre><p>若出现.git的隐藏文件夹说明初始化成功</p>
<img src="/2020/02/25/如何Git到GitHub上/5.png">

<p>3.将自己上一层的项目文件全部复制到“Git版本”文件夹中</p>
<img src="/2020/02/25/如何Git到GitHub上/6.png">

<img src="/2020/02/25/如何Git到GitHub上/7.png">

<p>4.（可忽略）输入以下命令可以看到Git仓库的状态，显红说明并没有add到Git仓库上</p>
<pre><code>$ git status</code></pre><img src="/2020/02/25/%E5%A6%82%E4%BD%95Git%E5%88%B0GitHub%E4%B8%8A/8.png" class="">

<p>5.将复制的项目全部添加到仓库上，然后再 git status 显绿成功</p>
<pre><code>$ git add .</code></pre><img src="/2020/02/25/如何Git到GitHub上/10.png">

<p>6.提交到仓库，-m 后的引号内填写”注释内容“</p>
<pre><code>$ git commit -m &quot;&quot;</code></pre><img src="/2020/02/25/%E5%A6%82%E4%BD%95Git%E5%88%B0GitHub%E4%B8%8A/11.png" class="">

<p>7.本地仓库与GitHub仓库进行关联，将自己记下的GitHub仓库地址替换下面的</p>
<pre><code>$ git remote add origin git@github.com:ZhuHouYu/SankeGame.git</code></pre><p>8.将本地仓库的所有内容推送到GitHub上</p>
<p>首次推送：</p>
<pre><code>$ git push -u origin master</code></pre><p>第二次及以后推送可以不需加 -u</p>
<p>显示如图则已经成功推送到GitHub</p>
<img src="/2020/02/25/%E5%A6%82%E4%BD%95Git%E5%88%B0GitHub%E4%B8%8A/14.png" class="">

<p> 若出现以下错误，是因为在Github创建仓库时，勾选了自动生成README文件</p>
<img src="/2020/02/25/%E5%A6%82%E4%BD%95Git%E5%88%B0GitHub%E4%B8%8A/12.png" class="">

<p>输入以下命令进行内容合并，合并成功后再次git push origin master便成功了</p>
<pre><code>$ git pull --rebase origin master</code></pre><img src="/2020/02/25/如何Git到GitHub上/13.png">

<h1 id="快捷方法"><a href="#快捷方法" class="headerlink" title="快捷方法"></a><span id="2">快捷方法</span></h1><p>1.进入本机电脑自己的项目文件夹Git Bash Here，但这次不需要自己创建文件夹，</p>
<p>​    直接输入以下命令，把自己GitHub仓库地址替换到下面</p>
<pre><code>$ git clone git@github.com:ZhuHouYu/SankeGame.git</code></pre><p>2.这时你会发现项目内多了一个文件夹，就是上一步下载的GitHub的仓库，文件名=仓库名</p>
<img src="/2020/02/25/%E5%A6%82%E4%BD%95Git%E5%88%B0GitHub%E4%B8%8A/15.png" class="">

<p>3.进入那个文件夹，右键Git Bash Here</p>
<p>​    随后就跟基本方法一样了：</p>
<pre><code>$ git add .</code></pre><pre><code>$ git commit -m &quot;&quot;</code></pre><pre><code>$ git push -u origin master</code></pre>]]></content>
      <categories>
        <category>常用操作</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo插件音乐播放器Aplayer</title>
    <url>/2020/02/23/Hexo%E6%8F%92%E4%BB%B6%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8Aplayer/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="安装hexo-tag-aplayer插件"><a href="#安装hexo-tag-aplayer插件" class="headerlink" title="安装hexo-tag-aplayer插件"></a>安装hexo-tag-aplayer插件</h1><p>在hexo-tag-aplayer的GitHub可以看帮助文档：<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md" target="_blank" rel="noopener">https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md</a></p>
<p>1.在自己Hexo目录下Git Bash Here输入：</p>
<pre><code class="Git">npm install --save hexo-tag-aplayer</code></pre>
<p>2.hexo-tag-aplayer 支持了MetingJS的使用，可以直接解析网络平台的歌曲（ QQ音乐、网易云音乐、虾米、酷狗、百度等），首先要在Hexo的配置文件_config.yml中开启meting模式（注意不是主题themes下的__config.yml），加入到末尾：</p>
<pre><code>aplayer:
  meting: true</code></pre><a id="more"></a>

<h1 id="创建歌单页面"><a href="#创建歌单页面" class="headerlink" title="创建歌单页面"></a>创建歌单页面</h1><p>1.新建一个页面musicList</p>
<pre><code>hexo new page musicList</code></pre><p>2.在 Hexo/source 文件夹下会生成一个musicList文件夹，编辑里面的index.md，修改如下：</p>
<pre><code>---
title: &quot;音乐&quot;
date: 2020-02-23 01:01:15
type: &quot;musicList&quot;
---</code></pre><p>3.打开\Hexo\themes下主题的配置文件 _config.yml，（如F:\Hexo\themes\ayer，我用的ayer主题）menu下加入音乐: /musicList</p>
<pre><code># 侧边栏菜单
menu:
  主页: /
  归档: /archives
  分类: /categories
  标签: /tags
  音乐: /musicList
  相册: https://zhy1030310.lofter.com
  关于我: /2020/02/20/about/
</code></pre><h1 id="添加音乐歌单"><a href="#添加音乐歌单" class="headerlink" title="添加音乐歌单"></a>添加音乐歌单</h1><p>1.进入QQ音乐官网，分享一个歌单，复制链接</p>
<img src="/2020/02/23/Hexo%E6%8F%92%E4%BB%B6%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8Aplayer/IX23D84%7BK8MM%7D2$RJ09%5BG)W.png" class="" title="歌单分享">

<p>2.如：<a href="https://y.qq.com/n/m/detail/taoge/index.html?id=7441556250" target="_blank" rel="noopener">https://y.qq.com/n/m/detail/taoge/index.html?id=7441556250</a></p>
<p>记下id:7441556250</p>
<p>3.再进入刚才的F:\Hexo\source\musicList音乐页面下的index.md，输入以下内容</p>
<pre><code> {% meting "7441556250" "tencent" "playlist" "autoplay" "order:random" "mutex:false" "listmaxheight:400px" "preload:none" "theme:#ad7a86"%}</code></pre><p>4.MeingJS用法：</p>
<img src="/2020/02/23/Hexo%E6%8F%92%E4%BB%B6%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8Aplayer/TIM%E6%88%AA%E5%9B%BE20200223180300.png" class="" title="MeingJS用法">

<p>5.<a href="http://47.93.225.140/musicList/" target="_blank" rel="noopener">效果展示</a></p>
<p>6.注：当更新id:7441556250这个歌单时，网站虽然依然是旧歌单，不过等等就好了。</p>
<p>（我过了2天多博客歌单才更新）</p>
<hr>
<blockquote>
<p>最终想实现Aplayer悬浮播放器</p>
<p>留下笔记链接：<a href="https://aplayer.js.org/#/" target="_blank" rel="noopener">Aplyer官方（非hexo-tag-aplayer）</a></p>
</blockquote>
<blockquote>
<p>详细使用请看<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md" target="_blank" rel="noopener">hexo-tag-aplayer官方文档</a></p>
<p>文档比搜索引擎好使！</p>
</blockquote>
]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>Hexo插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo new后自动打开编辑器</title>
    <url>/2020/02/22/Hexo-new%E5%90%8E%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>1.在Hexo目下的script目录下创建一个auto_open.js脚本（script目录没有自己新建）</p>
<p>2.编辑文本插入代码：</p>
<pre><code>var spawn = require(&#39;child_process&#39;).exec;
hexo.on(&#39;new&#39;, function(data){
  spawn(&#39;start  &quot;F:\Typora\Typora.exe&quot; &#39; + data.path);
});</code></pre><p>3.把 F:\Typora\Typora.exe 改成自己Markdown编辑器的路径</p>
]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>Hexo插件</tag>
      </tags>
  </entry>
</search>
